{"name":"content","type":"directory","path":"/","children":[{"name":"0-what-is-programming","type":"directory","path":"/0-what-is-programming","children":[{"name":"1-developers.md","type":"file","ext":".md","base":"1-developers","dir":"0-what-is-programming","path":"/0-what-is-programming/1-developers.md","lang":".md","content":"# Developers\n\nDevelopers are the ones designing the software, writing the code, and fixing the bugs. As\na developer you'll spend lots of time reading source code. So it's very important to make\nsure your code is easy to understand.\n\nYou should think first of other developers who will need to understand your program, and\nsecond of yourself. Why is this more productive? First because working on a team is easier\nwhen everyone is looking out for each other. Second because one day you'll be someone\nelse! After even half an hour your thoughts about a program are no longer fresh, you'll\nneed to rely on what you wrote to figure out the details of your own program.\n\n---\n\n## Programs: Developers\n\nUsers and on the left in this diagram, developers are on the right.\n\n- **For Developers**\n    - **Static**: Comments, variable names and code formatting help developers read and\n      understand source code.\n    - **Dynamic**: Logs and error messages help developers understand what is happening\n      inside the computer as it follows the code's instructions.\n\n[![program diagram](../assets/a-program.png)](https://excalidraw.com/#json=40qMI89WByj9Yhhh94Ghg,4zpL-AmDgpnbyFJWJfNQhg)\n\n## Comments and Logs\n\nComments and logs are for developers, not for the computer. They exist to help you\nunderstand your program.\n\nComments and logging will not change what your program does, just how easy it is to\nunderstand.\n\n### 🥚 Comments\n\n```js\n'use strict';\n// comments are for people to read, not computers\n// these are both one-line comments\n\n// if you run or trace this snippet, nothing will happen\n```\n\n```js\n'use strict';\n/* this is a block comment\n\n  block comments are useful for writing longer messages\n\n  - and for\n  - things like\n  - lists\n\n  if you run or trace this snippet nothing will happen\n*/\n```\n\n---\n\n### 🥚 Logging.\n\n```js\n'use strict';\n// print a message to the browser's console\nconsole.log('-- logging --');\n\n// an empty log\nconsole.log();\n\n// you can log more than one thing at a time\nconsole.log('a', 'message', 'from', 'beyond'); // 'a', 'message', 'from', 'beyond'\n```\n\n---\n\n## References\n\n- Comments\n    - [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/chapters/how-to-write-code/comments.html)\n    - [programiz](https://www.programiz.com/javascript/comments)\n    - [javascript.info](https://javascript.info/structure#code-comments)\n    - [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#comments)\n- Logging\n    - [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/chapters/how-to-write-code/output.html?highlight=log)\n    - [programiz](https://www.programiz.com/javascript/console)\n    - [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Console/log)\n"},{"name":"2-computers.md","type":"file","ext":".md","base":"2-computers","dir":"0-what-is-programming","path":"/0-what-is-programming/2-computers.md","lang":".md","content":"# The Computer\n\n> Practicing these games will help you learn how to trace code, and prepare you for\n> learning about program memory:\n>\n> - 🥚 [compute-it](http://compute-it.toxicode.fr/)\n> - 🐣 [little-dot](http://little-dot.toxicode.fr/)\n\nWith JavaScript, what the program _does_ (inputs -> outputs) is less important than _how\nit happens_. Your goal now isn't to amaze the user, it's to become the computer and\nunderstand what happens between the input and the output:\n\n- source code -> **a lot of important steps** -> final output\n\n## Computer Empathy\n\nA program is just a series of instructions. If you follow the instructions _exactly_ like\nthe computer would, you are actually running the program by hand! (just a lot slower.)\nThere is no difference in theory between you following the code's instructions and a\ncomputer following the same instructions.\n\nSo when you practice tracing think of it as building your _computer empathy_:\nunderstanding what it's like to be the computer as it runs your program. If the first rule\nin design is \"know your user\", then one of the first rule in coding should be \"know your\ncomputer\". After all, the computer is one of your code's users!\n\n## Predict, not Explain\n\nSo what does it mean to \"know JavaScript\"? How do you know when you've understood some\ncode? When you can **predict** _exactly_ what will happen at each step of execution!\n\nExplaining a program in plain english is helpful but it's easy to be a little bit wrong\nand not know it. When you focus on _predicting_ what happens at each step and you check\nyour predictions with a trace or JS Tutor, then you really know if you understood.\n\nThis approach is also helpful because not only will you know if you're right, but if\nyou're wrong the computer will tell you the right answer! Then you know exactly which line\nyou didn't understand, and you know what to study next.\n\n---\n\n## Programs: The Computer\n\nThe computer is in the center of this diagram. It interpreting the developers source code,\nprocessing the user's data, and logging information for the developer.\n\nTracing code is a very good way to begin understanding how the computer follows your\ninstructions one step at a time:\n\n[![program diagram](../assets/a-program.png)](https://excalidraw.com/#json=_cj6JYwuO38PPGKxXN_cQ,3910Z7e2jGLZu4vjueG-Bg)\n"},{"name":"3-users.md","type":"file","ext":".md","base":"3-users","dir":"0-what-is-programming","path":"/0-what-is-programming/3-users.md","lang":".md","content":"# Users\n\nUsers will use your running programs, but will never see your source code. When\nwriting for a user you need to think of their needs and their experience using\nyour program.\n\nFor now the user experience of your programs will be limited to pop-up boxes,\nbut that doesn't mean you can't think of UX (User Experience). A user always\nappreciates  clear instructions, helpful feedback and a friendly tone in your\nmessages.\n\nHow does thinking of a user help you write code that they will never see? It's\nabout keeping the big picture in mind and making priorities. It's easy to get\ncaught up in the details of your code, taking a step back to remember who you're\ndeveloping for and why they need this program keeps your priorities in\nperspective.\n\n---\n\n## Programs: Users\n\nUsers and on the left in this diagram, developers are on the right.\n\n- **For Users**\n    - **Inputting Data**: `prompt` is a simple way for users to input data to a\n      JavaScript program.\n    - **Outputting Data**: `alert` is a simple way for the computer to display\n      data to a user.\n\n[![program diagram](../assets/a-program.png)](https://excalidraw.com/#json=40qMI89WByj9Yhhh94Ghg,4zpL-AmDgpnbyFJWJfNQhg)\n\n---\n\n## Basic User Interactions in JavaScript\n\ndifferent programming environments have different user interactions. in the browser the main one is the DOM (Document Object Model) this is how everything you see on your screen is created! but you won't be studying that for now\n\nthe browser has some simpler ways to interact with the user. you will be focusing on these for a while:\n\n- `alert`: displays a message to the user\n- `prompt`: asks the users to input some text\n- `confirm`: asks a user to say \"yes\" or \"no\"\n\nAll of these instruct the computer to show something to the user. the program will pause until the user responds then the program continues executing, using the user's input\n\n```js\n// alert just displays text, you cannot type anything\nalert('(alert) hello! the program is paused until you click \"ok\"');\n\n// prompt allows the user to pass a string or `null` into the program\n//  (you'll learn more about strings and `null` very soon)\nlet input = prompt('(prompt) you can type then click \"ok\" or \"cancel\"');\n\nalert(input);\n```\n"},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"0-what-is-programming","path":"/0-what-is-programming/README.md","lang":".md","content":"# What is Programming?\n\nProgramming is communication. It's also a lot of other things, but this\nintroduction will focus on the different ways you communicate with your code.\n\nWhen you write code you are really just writing a text document, exactly like\nyou might write an email or a note. The biggest difference between an email and\na computer program is _who you are writing for_.\n\nWhen you write an email you're writing for the person who will be reading it.\nWhen you write a computer program you are writing for 3 very different audiences\nat the same time! One single document (your code) needs to be understandable to:\n\n- **Developers**: A developer needs to read your code and understand what you\n  were trying to do and why.\n- **Computers**: Your code needs to have _perfect_ syntax so the computer can\n  parse it, and you must write instructions that are allowed by the programming\n  language or the computer will throw an error.\n- **Users**: The instructions you give to the computer must create an intuitive\n  and pleasant experience for the user.\n\nBeing a developer means understanding how all these characters interact, and\nthen communicating with everyone involved to deliver quality software within\nyour project's constraints. This diagram shows the different channels of\ncommunication in a software project:\n\n![rhetorical situation](../assets/the-big-picture.png)\n\n---\n\n## Programming Languages\n\nHigh-level programming languages like JavaScript are a compromise between how\npeople think and how a computer works. Programming languages are not always easy\nfor people to learn but they're definitely easier than directly telling a\ncomputer what to do (writing 1's and 0's).\n\nBecause humans are so much better at learning and understanding than computers\nare (for now), programming languages have been designed to leave all the hard\nwork for us. It's our job to make sure our instructions for the computer are\nperfectly structured and do exactly what we want. The computer just _parses_\n(interprets) our code and follows the instructions without any understanding or\nthinking.\n\nYou can think of a programming language as the developer's UI for the computer.\nBecause this UI isn't very intuitive you will need to spend a lot of time\nstudying syntax and other details before you can program with ease. This is why\nyou will be focusing on _understanding_ programs before writing them.\n\n[**_Learnable Programming_**](http://worrydream.com/LearnableProgramming/) said\nit best:\n\n> - **Programming is a way of thinking, not a rote skill**. Learning about \"for\"\n>   loops is not learning to program, any more than learning about pencils is\n>   learning to draw.\n> - **People understand what they can see**. If a programmer cannot see what a\n>   program is doing, she can't understand it.\n>\n> Thus, the goals of a programming system should be:\n>\n> - to support and encourage powerful ways of thinking\n> - to enable programmers to see and understand the execution of their programs\n>\n> ...\n>\n> _How do we get people to understand programming?_\n>\n> We change programming. We turn it into something that's understandable by\n> people.\n\nUntil the future when computers are designed to understand us, we're stuck with\nprogramming systems where we do the hard work of understand computers. Hopefully\nWelcome to JS & Study Lenses can make this journey easier.\n\n---\n\n## References\n\n- [CodeCademy](https://www.codecademy.com/articles/what-is-programming)\n- [Khan Academy](https://www.khanacademy.org/computing/computer-programming/programming/intro-to-programming/v/programming-intro)\n- [The Coding Train](https://www.youtube.com/watch?v=AImF__7FyzM)\n- [Practical Introduction to JS](https://shawnr.gitbooks.io/practical-introduction-to-javascript/content/what-is-programming/)\n"}]},{"name":"1-primitives-types","type":"directory","path":"/1-primitives-types","children":[{"name":"README.md","type":"file","ext":".md","base":"README","dir":"1-primitives-types","path":"/1-primitives-types/README.md","lang":".md","content":"# 🥚 Primitive Values\n\nProgramming computers is all about processing _data_. Data comes into a program,\nyour program processes the data, and some new data comes out at the end. In\nJavaScript the most basic kinds of data are **primitive values**. When talking\nabout a primitive value, there are two important pieces of information:\n\n- **Type**: What type of data is it? a string? a number? a boolean? undefined?\n- **Value**: Which one of it's type is it? Is it the _number_ **5**? or the\n  _string_ **'5'**?\n\nYou will learn more about each of these types as you work your way through Just\nEnough JavaScript:\n\n```js\n'use strict';\nconsole.log('--- booleans: true and false ---');\nconsole.log(true);\nconsole.log(false);\n```\n\n```js\n'use strict';\nconsole.log('--- strings: anything wrapped in quotation marks ---');\nconsole.log('hello');\nconsole.log('good bye');\nconsole.log('12'); // <- this  actually a string!\nconsole.log(''); // an empty string\n```\n\n```js\n'use strict';\nconsole.log('--- undefined: one way to say \"there is nothing here\" ---');\nconsole.log(undefined);\n```\n\n```js\n'use strict';\nconsole.log('--- null: another way to say \"there is nothing here\" ---');\nconsole.log(null);\n// we will later cover the difference between null and undefined\n```\n\n```js\n'use strict';\nconsole.log('--- numbers: numbers that are not wrapped in quotation marks ---');\nconsole.log(12);\nconsole.log(3.14);\nconsole.log(0);\nconsole.log(-12);\nconsole.log(10_000_000_000);\n```\n"},{"name":"booleans.md","type":"file","ext":".md","base":"booleans","dir":"1-primitives-types","path":"/1-primitives-types/booleans.md","lang":".md","content":"# Booleans\n\nA primitive type with two values: `true` and `false`.\n\nThese are helpful for making decisions in your programs, it's like asking `yes` or `no`.\n\n```js\n'use strict';\nconsole.log('-- booleans --');\n\n// there are only two boolean values:\nconsole.log(true); // true\nconsole.log(false); // false\n```\n"},{"name":"null.md","type":"file","ext":".md","base":"null","dir":"1-primitives-types","path":"/1-primitives-types/null.md","lang":".md","content":"# Null\n\nAnother primitive type used to represent nothing. This will make more sense after you learn about _variables_ and _prompt()_.\n\n```js\n'use strict';\nconsole.log('-- null --');\n\n// that's it, plain and simple\nconsole.log(null);\n```\n\n## `null` vs. `undefined`\n\n> The ECMAScript language specification describes them as follows:\n>\n> - `undefined` is “used when a variable has not been assigned a value”\n> - `null` “represents the intentional absence of any object value”\n>\n> [2ality](https://2ality.com/2021/01/undefined-null-revisited.html)\n\nThe practical difference between `null` and `undefined` is that `null` will not appear in\nyour program by accident. `undefined` can appear in your program if you forgot to assign a\nvalue, but `null` always need to be assigned.\n\nIf a variable stores `null` it was put there on purpose.\n"},{"name":"numbers.md","type":"file","ext":".md","base":"numbers","dir":"1-primitives-types","path":"/1-primitives-types/numbers.md","lang":".md","content":"# Numbers\n\nA primitive type used to represent numbers. The programs in this module used mostly\nstrings, but there will be few numbers.\n\nNumbers in JavaScript are challenging to work with and understand, even for experienced\ndevelopers. You will take a deeper look into numbers in the next module - Debugging. For\nnow you just need to know this:\n\n```js\n'use strict';\nconsole.log('-- numbers --');\n\nconsole.log(1.5);\nconsole.log(1);\nconsole.log(0);\nconsole.log(-1);\nconsole.log(-1.5);\n```\n"},{"name":"strings.md","type":"file","ext":".md","base":"strings","dir":"1-primitives-types","path":"/1-primitives-types/strings.md","lang":".md","content":"# Strings\n\nA primitive type used for saving and working with text. A string is anything wrapped in\nquotes: `'something'` or `\"something\"`:\n\n```js\n'use strict';\nconsole.log('-- strings --');\n\nconsole.log('this is a string');\nconsole.log('so is this');\n\n// use \\n to make a string print on more than one line\nconsole.log('first line\\nsecond line\\nthird line');\n\n// use ' and \" to put quotes inside your strings\nconsole.log('strings can use \"double quotes\"');\nconsole.log(\"strings can use 'single quotes'\");\n\n// the empty string: quotes with nothing in them\n// it's still a string!\nconsole.log('');\n```\n\n---\n\n## String Methods\n\n_String methods_ come built into JavaScript and are very useful for modifying your data.\nThere are many string methods in JS, but you'll only need these for Welcome to JS:\n\n<details>\n<summary>🥚 .toLowerCase and .toUpperCase</summary>\n\n```js\n'use strict';\nconsole.log('-- .toLowerCase and .toUpperCase --');\n\n// returns a new string with all lower case letters\nconsole.log('HackYourFuture'.toLowerCase()); // 'hackyourfuture'\n\n// returns a new string with all upper case letters\nconsole.log('HackYourFuture'.toUpperCase()); // 'HACKYOURFUTURE'\n```\n\n</details>\n<details>\n<summary>🥚 .includes</summary>\n\n```js\n'use strict';\nconsole.log('-- .includes --');\n\n// returns true or false\n//  true: if the string includes the argument\n//  false: if it does not\n// upper/lower case matters\nconsole.log('Abc'.includes('Ab')); // true\nconsole.log('Abc'.includes('bc')); // true\nconsole.log('Abc'.includes('ab')); // false\nconsole.log('Abc'.includes('BC')); // false\n```\n\n</details>\n<details>\n<summary>🥚 .replaceAll</summary>\n\n```js\n'use strict';\nconsole.log('-- .replaceAll --');\n\n// returns a new string with the first argument replaced by the second\nconsole.log('abc'.replaceAll('b', '')); // 'ac'\nconsole.log('computers'.replaceAll('z', '!')); // 'computers'\nconsole.log('hi from me, hi to you'.replaceAll('hi', 'bye')); // 'bye from me, bye to you'\n```\n\n</details>\n<details>\n<summary>🥚 .trim</summary>\n\n```js\n'use strict';\nconsole.log('-- .trim --');\n\n// returns a new string with all the white space removed from the ends\nconsole.log('  hello  '.trim()); // 'hello'\nconsole.log('  hello'.trim()); // 'hello'\nconsole.log('hello  '.trim()); // 'hello'\n```\n\n</details>\n\n---\n\n## Characters in a String\n\nA string is made up of individual characters. You can find out how many characters are in\na string, or access each character individually.\n\n<details>\n<summary>🥚 .length</summary>\n\n```js\n'use strict';\nconsole.log('-- .length --');\n\n// out how many characters are in a string\nconsole.log(''.length); // 0\nconsole.log('a'.length); // 1\nconsole.log('ab'.length); // 2\nconsole.log('abc'.length); // 3\n```\n\n</details>\n<details>\n<summary>🥚 character indexes</summary>\n\n```js\n'use strict';\nconsole.log('-- character indexes --');\n\n// get a specific character from a string\n//  careful, the first character is [0]!\nconsole.log('abc'[-1]); // undefined\nconsole.log('abc'[0]); // 'a'\nconsole.log('abc'[1]); // 'b'\nconsole.log('abc'[2]); // 'c'\nconsole.log('abc'[3]); // undefined\n```\n\n</details>\n<details>\n<summary>🐣 .indexOf</summary>\n\n```js\n'use strict';\nconsole.log('-- strings: .indexOf --');\n\nconsole.log('single characters');\n// returns the index of a substring inside a string\nconsole.log('abc'.indexOf('a')); // 0\nconsole.log('abc'.indexOf('b')); // 1\nconsole.log('abc'.indexOf('c')); // 2\n\nconsole.log('the empty string');\n// everything contains the empty string at index 0\nconsole.log(''.indexOf('')); // 0\nconsole.log('abc'.indexOf('')); // 0\nconsole.log('abc...xyz'.indexOf('')); // 0\n\nconsole.log('multiple characters');\n// you can search for more than one character\nconsole.log('toads'.indexOf('ds')); // 3\nconsole.log('abc'.indexOf('abc')); // 0\n\nconsole.log('does not exist');\n// if the search does not exist, indexOf returns -1\nconsole.log('asdf'.indexOf('x')); // -1\nconsole.log('JavaScript'.indexOf('Python')); // -1\nconsole.log(''.indexOf('hello')); // -1\n```\n\n</details>\n<details>\n<summary>🐣 .slice</summary>\n\n```js\n'use strict';\nconsole.log('-- strings: .slice --');\n\nconsole.log('one argument');\n// when you pass in only one number\n//  .slice returns the rest of the string from that index\nconsole.log('abcd'.slice(0)); // 'abcd'\nconsole.log('abcd'.slice(1)); //  'bcd'\nconsole.log('abcd'.slice(2)); //   'cd'\nconsole.log('abcd'.slice(3)); //    'd'\nconsole.log('abcd'.slice(5)); // undefined\n\nconsole.log('two arguments');\n// when you pass in two numbers\n//  .slice returns the characters from the first index to the second\nconsole.log('abcd'.slice(0, 4)); // 'abcd'\nconsole.log('abcd'.slice(1, 4)); //  'bcd'\nconsole.log('abcd'.slice(1, 3)); //  'bc'\nconsole.log('abcd'.slice(2, 3)); //   'c'\nconsole.log('abcd'.slice(2, 2)); // undefined\n\nconsole.log('negative arguments');\n// when you pass negative numbers\n//  the array indexes are counted backwards from the end of the string\nconsole.log('abcd'.slice(-1)); //   'd'\nconsole.log('abcd'.slice(-2)); //  'cd'\nconsole.log('abcd'.slice(-3)); // 'bcd'\nconsole.log('abcd'.slice(-4, -1)); // 'abc'\nconsole.log('abcd'.slice(-3, -1)); //  'bc'\nconsole.log('abcd'.slice(-3, -2)); //  'b'\n```\n\n</details>\n\n---\n\n## References\n\n- [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/chapters/data-and-variables/values-and-data-types.html#more-on-strings)\n- [javascript.info](https://javascript.info/string#accessing-characters)\n"},{"name":"undefined.md","type":"file","ext":".md","base":"undefined","dir":"1-primitives-types","path":"/1-primitives-types/undefined.md","lang":".md","content":"# Undefined\n\nA primitive type used to show that there is no value.\n\n```js\n'use strict';\nconsole.log('-- undefined --');\n\n// just this, nothing more to it\nconsole.log(undefined);\n```\n"}]},{"name":"2-operators","type":"directory","path":"/2-operators","children":[{"name":"0-typeof.js","type":"file","ext":".js","base":"0-typeof","dir":"2-operators","path":"/2-operators/0-typeof.js","lang":".js","content":"'use strict';\n\n// your answers must use typeof, but can use any values\nconsole.log('-- write 2 values with the type \"boolean\" --');\nconsole.log(typeof _); // 'boolean'\nconsole.log(typeof _); // 'boolean'\n\nconsole.log('-- write 1 value with the type \"object\" --');\nconsole.log(typeof _); // 'object'\n\nconsole.log('-- write 5 values with the type \"string\" --');\n// examples\nconsole.log(typeof 'hello'); // 'string'\nconsole.log(typeof ''); // 'string'\n// exercises\nconsole.log(typeof _); // 'string'\nconsole.log(typeof _); // 'string'\nconsole.log(typeof _); // 'string'\nconsole.log(typeof _); // 'string'\nconsole.log(typeof _); // 'string'\n\nconsole.log('-- write 5 values with the type \"number\" --');\n// examples\nconsole.log(typeof 0); // 'number'\nconsole.log(typeof 18.5); // 'number'\n// exercises\nconsole.log(typeof _); // 'number'\nconsole.log(typeof _); // 'number'\nconsole.log(typeof _); // 'number'\nconsole.log(typeof _); // 'number'\nconsole.log(typeof _); // 'number'\n"},{"name":"1-strict-equality.js","type":"file","ext":".js","base":"1-strict-equality","dir":"2-operators","path":"/2-operators/1-strict-equality.js","lang":".js","content":"'use strict';\n\n// your answers must include ===, but can use any type\n\nconsole.log('--- write 5 comparisons that evaluate to true ---');\n// examples\nconsole.log('hello' === 'hello');\nconsole.log('Bye' === 'Bye');\nconsole.log(1 === 1.0);\n// exercises\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\n\nconsole.log('--- write 5 comparisons that evaluate to false ---');\n// examples\nconsole.log('hello' === 'hello ');\nconsole.log('Bye' === 'bye');\nconsole.log(1 === 1.1);\n// exercises\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\n"},{"name":"2-addition.js","type":"file","ext":".js","base":"2-addition","dir":"2-operators","path":"/2-operators/2-addition.js","lang":".js","content":"'use strict';\n\n// your answers should only include numbers and +\n\nconsole.log('--- find 5 ways to log the number 5 ---');\n// examples\nconsole.log(5);\nconsole.log(0 + 2 + 3);\n// exercises\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\n\nconsole.log('--- find 4 ways to log the number 4 ---');\n// examples\nconsole.log(4);\nconsole.log(2 + 2);\n// exercises\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\n"},{"name":"2-concatenation.js","type":"file","ext":".js","base":"2-concatenation","dir":"2-operators","path":"/2-operators/2-concatenation.js","lang":".js","content":"'use strict';\n\n// your answers should only include strings and +\n\nconsole.log('--- find 3 ways to log \"hello\" ---');\n// examples\nconsole.log('hello');\nconsole.log('h' + 'ello');\n// exercises\nconsole.log();\nconsole.log();\nconsole.log();\n\nconsole.log('--- find 4 ways to log \"good bye\" ---');\n// examples\nconsole.log('good bye');\nconsole.log('good' + ' ' + 'bye');\n// exercises\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();\n"},{"name":"3-not.js","type":"file","ext":".js","base":"3-not","dir":"2-operators","path":"/2-operators/3-not.js","lang":".js","content":"'use strict';\n\n// your answers can only use ! and boolean values\n//  all of your answers do not need the ! operator\n\nconsole.log(); // true using !\nconsole.log(); // true without !\nconsole.log(); // false using !\nconsole.log(); // false without !\n"},{"name":"4-and.js","type":"file","ext":".js","base":"4-and","dir":"2-operators","path":"/2-operators/4-and.js","lang":".js","content":"'use strict';\n\n// fill in the _ to complete the exercises\n//  your answers should all be boolean values\n\nconsole.log(true && _); // true\nconsole.log(_ && true); // false\nconsole.log(false && _); // false\nconsole.log(_ && false); // false\n\nconsole.log(_ && _); // false\nconsole.log(_ && _); // false\nconsole.log(_ && _); // true\nconsole.log(_ && _); // false\n"},{"name":"4-or.js","type":"file","ext":".js","base":"4-or","dir":"2-operators","path":"/2-operators/4-or.js","lang":".js","content":"'use strict';\n\n// fill in the _ to complete the exercises\n//  your answers should all be boolean values\n\nconsole.log(true || _); // true\nconsole.log(_ || true); // true\nconsole.log(false || _); // true\nconsole.log(_ || false); // false\n\nconsole.log(_ || _); // true\nconsole.log(_ || _); // false\nconsole.log(_ || _); // true\nconsole.log(_ || _); // true\n"},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"2-operators","path":"/2-operators/README.md","lang":".md","content":"# Operators\n\nOperators are what you use to process or change the data in your programs. Operators take\nin values, do something, and return a new value. Each operator has it's own rules about\nwhat it does and how it does it. To understand an operator you need to understand these\nthings:\n\n- **Syntax**: how do you write the operator in your code?\n- **Input(s)**: how many inputs does the operator take? what type are they? what are their\n  values?\n- **Output**: What does the operator evaluate to? What type does it return?\n- **Behavior**: How does the operator use it's inputs to create an output?\n\nHere are a few of the operators you will learn about in Welcome to JS, you will learn more\nabout operators as you need them:\n\n<details>\n<summary>🥚 <code>typeof</code> (type of)</summary>\n\n```js\n'use strict';\nconsole.log('-> type of: typeof');\n\n/* the typeof operator will tell you the type of a value\n\n  syntax: the typeof operator takes in only one value\n    -> typeof _\n  inputs: you can pass any value to typeof\n  output: a string saying what type the value is\n  behavior: typeof returns the name of a value's type\n    in Welcome to JS the important types will be:\n    -> 'boolean'\n    -> 'string'\n    -> 'undefined'\n    -> 'object' (null, confusing but that's the way it is)\n    -> 'number'\n*/\n\nconsole.log(typeof true); // 'boolean'\nconsole.log(typeof 'hello'); // 'string'\nconsole.log(typeof undefined); // 'undefined'\nconsole.log(typeof null); // 'object'\nconsole.log(typeof 12); // 'number'\n```\n\n</details>\n<details>\n<summary>🥚 <code>===</code> (strict equality)</summary>\n\n```js\n'use strict';\nconsole.log('-> strict equality: ===');\n\n/* the strict comparison operator will tell you if two primitives are the same\n\n  syntax: the === operator takes in two values\n    -> _ === _\n  inputs: you can pass any value to ===\n  output: a boolean value saying if the two values are the same\n  behavior: === checks the type AND the value\n    if the types are different, it returns false\n    if the values are different, it returns false\n    if the type and value are the same, it returns true\n*/\n\n// true comparisons: same type, same value\nconsole.log(true === true); // true\nconsole.log(12 === 12); // true\nconsole.log('hello' === 'hello'); // true\nconsole.log(undefined === undefined); // true\nconsole.log(null === null); // true\n\n// false comparisons: same type, different value\nconsole.log(12 === 1); // false\nconsole.log('hello' === 'Hello'); // false\nconsole.log(true === false); // false\n\n// false comparisons: different type, different value\nconsole.log('12' === 12); // false\nconsole.log('undefined' === undefined); // false\nconsole.log(true === 'true'); // false\nconsole.log(100 === 'true'); // false\nconsole.log(true === 1); // false\n```\n\n</details>\n<details>\n<summary>🥚 <code>+</code> (concatenation or addition)</summary>\n\n```js\n'use strict';\n/*\n  the plus operator is more complex\n  it behaves differently depending on the types passed in\n  it is also called something different depending on the types used\n  (but the syntax is always the same)\n*/\n\nconsole.log('-> concatenation: +');\n\n/* string concatenation\n\n  syntax: the + operator takes in two values\n    -> _ + _\n  inputs: two strings are passed in for concatenation\n  output: a new string created by combining the first two\n  behavior: when both arguments are a string, they are combined\n    'a string' + 'another string'\n    becomes\n    'a stringanother string'\n\n*/\n\nconsole.log('hello ' + 'goode bye'); // 'hello good bye'\nconsole.log('hello ' + 'goode ' + 'bye'); // 'hello good bye'\n\nconsole.log('-> addition: +');\n/* number addition\n\n  syntax: the + operator takes in two values\n    -> _ + _\n  inputs: two numbers are passed in for addition\n  output: a new number created by adding both arguments\n  behavior: like normal math (for now)\n    5 + 3 --> 8\n    1 + 1 --> 2\n    -1 + -1 --> 0\n\n*/\n\nconsole.log(5 + 8); // 13\nconsole.log(3 + 3 + 3); // 9\n```\n\n</details>\n\n<details>\n<summary>🥚 <code>typeof</code></summary>\n\n```js\n'use strict';\nconsole.log('-- typeof booleans --');\n\n// they both have the type \"boolean\"\nconsole.log(typeof true); // 'boolean'\nconsole.log(typeof false); // 'boolean'\n```\n\n</details>\n<details>\n<summary>🥚 <code>===</code> strict equality</summary>\n\n```js\n'use strict';\nconsole.log('-- booleans: strict equality --');\n\n// boolean values are only strictly equal to themselves\nconsole.log(true === true); // true\nconsole.log(false === false); // true\n\n// they are not equal to each other\nconsole.log(true === false); // false\nconsole.log(false === true); // false\n\n// booleans are not equal to any other type\nconsole.log(true === 'true'); // false\nconsole.log(false === ''); // false\nconsole.log(true === 12); // false\nconsole.log(false === undefined); // false\n\nconsole.log('-- numbers: strict equality --');\n\n// are two numbers the same?\nconsole.log(1 === 1.0); // true\nconsole.log(12 === 12); // true\nconsole.log(-3.0 === -3); // true\n\nconsole.log(1 === 1.1); // false\nconsole.log(-12 === 12); // false\nconsole.log(0.3 === 3.0); // false\n\n// comparing with any other type will always be false\nconsole.log(1 === true); // false\nconsole.log(12 === '12'); // false\nconsole.log(0 === null); // false\n\nconsole.log('-- strings: strict equality --');\n\n// two strings are the same thing if they have exactly the same characters\nconsole.log('' === ''); // true\nconsole.log('asdf' === 'asdf'); // true\nconsole.log('12D' === '12D'); // true\n\n// two strings with different characters are not the same string\nconsole.log('' === ' '); // false\nconsole.log('asdf' === 'Asdf'); // false\nconsole.log('cow' === 'horse'); // false\n\n// strings are never the same as different types\nconsole.log('' === true); // false\nconsole.log('true' === true); // false\nconsole.log('12' === 12); // false\nconsole.log('null' === null); // false\nconsole.log('hello' === 100); // false\n```\n\n</details>\n<details>\n<summary>🐣 <code>!==</code>  strict inequality</summary>\n\n```js\n'use strict';\nconsole.log('-- numbers: strict inequality --');\n// this will always be the opposite of strict equality\n\n// are two numbers different?\nconsole.log(1 !== 1.0); // false\nconsole.log(12 !== 12); // false\nconsole.log(-3.0 !== -3); // false\n\nconsole.log(1 !== 1.1); // true\nconsole.log(-12 !== 12); // true\nconsole.log(0.3 !== 3.0); // true\n\n// comparing with any other type will always be true\nconsole.log(1 !== true); // true\nconsole.log(12 !== '12'); // true\nconsole.log(0 !== null); // true\n\nconsole.log('-- strings: strict inequality --');\n// the opposite of strict equality\n\n// two strings are not unequal if they have exactly the same characters\nconsole.log('' !== ''); // false\nconsole.log('asdf' !== 'asdf'); // false\nconsole.log('12D' !== '12D'); // false\n\n// two strings with different characters are unequal\nconsole.log('' !== ' '); // true\nconsole.log('asdf' !== 'Asdf'); // true\nconsole.log('cow' !== 'horse'); // true\n\n// strings are always unequal to different types\nconsole.log('' !== true); // true\nconsole.log('true' !== true); // true\nconsole.log('12' !== 12); // true\nconsole.log('null' !== null); // true\nconsole.log('hello' !== 100); // true\n```\n\n</details>\n<details>\n<summary>🥚  <code>!</code> not</summary>\n\n```js\n'use strict';\nconsole.log('-- not --');\n\n// you can use ! to reverse true and false\nconsole.log(!true); // false\nconsole.log(!false); // true\n```\n\n</details>\n<details>\n<summary>🐣 <code>&&</code> and</summary>\n\n```js\n'use strict';\nconsole.log('-- and --');\n\nconsole.log(true && true); // true\nconsole.log(true && false); // false\nconsole.log(false && true); // false\nconsole.log(false && false); // false\n```\n\n</details>\n<details>\n<summary>🐣 <code>||</code> or</summary>\n\n```js\n'use strict';\nconsole.log('-- or --');\n\nconsole.log(true || true); // true\nconsole.log(true || false); // true\nconsole.log(false || true); // true\nconsole.log(false || false); // false\n```\n\n</details>\n\n<details>\n<summary>🐣 arithmetic</summary>\n\n```js\n'use strict';\nconsole.log('-- numbers: arithmetic --');\n\nconsole.log(' +');\n// adding numbers\nconsole.log(1 + 1); // 2\nconsole.log(-1 + 1); // 0\n\nconsole.log(' -');\n// subtracting numbers\nconsole.log(3 - 2); // 1\nconsole.log(2 - 3); // -1\n\nconsole.log(' *');\n// multiplying numbers\nconsole.log(3 * 2); // 6\nconsole.log(3 * 5); // 15\n\nconsole.log(' /');\n// dividing numbers\nconsole.log(30 / 2); // 15\nconsole.log(12 * 3); // 4\n\nconsole.log(' %');\n// finding the remainder\nconsole.log(3 % 2); // 1\nconsole.log(3 % 3); // 0\n```\n\n</details>\n\n<details>\n<summary>🐣  comparisons</summary>\n\n```js\n'use strict';\nconsole.log('-- relational operators --');\n\nconsole.log(' >');\n// is the left number bigger than the right one?\nconsole.log(3 > 22); // false\nconsole.log(22 > 3); // true\nconsole.log(1 > 1); // false\n\nconsole.log(' <');\n// is the left number smaller than the right one?\nconsole.log(3 < 22); // true\nconsole.log(22 < 3); // false\nconsole.log(1 < 1); // false\n\nconsole.log(' >=');\n// is the left number bigger than OR equal to the right one?\nconsole.log(3 >= 22); // false\nconsole.log(22 >= 3); // true\nconsole.log(1 >= 1); // true\n\nconsole.log(' <=');\n// is the left number smaller than OR equal to the right one?\nconsole.log(3 <= 22); // true\nconsole.log(22 <= 3); // false\nconsole.log(1 <= 1); // true\n```\n\n</details>\n"}]},{"name":"3-variables","type":"directory","path":"/3-variables","children":[{"name":"1-examples","type":"directory","path":"/3-variables/1-examples","children":[{"name":"1-declaring.js","type":"file","ext":".js","base":"1-declaring","dir":"3-variables/1-examples","path":"/3-variables/1-examples/1-declaring.js","lang":".js","content":"'use strict';\n\n/* Declaring a Variable\n\n  declaring a variable creates a new \"box\" in program memory,\n    the box will begin empty.\n\n  variable declarations have two main parts:\n\n  - keyword: let, const or var.  (but just let for now)\n  - name: a name to help you read the code.\n          there are rules about what names you can and can't use\n          but that's for later\n\n*/\n\nlet turtle;\n\nlet food;\n\nlet x;\n"},{"name":"2-declaring-and-initializing.js","type":"file","ext":".js","base":"2-declaring-and-initializing","dir":"3-variables/1-examples","path":"/3-variables/1-examples/2-declaring-and-initializing.js","lang":".js","content":"'use strict';\n\n/* Declaring and Initializing\n\n  you can also initialize a variable with a value\n  this means that the variable will not be empty\n\n  there are four main parts to declaring and initializing:\n\n  - keyword: let, const or var.  (but just let for now)\n  - name: a name to help you read the code\n  - assignment operator (=)\n  - initial value: what you want to store in the variable\n\n*/\n\nlet turtle = 'Vinnie';\n\nlet food = 'lettuce';\n\nlet x = 'abc';\n"},{"name":"3-assigning.js","type":"file","ext":".js","base":"3-assigning","dir":"3-variables/1-examples","path":"/3-variables/1-examples/3-assigning.js","lang":".js","content":"'use strict';\n\n/* Assigning New Values\n\n  you can assign new values to a variable after they are declared.\n\n  assignments happen from right to left!\n\n  - the variable you want update is written on the LEFT of =\n  - the new value is written on the RIGHT of =\n*/\n\nlet turtle = 'Vinnie';\nturtle = 'Yurtle';\n\nlet food = 'lettuce';\nfood = 'peanut';\n\nlet x = 'abc';\nx = '-|-';\n"},{"name":"4-reading.js","type":"file","ext":".js","base":"4-reading","dir":"3-variables/1-examples","path":"/3-variables/1-examples/4-reading.js","lang":".js","content":"'use strict';\n\n/* Reading Stored Values\n\n  you can also read the value stored in a variable\n  to read a variable's value you just write it somewhere!\n    somewhere other than the left side of =\n\n  you can use variables every way as many times as you like\n\n*/\n\nlet name = 'Pieter';\n\nlet greeting = 'hello ' + name;\nconsole.log(greeting); // \"hello Pieter\"\n\nname = 'Amela';\n\ngreeting = 'good bye ' + name;\nconsole.log(greeting); // \"good bye Amela\"\n"},{"name":"5-first-name.js","type":"file","ext":".js","base":"5-first-name","dir":"3-variables/1-examples","path":"/3-variables/1-examples/5-first-name.js","lang":".js","content":"'use strict';\n\n/*\n  comment and uncomment different names\n  how will the program change?\n\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\n// trace the program a few times with different values\n\nlet firstName = 'Pieter';\n// let firstName = 'Blake';\n// let firstName = 'George';\n\nlet greeting = 'hello ' + firstName + '!';\n\ngreeting = 'good bye ' + firstName + '.';\n"},{"name":"6-full-name.js","type":"file","ext":".js","base":"6-full-name","dir":"3-variables/1-examples","path":"/3-variables/1-examples/6-full-name.js","lang":".js","content":"'use strict';\n\n/*\n  comment and uncomment different names\n  how will the program change?\n\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\n// trace the program a few times with different values\n\nlet first = 'Pieter';\n// let first = 'Blake';\n// let first = 'George';\n\nlet last = 'Rabbit';\n// let last = 'Wozzeck';\n// let last = 'Schoenberg';\n\nlet fullName = first + ' ' + last;\n\nlet greeting = 'hello ' + fullName;\n\ngreeting = 'good bye ' + fullName;\n"},{"name":"7-one-fish-two-fish.js","type":"file","ext":".js","base":"7-one-fish-two-fish","dir":"3-variables/1-examples","path":"/3-variables/1-examples/7-one-fish-two-fish.js","lang":".js","content":"'use strict';\n\nlet phrase = ' ';\n\nphrase = 'one' + phrase + 'fish';\n\nphrase = phrase + ' two';\n\nphrase = phrase + ' fish';\n\nconsole.log(phrase); // 'one fish two fish'\n\n/*\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"8-swap-1.js","type":"file","ext":".js","base":"8-swap-1","dir":"3-variables/1-examples","path":"/3-variables/1-examples/8-swap-1.js","lang":".js","content":"'use strict';\n\nlet a = 'y';\nlet b = 'x';\nlet temp;\n\ntemp = a;\na = b;\nb = temp;\n\nconsole.log(a, b, temp);\n\n/*\n  - is it possible to swap the variables without using `temp`?\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"9-swap-2.js","type":"file","ext":".js","base":"9-swap-2","dir":"3-variables/1-examples","path":"/3-variables/1-examples/9-swap-2.js","lang":".js","content":"'use strict';\n\nlet a = 'y';\nlet b = 'x';\nlet temp;\n\ntemp = b;\nb = a;\na = temp;\n\nconsole.log(a, b, temp);\n\n/*\n  - is it possible to swap the variables without using `temp`?\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"}]},{"name":"2-variable-names","type":"directory","path":"/3-variables/2-variable-names","children":[{"name":"README.md","type":"file","ext":".md","base":"README","dir":"3-variables/2-variable-names","path":"/3-variables/2-variable-names/README.md","lang":".md","content":"# Variable Names\n\nThe computer cannot understand what your variable names _mean_, to a computer\n`let asdf = 'hello';` is same as `let greeting = 'hello';` . Variable names are 100% for\ndevelopers to understand the code and 0% helpful for the computer.\n\nComputers just care how you _use_ the variables:\n\n- Where is it declared?\n- Is it initialized?\n- Where is it read?\n- Where is it assigned a new value?\n\nWhen the computer is interpreting your code it's these \"patterns\" that make one set of\ninstructions different from another, not the variable names.\n\nConsider these two programs, they both have different variable names but the same\ninstructions. Commented above each line is how the computer will interpret your code (or\nclose enough for now). Can you find anything different between the comments in each\nprogram?\n\n---\n\n```js\n'use strict';\n\nconsole.log('--- program 1 --- ');\n\n// declare variable 1: let\n// initialize variable 1: \"hello\"\nlet greeting = 'hello';\n\n// declare variable 2: let\n// initialize variable 2: \"!\"\nlet excitement = '!';\n\n// read from variable 1: \"hello\"\n// read from variable 2: \"!\"\n// assign to variable 1: \"hello!\"\ngreeting = greeting + excitement;\n\n// read from variable 1: \"hello!\"\nconsole.log(greeting);\n```\n\n---\n\n```js\n'use strict';\n\nconsole.log('--- program 2 --- ');\n\n// declare variable 1: let\n// initialize variable 1: \"hello\"\nlet x = 'hello';\n\n// declare variable 2: let\n// initialize variable 2: \"!\"\nlet y = '!';\n\n// read from variable 1: \"hello\"\n// read from variable 2: \"!\"\n// assign to variable 1: \"hello!\"\nx = x + y;\n\n// read from variable 1: \"hello!\"\nconsole.log(x);\n```\n\n<details>\n<summary>🥚 variable names <strong>can</strong> use numbers, letters, $, or _</summary>\n\n```js\n'use strict';\nconsole.log('-- valid variable names --');\n// all of these variable names are ok\n\nlet $ = 1;\nlet _ = 2;\nlet a = 3;\nlet A = 4;\nlet b1_$ = 5;\nlet HackYourFuture2021_$ = 6;\nlet b_e_l_g_i_u_m = 7;\n// ...\n```\n\n</details>\n<details>\n<summary>🥚 variable names <strong>are</strong> case-sensitive</summary>\n\n```js\n'use strict';\nconsole.log('-- variable names are case-sensitive --');\n\n// notice, there is no error.\n//  JS does not consider this as declaring the same variable twice\nlet javascript = 'a programming language';\nlet JavaScript = 'upper case!';\n\nconsole.log(javascript); // 'a programming language'\nconsole.log(JavaScript); // 'upper case!'\n```\n\n</details>\n<details>\n<summary>🥚 variable names can <strong>not</strong> start with a number</summary>\n\n```js\n'use strict';\nconsole.log('-- variable names cannot start with a number --')\n\nlet a1 = 'this works';\n\nlet 1a = 'will throw an error';\n```\n\n</details>\n<details>\n<summary>🥚 variable names can not use any other characters</summary>\n\n```js\n'use strict';\nlet a*a = 'will throw an error';\n```\n\n```js\n'use strict';\nlet a-b-c = 'will throw an error';\n```\n\n```js\n'use strict';\nlet @hyf = 'will throw an error';\n```\n\n```js\n'use strict';\n// spaces count as other characters\nlet hack your future = 'will throw an error';\n```\n\n</details>\n<details>\n<summary>🥚 variable names can not be <strong>reserved words</strong></summary>\n<br>\n\nIn JavaScript there are some words that you cannot use as variable names. These are called\n_Reserved Words_. Some of them are words which carry special meaning in JS like `let` or\n`null`. Other reserved words don't have any special meaning yet, but may in the future.\n\n```js\n'use strict';\nlet var = 'will throw an error';\n```\n\n```js\n'use strict';\nlet null = 'will throw an error';\n```\n\n```js\n'use strict';\nlet function = 'will throw an error';\n```\n\n```js\n'use strict';\nlet public = 'will throw an error';\n```\n\nall the reserved works, in a list:\n\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords)\n- [w3schools](https://www.w3schools.com/js/js_reserved.asp)\n\n</details>\n\n### Good Variable Names\n\nJust because a variable name doesn't throw an error doesn't mean it's a good name.\n\nA good variable name is easy to read and helps you understand what the program does. You\nwill learn more about how to choose good variable names in Debugging. For now take a look\nat these two programs with the same logic. see how good names help, and bad names can be\nconfusing:\n\n<details>\n<summary>🐣 confusing variable names</summary>\n\n```js\n'use strict';\nlet thisThing = 'hello';\nlet thatThing = '';\n\nfor (let oneThing of thisThing) {\n\tthatThing = oneThing + thatThing;\n}\n\nconsole.log(thatThing); // 'olleh'\n```\n\n</details>\n\n<details>\n<summary>🐣 helpful variable names</summary>\n\n```js\n'use strict';\nlet forwards = 'hello';\nlet backwards = '';\n\nfor (let nextLetter of forwards) {\n\tbackwards = nextLetter + backwards;\n}\n\nconsole.log(backwards); // 'olleh'\n```\n\n</details>\n\n### Built-in Variables\n\nSome variables already come with JavaScript, you do not need to declare them to use them.\nThink of `console` - you didn't write that variable but you use it all the time.\n\nThese a not the same as reserved words, you can use declare or reassign them! Declaring\nbuilt-in variables will almost always cause problems in your programs because you\n_over-write_ the value that was stored before. There are some advanced use-cases when this\nis helpful, but you won't learn about those at HYF.\n\nHere are some examples of using built-in variable names in your programs. These are just\nexamples, not suggestions ;)\n\n<details>\n<summary>🐥 assigning to a built-in variable</summary>\n\n```js\n'use strict';\n// this log will work because console has not been reassigned\nconsole.log('-- assigning to console --');\n\nconsole = 'hello';\n\n// see? it's a string!\nalert(console);\n\n// this log will not work, console now stores a string\nconsole.log('will throw an error');\n```\n\n</details>\n<details>\n<summary>🐥 declaring a built-in name</summary>\n\n```js\n'use strict';\nconsole.log('-- declaring a variable named alert 1 --');\n\n// this will not work!\n//  JS treats this like using a variable before it's declaration\nalert('huh?'); // ReferenceError - use before declare\n\nlet alert = 'hello';\n\nconsole.log(alert);\n```\n\n```js\n'use strict';\nconsole.log('-- declaring a variable named alert 2 --');\n\nlet alert = 'hello';\n\nconsole.log(alert);\n\nalert('will throw an error'); // TypeError - not a function\n```\n\n</details>\n\n## References\n\n- [javascript.info](https://javascript.info/variables#variable-naming)\n- [nexTRIE](https://www.youtube.com/watch?v=O5WlRR-lEDE)\n- [launchcode](https://education.launchcode.org/intro-to-web-dev-curriculum/data-and-variables/reading/more-on-variables/index.html#naming-variables)\n"},{"name":"exercise-1.md","type":"file","ext":".md","base":"exercise-1","dir":"3-variables/2-variable-names","path":"/3-variables/2-variable-names/exercise-1.md","lang":".md","content":"# Variable Names: 1\n\nAll of these programs log the same final value. Which two programs have the same\ncomputer instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet first = 'hello';\n\nlet last = 'world';\n\nlet full = 'hello world';\n\nconsole.log(full);\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet first = 'hello';\n\nlet last = 'world';\n\nlet full = first + ' ' + last;\n\nconsole.log(full);\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet x = 'hello';\n\nlet y = 'world';\n\nconsole.log(x + ' ' + y);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet x = 'hello';\n\nlet y = 'world';\n\nlet z = 'hello world';\n\nconsole.log(z);\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**A** and **D**.\n\n</details>\n"},{"name":"exercise-2.md","type":"file","ext":".md","base":"exercise-2","dir":"3-variables/2-variable-names","path":"/3-variables/2-variable-names/exercise-2.md","lang":".md","content":"# Variable Names: 3\n\nAll of these programs log the same final value. Which two programs have the same\ncomputer instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet filler = ' ';\n\nlet sentence = 'A' + filler + 'red' + filler + 'car.';\n\nconsole.log(sentence);\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet filler;\n\nfiller = ' ';\n\nlet sentence = 'A' + filler + 'red' + filler + 'car.';\n\nconsole.log(sentence);\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet space;\n\nspace = ' ';\n\nlet phrase = 'A' + space + 'red' + space + 'car.';\n\nconsole.log(phrase);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet a = ' ';\n\nlet b = 'A' + a + 'red' + ' ' + 'car.';\n\nconsole.log(b);\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**B** and **C**.\n\n</details>\n"},{"name":"exercise-3.md","type":"file","ext":".md","base":"exercise-3","dir":"3-variables/2-variable-names","path":"/3-variables/2-variable-names/exercise-3.md","lang":".md","content":"# Variable Names: 2\n\nWhich two programs have the same instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet filler = ' ';\n\nlet sentence = 'A' + filler + 'butter';\n\nfiller = '';\n\nsentence = sentence + filler + 'fly';\n\nconsole.log(sentence);\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet x = ' ';\n\nlet y = 'A' + x + 'butter';\n\nx = '';\n\ny = x + y + 'fly';\n\nconsole.log(y);\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet java = ' ';\n\nlet script = 'A' + java + 'butter';\n\njava = '';\n\nscript = script + java + 'fly';\n\nconsole.log(script);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet filler = ' ';\n\nlet sentence = 'A' + filler + 'butter';\n\nfiller = ' ';\n\nsentence = sentence + filler + 'fly';\n\nconsole.log(sentence);\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**A** and **C**.\n\n</details>\n"},{"name":"exercise-4.md","type":"file","ext":".md","base":"exercise-4","dir":"3-variables/2-variable-names","path":"/3-variables/2-variable-names/exercise-4.md","lang":".md","content":"# Variable Names: 4\n\nWhich two programs have the same instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet greeting = 'hello';\n\nconsole.log(greeting);\n\nlet name = 'margo';\n\nlet greet = greeting + ' ' + name;\n\nconsole.log(greet + '!');\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet a = 'hello';\n\nconsole.log(a);\n\nlet b = 'margo';\n\na = a + ' ' + b;\n\nconsole.log(a + '!');\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet a = 'hello';\n\nconsole.log(a);\n\nlet b = 'margo';\n\na = a + ' ' + b;\n\nconsole.log(a);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet greeting = 'hello';\n\nconsole.log(greeting);\n\nlet name = 'margo';\n\ngreeting = greeting + ' ' + name;\n\nconsole.log(greeting + '!');\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**B** and **D**.\n\n</details>\n"}]},{"name":"3-common-errors","type":"directory","path":"/3-variables/3-common-errors","children":[{"name":"README.md","type":"file","ext":".md","base":"README","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/README.md","lang":".md","content":"## Variable Error\n\nProgramming languages have strict rules about what you can and cannot do. Here are three\nerrors you will make quite a bit when you start your own explorations, even a spelling\nmistake can cause these errors!\n\nYou may get different error messages depending on which browser you are using, but they\nmean the same thing. In Debugging we will go much deeper into interpreting and correcting\nprogram errors.\n\n## Not Declaring a Variable\n\nUsing a variable that has not been declared will throw an error (when you're in strict\nmode, but that's a story for another day. All the exercises in this repo are run in strict\nmode).\n\n```js\n'use strict';\nconsole.log('-- not declaring 1 --');\n\n// let animal; // uncomment this line to fix the error\nanimal = 'horse'; // ReferenceError\n```\n\n```js\n'use strict';\nconsole.log('-- not declaring 2 --');\n\n// a common mistake is spelling your variables incorrectly\nlet spellingMistake = 'oops!';\nconsole.log(spelingMistake); // ReferenceError\n```\n\n## Using a Variable Before it is Declared\n\n```js\n'use strict';\nconsole.log('-- using before declaration --');\n\n// read the variable - will throw an error!\nconsole.log(favoriteColor); // ReferenceError\n\n// declare and initialize the variable\nlet favoriteColor = 'red';\n\n// read the variable\nconsole.log(favoriteColor);\n```\n\n## Declaring a Variable Twice\n\nDeclaring a variable tells JavaScript to prepare a place in memory with that name. Trying\nto create two spaces in memory with the same name will cause an error.\n\n- Chrome & Chromium-based browsers:\n  `SyntaxError: Identifier '_' has already been declared`\n- Firefox: `SyntaxError: redeclaration of let _`\n\n```js\n'use strict';\n// ! this log never happens !\n//  syntax errors happen before the program runs\n//  so no single line of code will happen\n//  you will learn more about program life cycle in Debugging\nconsole.log('-- declaring twice --');\n\nlet vegetable = 'carrot';\nlet vegetable = 'potato'; // SyntaxError\n// vegetable = 'potato'; // no error\n```\n"},{"name":"assignment-mistake-1.js","type":"file","ext":".js","base":"assignment-mistake-1","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/assignment-mistake-1.js","lang":".js","content":"'use strict';\n\n/*\n  line:\n  name:\n  message:\n*/\n\nlet favoriteNumber = 4;\n3 = favoriteNumber;\n\n\n"},{"name":"assignment-mistake-2.js","type":"file","ext":".js","base":"assignment-mistake-2","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/assignment-mistake-2.js","lang":".js","content":"'use strict';\n\n/*\n  line:\n  name:\n  message:\n*/\n\nlet isHappy = false;\n\ntrue = isHappy;\n\n\n"},{"name":"declaration-mistake-1.js","type":"file","ext":".js","base":"declaration-mistake-1","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/declaration-mistake-1.js","lang":".js","content":"'use strict';\n\n/*\n  line:\n  name:\n  message:\n*/\n\nlet tree = 'oak';\n\nlet tree = 'birch';\n"},{"name":"declaration-mistake-2.js","type":"file","ext":".js","base":"declaration-mistake-2","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/declaration-mistake-2.js","lang":".js","content":"'use strict';\n\n/*\n  line:\n  name:\n  message:\n*/\n\nlet = 'always be learning';\n"},{"name":"declaration-mistake-3.js","type":"file","ext":".js","base":"declaration-mistake-3","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/declaration-mistake-3.js","lang":".js","content":"'use strict';\n\n/*\n  line:\n  name:\n  message:\n*/\n\nwelf = 'ingrad';\n\nconsole.log(welf);\n"},{"name":"name-mistake-1.js","type":"file","ext":".js","base":"name-mistake-1","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/name-mistake-1.js","lang":".js","content":"'use strict';\n\n\n/*\n  line:\n  name:\n  message:\n*/\n\n\nlet 3 = 'three';\n\n\n"},{"name":"name-mistake-2.js","type":"file","ext":".js","base":"name-mistake-2","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/name-mistake-2.js","lang":".js","content":"'use strict';\n\n/*\n  line:\n  name:\n  message:\n*/\n\nlet undefined = 'three';\n"},{"name":"reading-mistake.js","type":"file","ext":".js","base":"reading-mistake","dir":"3-variables/3-common-errors","path":"/3-variables/3-common-errors/reading-mistake.js","lang":".js","content":"'use strict';\n\n/*\n  line:\n  name:\n  message:\n*/\n\nconsole.log(tomatoes);\n\nlet tomatoes = 'fresh';\n"}]},{"name":"4-quiz","type":"directory","path":"/3-variables/4-quiz","children":[{"name":"error-1.md","type":"file","ext":".md","base":"error-1","dir":"3-variables/4-quiz","path":"/3-variables/4-quiz/error-1.md","lang":".md","content":"# Quiz\n\n## Error 1\n\n```js\n'use strict';\n\nlet animal = 'dog'; // line 3\n\nconsole.log(animal); // line 5\n\nlet animal = 'cat'; // line 7\n```\n\n---\n\n<details>\n<summary><strong>1. Which error will be thrown by this code?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. SyntaxError</em></summary>\n<br>\n\n✔ Correct!\n\nDeclaring two variables with the same name is a _SyntaxError_.\n\nThis error is caught in _creation phase_, the program will not even start\nrunning. (you'll learn more about this in Debugging)\n\n</details>\n<details>\n<summary><em>B. ReferenceError</em></summary>\n<br>\n\n✖ Nope.\n\n_ReferenceErrors_ happen when you try to use a variable that was never declared.\n\nThe problem here is that the variable was declared twice.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. On which line will the error occur?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. line 1</em></summary>\n<br>\n\n✖ Nope.\n\nLine 1 is the `\"use strict\";` directive, it changes the way JS interprets your\ncode but it's not a _step_ in your program.\n\nErrors will never occur on the `\"use strict\";` line.\n\n</details>\n<details>\n<summary><em>B. line 3</em></summary>\n<br>\n\n✖ Nope.\n\nThe first time you declared the variable `animal` everything is ok, you can\nalways declare a variable once.\n\n</details>\n<details>\n<summary><em>C. line 5</em></summary>\n<br>\n\n✖ Nope.\n\nThis line is never actually executed!\n\nBecause the _SyntaxError_ occurs **before** the program actually runs (creation\nphase), the value stored in `animal` is never logged.\n\n</details>\n<details>\n<summary><em>D. line 7</em></summary>\n<br>\n\n✔ Correct!\n\nThe error occurs on _line 7_ because this is where `animal` is declared for the\n**second** time.\n\nDeclaring the same variable twice will cause an error. (unless they're in\ndifferent _scopes_, more on this in a few chapters.)\n\n</details>\n\n</details>\n"},{"name":"error-2.md","type":"file","ext":".md","base":"error-2","dir":"3-variables/4-quiz","path":"/3-variables/4-quiz/error-2.md","lang":".md","content":"# Quiz\n\n## Error 2\n\n```js\n'use strict';\n\nanimal = 'dog'; // line 3\n\nconsole.log(animal); // line 5\n\nlet animal = 'cat'; // line 7\n```\n\n---\n\n<details>\n<summary><strong>1. Which error will be thrown by this code?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. SyntaxError</em></summary>\n<br>\n\n✖ Nope.\n\nA _SyntaxError_ occurs with `let` when you try to declare the same variable more\nthan once.\n\nIn this snippet `animal` is only declared once, so that's not the problem.\n\n</details>\n<details>\n<summary><em>B. ReferenceError</em></summary>\n<br>\n\nYup! This is a _ReferenceError_ because you are trying to use the variable\n`animal` _before_ it was declared.\n\nIt is _declared_ on line 7, but it is first _read_ on line 3.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. On which line will the error occur?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. line 1</em></summary>\n<br>\n\n✖ Nope.\n\nLine 1 is the `\"use strict\";` directive, it changes the way JS interprets your\ncode but it's not a _step_ in your program.\n\nErrors will never occur on the `\"use strict\";` line.\n\n</details>\n<details>\n<summary><em>B. line 3</em></summary>\n<br>\n\n✔ Correct!\n\nOn line 3 the `animal` is _read_, but `animal` is _declared_ on line 7. Reading\na variable before it is declared will cause a _ReferenceError_.\n\n</details>\n<details>\n<summary><em>C. line 5</em></summary>\n<br>\n\n✖ Nope.\n\nThe error occurs earlier in the program so the program will never reach line 5.\n\n</details>\n<details>\n<summary><em>D. line 7</em></summary>\n<br>\n\n✖ Nope.\n\nThe error occurs earlier in the program so the program will never reach line 7.\n\nYes, this line does declare the variable `animal`. But that doesn't matter\nbecause `animal` is _read_ on line 3 before it is _declared_ on line 7.\n\n</details>\n\n</details>\n"},{"name":"error-3.md","type":"file","ext":".md","base":"error-3","dir":"3-variables/4-quiz","path":"/3-variables/4-quiz/error-3.md","lang":".md","content":"# Quiz\n\n## Error 3\n\n```js\n'use strict';\n\nanimal = 'dog'; // line 3\n\nconsole.log(animal); // line 5\n\nanimal = 'cat'; // line 7\n```\n\n---\n\n<details>\n<summary><strong>1. Which error will be thrown by this code?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. SyntaxError</em></summary>\n<br>\n\n✖ Nope.\n\nA _SyntaxError_ occurs with `let` when you try to declare the same variable more\nthan once.\n\nIn this snippet `animal` is only declared once, so that's not the problem.\n\n</details>\n<details>\n<summary><em>B. ReferenceError</em></summary>\n<br>\n\nYup! This is a _ReferenceError_ because you are trying to use the variable\n`animal` while it was never declared in the program.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. On which line will the error occur?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. line 1</em></summary>\n<br>\n\n✖ Nope.\n\nLine 1 is the `\"use strict\";` directive, it changes the way JS interprets your\ncode but it's not a _step_ in your program.\n\nErrors will never occur on the `\"use strict\";` line.\n\n</details>\n<details>\n<summary><em>B. line 3</em></summary>\n<br>\n\n✔ Correct!\n\nOn line 3 the `animal` is _assigned_, but `animal` is never _declared_. Reading a\nvariable before it is declared will cause a _ReferenceError_.\n\n</details>\n<details>\n<summary><em>C. line 5</em></summary>\n<br>\n\n✖ Nope.\n\nThe error occurs earlier in the program so the program will never reach line 5.\n\n</details>\n<details>\n<summary><em>D. line 7</em></summary>\n<br>\n\n✖ Nope.\n\nThe error occurs earlier in the program so the program will never reach line 7.\n\n</details>\n\n</details>\n"},{"name":"initial-intermediate-final.md","type":"file","ext":".md","base":"initial-intermediate-final","dir":"3-variables/4-quiz","path":"/3-variables/4-quiz/initial-intermediate-final.md","lang":".md","content":"# Quiz\n\n## Initial, Intermediate and Final Value\n\n```js\n'use strict';\n\nlet animal = 'dog'; // line 3\n\nconsole.log(animal); // line 5\n\nanimal = 'cat'; // line 7\n```\n\n---\n\n<details>\n<summary><strong>1. What is the initial value of the variable?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. \"animal\"</em></summary>\n<br>\n\n✖ Nope.\n\n`\"animal\"` is the _name_ of the variable, not the value stored inside it.\n\nThe only way to have `\"animal\"` initialized in our variable would be like this:\n\n```js\nlet animal = 'animal';\n```\n\n</details>\n<details>\n<summary><em>B. \"dog\"</em></summary>\n<br>\n\nYup! `\"dog\"` is the _initial value_ of our variable.\n\nIt will later be assigned a different value, but it is initialized with `\"dog\"`\n\n</details>\n<details>\n<summary><em>C. \"cat\"</em></summary>\n<br>\n\n✖ Nope.\n\n\"cat\" _is_ assigned to our variable, but _after_ the variable has been declared\nand initialized.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. What will be logged to the console?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. \"animal\"</em></summary>\n<br>\n\n✖ Nope.\n\n`\"animal\"` is the _name_ of the variable, not the value stored inside it.\n\nWhen you log a variable to the console the _value_ will be displayed.\n\n</details>\n<details>\n<summary><em>B. \"dog\"</em></summary>\n<br>\n\n✔ Correct!\n\nThe log statement is _before_ the reassignment, so it will log the first value\nstored in `animal`.\n\n</details>\n<details>\n<summary><em>C. \"cat\"</em></summary>\n<br>\n\n✖ Nope.\n\n\"cat\" is assigned to `animal` _after_ the log statement.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. What is the final value of the variable?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. \"animal\"</em></summary>\n<br>\n\n✖ Nope.\n\n`\"animal\"` is the _name_ of the variable, not the value stored inside it.\n\nthe only way to have `\"animal\"` stored in our variable would be to _assign_ that\nstring value:\n\n```js\nlet animal = 'dog';\n\nanimal = 'animal';\n```\n\n</details>\n<details>\n<summary><em>B. \"dog\"</em></summary>\n<br>\n\n✖ Nope.\n\n`\"dog\"` is the _initial value_ of our variable, but the variable is reassigned\non the last line.\n\n</details>\n<details>\n<summary><em>C. \"cat\"</em></summary>\n<br>\n\n✔ Correct!\n\n\"cat\" is the last value assigned to the variable in this program, so it's final\nvalue will be \"cat\".\n\n</details>\n\n</details>\n"},{"name":"swapping-values.md","type":"file","ext":".md","base":"swapping-values","dir":"3-variables/4-quiz","path":"/3-variables/4-quiz/swapping-values.md","lang":".md","content":"# Quiz\n\n## Swapping Values\n\n```js\n'use strict';\n\n// declare and initialize variables\nlet a = 'y'; // line 4\nlet b = 'x'; // line 5\nlet temp; // line 6\n\n// swap the values stored in `a` and `b`\ntemp = b; // line 9\nb = a; // line 10\na = temp; // line 11\n```\n\n---\n\n<details>\n<summary><strong>1. What is the final value of <code>a</code>?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. undefined</em></summary>\n<br>\n\n✖ Nope.\n\n`a` never stores the value `undefined` in this program.\n\n`a` is _initialized_ to `\"y\"` on line 4, and later _reassigned_ to `\"x\"` on\nline 11.\n\n</details>\n<details>\n<summary><em>B. \"x\"</em></summary>\n<br>\n\n✔ Correct!\n\nOn line 11 `\"x\"` is _assigned_ to `a`.\n\nBecause this is the last time `a` is _assigned_ a value, `\"x\"` is the final\nvalue stored in `a`.\n\n</details>\n<details>\n<summary><em>C. \"y\"</em></summary>\n<br>\n\n✖ Nope.\n\n`\"y\"` is the _initial_ value stored in `a`, but on line 11 `a` is reassigned a\nnew value.\n\nBecause line 11 is the _last time_ `a` is assigned a new value and it is\nassigned `\"x\"`, it's not possible for the final value to be `\"y\"`.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. What is the final value of <code>b</code>?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. undefined</em></summary>\n<br>\n\n✖ Nope.\n\n`b` never stores the value `undefined` in this program.\n\n`b` is _initialized_ to `\"x\"` on line 5, and later _reassigned_ to `\"y\"` on\nline 10.\n\n</details>\n<details>\n<summary><em>B. \"x\"</em></summary>\n<br>\n\n✖ Nope.\n\n`\"x\"` is the _initial_ value stored in `b`, but on line 10 `b` is reassigned a\nnew value.\n\nBecause line 10 is the _last time_ `b` is assigned a new value and it is\nassigned `\"y\"`, it's not possible for the final value to be `\"x\"`.\n\n</details>\n<details>\n<summary><em>C. \"y\"</em></summary>\n<br>\n\n✔ Correct!\n\nOn line 10 `\"y\"` is _assigned_ to `b`.\n\nBecause this is the last time `b` is _assigned_ a value, `\"y\"` is the final\nvalue stored in `b`.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. What is the initial value of <code>temp</code>?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. undefined</em></summary>\n<br>\n\n✔ Correct!\n\nOn line 6 `temp` is _declared_ but not _initialized_, so it's value is\n`undefined` by default.\n\n</details>\n<details>\n<summary><em>B. \"x\"</em></summary>\n<br>\n\n✖ Nope.\n\n`temp` is _declared_ but not _initialized_. This means it's initial value will\nbe `undefined` by default.\n\n</details>\n<details>\n<summary><em>C. \"y\"</em></summary>\n<br>\n\n✖ Nope.\n\n`temp` is _declared_ but not _initialized_. This means it's initial value will\nbe `undefined` by default.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>4. What is the final value of <code>temp</code>?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. undefined</em></summary>\n<br>\n\n✖ Nope.\n\nThe _initial_ value for `temp` is `undefined`, but on line 9 it is assigned the\nvalue `\"x\"`.\n\nBecause this is the last time that `temp` is _reassigned_, `\"x\"` is the final\nvalue.\n\n</details>\n<details>\n<summary><em>B. \"x\"</em></summary>\n<br>\n\n✔ Correct!\n\nOn line 9 `\"x\"` is _assigned_ to `temp`.\n\nBecause this is the last time `temp` is _assigned_ a value, `\"x\"` is the final\nvalue stored in `temp`.\n\n</details>\n<details>\n<summary><em>C. \"y\"</em></summary>\n<br>\n\n✖ Nope.\n\n`temp` never stores the value `\"y\"`. The only two values it stores in this\nprogram are `undefined` and `\"x\"`.\n\n</details>\n\n</details>\n"},{"name":"trace-1.md","type":"file","ext":".md","base":"trace-1","dir":"3-variables/4-quiz","path":"/3-variables/4-quiz/trace-1.md","lang":".md","content":"# Which trace is created by this program?\n\n<table>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = 1;\nlet b = 2;\n\nlet c = a + b;\n```\n\n</td>\n<td>\n\n<details>\n<summary><strong>Trace A</strong></summary>\n\n1. `line 3 - a (declare, let): 1`\n2. `line 4 - b (declare, let): 2`\n3. `line 6 - a (read): 1`\n4. `line 6 - b (read): 2`\n5. `line 6 - operation (_ + _): 1 + 2`\n    - `(evaluates to): 3`\n6. `line 6 - c (declare, let): 3`\n\n<details>\n<summary>check it</summary>\n<br>\n\n✖ Nope.\n\nLook carefully at steps 1 & 2.\n\nWhat is the difference between _declaring_ and _initializing_ a variable?\n\n</details>\n</details>\n\n---\n\n<details>\n<summary><strong>Trace B</strong></summary>\n\n1. `line 3 - a (declare, let)`\n2. `line 3 - a (assign): 1`\n3. `line 4 - b (declare, let)`\n4. `line 4 - b (assign): 2`\n5. `line 6 - a (read): 1`\n6. `line 6 - b (read): 2`\n7. `line 6 - operation (_ + _): 1 + 2`\n    - `(evaluates to): 3`\n8. `line 6 - c (declare, let)`\n9. `line 6 - c (assign): 3`\n\n<details>\n<summary>check it</summary>\n<br>\n\n✖ Nope.\n\nLook carefully at steps 2, 4 and 9.\n\nWhat is the difference between _initializing_ and _assigning_ a variable?\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>Trace C</strong></summary>\n\n1. `line 3 - a (declare, let)`\n2. `line 3 - a (initialize): 1`\n3. `line 4 - b (declare, let)`\n4. `line 4 - b (initialize): 2`\n5. `line 6 - operation (_ + _): 1 + 2`\n    - `(evaluates to): 3`\n6. `line 6 - c (declare, let)`\n7. `line 6 - c (initialize): 3`\n\n<details>\n<summary>check it</summary>\n<br>\n\n✖ Nope.\n\nLook carefully at step 5.\n\nWhat needs to happen before the value stored in a variable can be used?\n\nHow many variables are being used on the right hand side of the initialization\non line 6?\n\n</details>\n</details>\n\n---\n\n<details>\n<summary><strong>Trace D</strong></summary>\n\n1. `line 3 - a (declare, let)`\n2. `line 3 - a (initialize): 1`\n3. `line 4 - b (declare, let)`\n4. `line 4 - b (initialize): 2`\n5. `line 6 - a (read): 1`\n6. `line 6 - b (read): 2`\n7. `line 6 - operation (_ + _): 1 + 2`\n    - `(evaluates to): 3`\n8. `line 6 - c (declare, let)`\n9. `line 6 - c (initialize): 3`\n\n<details>\n<summary>check it</summary>\n<br>\n\n✔ Correct!\n\n</details>\n</details>\n\n</td>\n</tr>\n</table>\n"},{"name":"trace-2.md","type":"file","ext":".md","base":"trace-2","dir":"3-variables/4-quiz","path":"/3-variables/4-quiz/trace-2.md","lang":".md","content":"# Which program will create this trace?\n\n<table>\n<tr>\n<td>\n\n1. `line 3 - a (declare, let)`\n2. `line 3 - a (initialize): 1`\n3. `line 4 - b (declare, let)`\n4. `line 4 - b (initialize): 2`\n5. `line 6 - b (read): 2`\n6. `line 6 - a (read): 1`\n7. `line 6 - operation (_ + _): 2 + 1`\n    - `(evaluates to): 3`\n8. `line 6 - c (declare, let)`\n9. `line 6 - c (initialize): 3`\n\n</td>\n<td>\n\n<details>\n<summary><strong>Program A</strong></summary>\n\n```js\n'use strict';\n\nlet a = 1;\nlet b = 2;\n\nlet c = a + b;\n```\n\n<details>\n<summary>check it</summary>\n<br>\n\n✖ Nope.\n\nLook carefully at steps 5, 6 and 7.\n\nIn which order are variables read when evaluating addition?\n\n</details>\n</details>\n\n---\n\n<details>\n<summary><strong>Program B</strong></summary>\n\n```js\n'use strict';\n\nlet a;\na = 1;\nlet b;\nb = 2;\n\nlet c = a + b;\n```\n\n<details>\n<summary>check it</summary>\n<br>\n\n✖ Nope.\n\nLook carefully at steps 1 to 4.\n\nWhat is the difference between _initializing_ and _assigning_ a variable?\n\n</details>\n</details>\n\n---\n\n<details>\n<summary><strong>Program C</strong></summary>\n\n```js\n'use strict';\n\nlet a = 1;\nlet b = 2;\n\nlet c = b + a;\n```\n\n<details>\n<summary>check it</summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>Program D</strong></summary>\n\n```js\n'use strict';\n\nlet a = 1;\nlet b = 2;\n\nlet c = 3;\n```\n\n<details>\n<summary>check it</summary>\n<br>\n\n✖ Nope.\n\nThe variables in this program are all _initialized_ to the correct values, and\nwill all have the correct _final values_. But this program does not match the\ntrace.\n\nUse a trace table to figure out how this program's trace is different from the\nexample.\n\n</details>\n\n</details>\n\n</td>\n</tr>\n</table>\n\n</td>\n</tr>\n</table>\n"}]},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"3-variables","path":"/3-variables/README.md","lang":".md","content":"# Variables\n\nVariables are a good place to start understanding communication between developers and the\ncomputer. They are one tool a developer has to make a program easier to read, and they are\none way can you instruct computers to read & write program memory.\n\nYou can think of variables [like boxes](https://www.youtube.com/watch?v=Jvrszgiexg0) used\nto store data in your programs. (_That video uses `var` but these programs use `let`. For\nnow you can think of them as the same thing._)\n\nStudy the JavaScript files in this folder to see the 4 main things you can do with a\nvariable:\n\n- **Declaring**\n- **Declaring and Initializing**\n- **Assigning**\n- **Reading**\n\n## Variables Syntax\n\n[![variable: declare, initialize](../assets/variable-declare-initialize.jpg)](https://blog.jordanholt.dev/learn-javascript-variables/)\n\n```js\n/*\n  let           -> declaration\n  iAm           -> variable name\n  =             -> assignment operator (initialization)\n  'a variable'  -> the initial value\n*/\nlet iAm = 'a variable';\nconsole.log(iAm);\n\n/*\n  iAm           -> variable name\n  =             -> assignment operator\n  'a variable'  -> the new value\n*/\niAm = 'hungry';\nconsole.log(iAm);\n```\n\n<details>\n<summary>🥚 declare, initialize, assign</summary>\n\n```js\n// declare the variable using let\n// initialize the value: \"Hello!\"\nlet message = 'Hello!';\n\n// assign a new value: \"World!\"\nmessage = 'World!';\n\n// read the stored value: \"World!\"\nconsole.log(message);\n```\n\n```js\n'use strict';\n\n// declare the variable using let\n// initialize the value: '.'\nlet dot = '.';\n\n// read the stored value: '.'\n// read the stored value: '.'\n// assign a new value: '..'\ndot = dot + dot;\n\n// read the stored value: '..'\nconsole.log(dot); // '..'\n```\n\n```js\n'use strict';\nconsole.log('-- declare, initialize, assign --');\n\n// declare a value and initialize it's value\nlet favoriteTree = 'palm';\nconsole.log(favoriteTree); // 'palm'\n\n// assigning a different value\nfavoriteTree = 'oak';\nconsole.log(favoriteTree); // 'oak'\n\n// declare variable with an initial value\nlet bread = 'fresh';\nconsole.log(bread); // 'fresh'\n\n// re-assign the variable\nbread = 'stale';\nconsole.log(bread); // 'stale'\n```\n\n</details>\n<details>\n<summary>🥚 uninitialized variables</summary>\n\n```js\n'use strict';\nconsole.log('-- uninitialized variables --');\n\n// declaring a variable without an initial value\n//  it will be initialized to undefined by default\nlet uninitialized;\nconsole.log(uninitialized); // undefined\n\n// you can assign values to uninitialized variables\nuninitialized = 'something';\nconsole.log(uninitialized); // 'something'\n\n// initializing a variable to undefined does the same thing\nlet initialized = undefined;\nconsole.log(initialized); // undefined\n```\n\n</details>\n\n> PS. In this module you will only learn about `let`. You will cover `const` and `var` in\n> later modules.\n\n---\n\n## References\n\n- [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/chapters/data-and-variables/variables.html)\n- [javascript.info](https://javascript.info/variables)\n- [programiz](https://www.programiz.com/javascript/variables-constants)\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n- [HYF](https://hackyourfuture.github.io/study/#/javascript/variables)\n"}]},{"name":"4-prompt-alert-confirm","type":"directory","path":"/4-prompt-alert-confirm","children":[{"name":"1-alert.js","type":"file","ext":".js","base":"1-alert","dir":"4-prompt-alert-confirm","path":"/4-prompt-alert-confirm/1-alert.js","lang":".js","content":"'use strict';\n\n// you can't do anything with `alert` except display a message\nalert('not much here, just a pop-up');\n"},{"name":"2-confirm.js","type":"file","ext":".js","base":"2-confirm","dir":"4-prompt-alert-confirm","path":"/4-prompt-alert-confirm/2-confirm.js","lang":".js","content":"'use strict';\n\n/*\n  input the correct values to log the expected values\n*/\n\nlet confirm1 = confirm('1. agree to this one');\nconsole.log(confirm1 === true); // true\n\nlet confirm2 = confirm('2. do not agree to this one');\nconsole.log(confirm2 === false); // true\n"},{"name":"3-prompt.js","type":"file","ext":".js","base":"3-prompt","dir":"4-prompt-alert-confirm","path":"/4-prompt-alert-confirm/3-prompt.js","lang":".js","content":"'use strict';\n\n/*\n  input the correct values to log the expected values\n*/\n\nlet input1 = prompt('1. cancel this prompt');\nconsole.log(input1 === null); // true\n\nlet input2 = prompt('2. click \"ok\" without typing anything');\nconsole.log(input2 === ''); // true\n\nlet input3 = prompt('3. enter \"hello\"');\nconsole.log(input3 === 'hello'); // true\n\nlet input4 = prompt('4. enter your name');\nconsole.log(input4); // ?\n"},{"name":"4-quiz.md","type":"file","ext":".md","base":"4-quiz","dir":"4-prompt-alert-confirm","path":"/4-prompt-alert-confirm/4-quiz.md","lang":".md","content":"# Quiz\n\n## Prompt\n\n```js\n'use strict';\n\nlet userInput = prompt(\"enter something, or don't\");\n\nconsole.log(typeof userInput); // log 1\nconsole.log(userInput); // log 2\n```\n\n---\n\n<details>\n<summary><strong>1. What is logged if the user cancels?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. <code>\"string\"</code>, <code>\"cancel\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nA string is only returned by `prompt` when the user clicks \"ok\".\n\n\"cancel\" may be written on the button, but that is now what the user is inputting.\n\n</details>\n\n<details>\n<summary><em>B. <code>\"string\"</code>, <code>\"\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nA string is only returned by `prompt` when the user clicks \"ok\".\n\nEven if the text field is empty, canceling does not submit a string. To submit an empty\nstring the user must click \"ok\" with an empty input field.\n\n</details>\n<details>\n<summary><em>C. <code>\"undefined\"</code>, <code>undefined</code></em></summary>\n<br>\n\n✖ Nope.\n\n`prompt` will never return `undefined`, only a string or `null`.\n\n`alert` does return `undefined`.\n\n</details>\n<details>\n<summary><em>D. <code>\"object\"</code>, <code>null</code></em></summary>\n<br>\n\n✔ Correct!\n\nCanceling a `prompt` returns `null`, and the type of is `\"object\"`.\n\n</details>\n<details>\n<summary><em>E. <code>\"null\"</code>, <code>null</code></em></summary>\n<br>\n\n✖ Nope.\n\nbut close! Canceling a `prompt` _does_ return `null`, but the type of `null` _is not_\n`\"null\"`. It is `\"object\"`.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. What is logged if the user types <code>\"hello\"</code> and clicks \"ok\"?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. <code>\"string\"</code>, <code>\"ok\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nThe type will be `\"string\"`, but the value will be `\"hello\"`\n\n\"ok\" is the name of the button, but `prompt` returns the value typed in the input field.\n\n</details>\n<details>\n<summary><em>B. <code>\"string\"</code>, <code>\"hello\"</code></em></summary>\n<br>\n\n✔ Correct!\n\nThe return type for `prompt` is always `\"string\"` when the user clicks \"ok\".\n\nBecause they had typed `\"hello\"` in the field, that will be the return value.\n\n</details>\n<details>\n<summary><em>C. <code>\"undefined\"</code>, <code>undefined</code></em></summary>\n<br>\n\n✖ Nope.\n\n`prompt` will never return `undefined`, only a string or `null`.\n\n`alert` does return `undefined`.\n\n</details>\n<details>\n<summary><em>D. <code>\"object\"</code>, <code>null</code></em></summary>\n<br>\n\n✖ Nope.\n\nCanceling a `prompt` returns `null`, and the type of is `\"object\"`.\n\nBut the user clicked \"ok\" so this is not the right answer.\n\n</details>\n<details>\n<summary><em>E. <code>\"null\"</code>, <code>null</code></em></summary>\n<br>\n\n✖ Nope.\n\nThe user clicked \"ok\" not \"cancel\". So the return value will be a string.\n\nAnd even if the user did cancel, this would be wrong. Canceling a `prompt` _does_ return\n`null`, but the type of `null` _is not_ `\"null\"`. It is `\"object\"`.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. What must a user do to log <code>\"string\"</code>, <code>\"\"</code>?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. type <code>\"string\"</code> and click \"cancel\"</em></summary>\n<br>\n\n✖ Nope.\n\nCanceling will always return `null`, no matter what text the user typed in the input.\n\n</details>\n<details>\n<summary><em>B. type nothing and click \"cancel\"</em></summary>\n<br>\n\n✖ Nope.\n\nCanceling will always log `null`, no matter what text the user typed in the input.\n\n</details>\n<details>\n<summary><em>C. type nothing and click \"ok\"</em></summary>\n<br>\n\n✔ Correct!\n\nTyping nothing and clicking \"ok\" will return an _empty string_, a value with the type\n`\"string\"` but no characters inside of it.\n\n</details>\n<details>\n<summary><em>D. type <code>\"string\"</code> and click \"ok\"</em></summary>\n<br>\n\n✖ Nope.\n\nTyping `\"string\"` and clicking ok will log `\"string\"` twice! Once because the input has\nthe type \"string\", and a second type because the input _is_ `\"string\"`!\n\nThis may seem strange at first, but with practice it will make sense.\n\n</details>\n\n</details>\n"},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"4-prompt-alert-confirm","path":"/4-prompt-alert-confirm/README.md","lang":".md","content":"# User Interactions\n\nLogging is for developers, Interactions are for Users. JavaScript in the browser\nhas 3 ways to do basic user interactions. They don't create the best user\nexperience but they are practical for learning to program.\n\nLearning to use these 3 functions will help you to understand primitive types\nand values. Each interaction is a _function_ (you'll learn more about functions\nin Debugging). Functions _return_ a value, meaning that you can use them to\nassign a value to a variable. But each interaction returns a _different_ type.\n\nAdding interactions into your programs will make them more interesting to study.\nYou can't know exactly what values a user will input, so your programs have to\ndeal with some uncertainty!\n\nTrace this example and see each type of interaction in action:\n\n```js\n'use strict';\nconsole.log('-- user interactions --');\n\nlet alertValue = alert('this is an alert');\nconsole.log(alertValue); // undefined\n\nlet confirmValue = confirm('this is a confirm');\nconsole.log(confirmValue); // true or false\n\nlet promptValue = prompt('this is a prompt');\nconsole.log(promptValue); // a string or null\n```\n\n<details>\n<summary>🥚 alert</summary>\n\n```js\n'use strict';\nconsole.log('-- alert --');\n// alert: displays a message to the user\n//  the user can only read the message, they can't input anything to your program\nlet alerted = alert('pancakes');\n\n// alert will always return undefined, no matter what\nconsole.log(alerted); // undefined\nconsole.log(typeof alerted); // 'undefined'\n```\n\n</details>\n<details>\n<summary>🥚 confirm</summary>\n\n```js\n'use strict';\nconsole.log('-- confirm --');\n// confirm: display a message and ask the user to say \"yes\" or \"no\"\n\n// run this example a few times with your console open. what happens if you:\n//  click \"ok\"?\n//  click \"cancel\"?\n//  press the \"enter\" key on your keyboard?\n//  pres the \"esc\" key on your keyboard?\nlet confirmed = confirm('want some pancakes?');\n\n// confirm will always return a boolean value:\n//  true if the user clicks ok\n//  false if the user clicks cancel\nconsole.log(confirmed); // true or false\nconsole.log(typeof confirmed); // 'boolean'\n```\n\n</details>\n<details>\n<summary>🥚 prompt</summary>\n\n```js\n'use strict';\nconsole.log('-- prompt --');\n\n// prompt: display a message and allow the user to input some text\n\n// run this example a few times in the console. what happens if you:\n//  type something -> click \"cancel\" or press the \"esc\" key\n//  type something -> click \"ok\" or press the \"enter\" key\n//  do not type anything -> click \"cancel\" or press the \"esc\" key\n//  do not type anything -> click \"ok\" or press the \"enter\" key\nlet prompted = prompt('what is your favorite kind of pancake');\n\n// prompt will either return a string or null\n//  null: if the user clicks \"cancel\" or presses the \"esc\" key\n//  string: if the user clicks \"ok\" or uses the \"enter\" key\n//    it doesn't matter if the user types anything or not!\n//    if they type nothing, prompt returns an empty string\nconsole.log(prompted); // the user's text or null\nconsole.log(typeof prompted); // 'string' or 'object'\n```\n\n</details>\n\n---\n\n## Tracing User Interactions\n\nTracing code with user interactions is more challenging than tracing code with\nno interactions. In programs with user interactions it's impossible to know what\nvalues will be in your program until you run it!\n\nThis means you must think about all the different things a user could do. To\nfully understand an interactive program you will need to trace it many times,\neach time with different imagined values from the user.\n\n---\n\n## A Small Program\n\nHere's a small program that uses `prompt`, `alert` and `confirm`. You'll learn\nhow it all works in the coming chapters.\n\n<details>\n<summary>check it out</summary>\n\n```js\n'use strict';\nconsole.log('-- user interactions --');\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\nlet didConfirm = confirm('is this correct?\\n\\n \"' + input + '\"');\nif (didConfirm) {\n\talert('yes!');\n} else {\n\talert('no :(');\n}\n```\n\n</details>\n"}]},{"name":"5-block-scope","type":"directory","path":"/5-block-scope","children":[{"name":"1-examples","type":"directory","path":"/5-block-scope/1-examples","children":[{"name":"1-inner-outer.js","type":"file","ext":".js","base":"1-inner-outer","dir":"5-block-scope/1-examples","path":"/5-block-scope/1-examples/1-inner-outer.js","lang":".js","content":"'use strict';\n\nlet greeting = 'hello';\n\n{\n\tlet newGreeting = 'bye';\n\tgreeting = newGreeting;\n}\n\nconsole.log(greeting === 'bye');\n"},{"name":"2-shadow.js","type":"file","ext":".js","base":"2-shadow","dir":"5-block-scope/1-examples","path":"/5-block-scope/1-examples/2-shadow.js","lang":".js","content":"'use strict';\n\nlet greeting = 'hello';\n\n{\n\tlet greeting = 'hello';\n\tgreeting = 'bye';\n\tconsole.log(greeting);\n}\n\nconsole.log(greeting === 'hello'); // true\n"},{"name":"3-phrase.js","type":"file","ext":".js","base":"3-phrase","dir":"5-block-scope/1-examples","path":"/5-block-scope/1-examples/3-phrase.js","lang":".js","content":"'use strict';\n\nlet phrase = '';\n\n{\n\tlet word = 'hello';\n\tphrase = phrase + word;\n}\n\n{\n\tlet word = 'world';\n\tphrase = phrase + ' ' + word;\n}\n\nconsole.log(phrase === 'hello world'); // true\n"}]},{"name":"2-quiz","type":"directory","path":"/5-block-scope/2-quiz","children":[{"name":"error-1.md","type":"file","ext":".md","base":"error-1","dir":"5-block-scope/2-quiz","path":"/5-block-scope/2-quiz/error-1.md","lang":".md","content":"# Quiz\n\n## Error 1\n\n```js\n'use strict';\n\n{\n\tlet animal = 'dog'; // line 4\n\tconsole.log(animal); // line 5\n}\n\nconsole.log(animal); // line 8\n```\n\n---\n\n<details>\n<summary><strong>1. Which error will be thrown by this code?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. SyntaxError</em></summary>\n<br>\n\n✖ Nope.\n\nThere are not two variables declared with the same name, so there is no syntax\nerror.\n\n</details>\n<details>\n<summary><em>B. ReferenceError</em></summary>\n<br>\n\n✔ Correct!\n\n_ReferenceErrors_ happen when you try to use a variable that was never declared.\n\nThe `animal` variable was declared in this program, but it was declared _inside_\nthe block so it is not available outside the block. When you try to use it\n_outside_ of the block on line 8, this will throw an error.\n\n</details>\n<details>\n<summary><em>C. Trick question, there is no error!</em></summary>\n<br>\n\nNot so easy ;) There is an error in this program.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. On which line will the error occur?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. line 4</em></summary>\n<br>\n\nNope, line 4 is ok. This is where the `animal` variable is declared _inside_ the\nblock.\n\n</details>\n<details>\n<summary><em>B. line 5</em></summary>\n<br>\n\nNope, line 5 is ok. The `animal` variable is read _inside_ the block where it\nwas declared. That is allowed!\n\n</details>\n<details>\n<summary><em>C. line 8</em></summary>\n<br>\n\n✔ Correct!\n\nThe `animal` variable was declared in this program, but it was declared _inside_\nthe block so it is not available outside the block. When you try to use it\n_outside_ of the block on line 8, this will throw an error.\n\n</details>\n\n</details>\n"},{"name":"error-2.md","type":"file","ext":".md","base":"error-2","dir":"5-block-scope/2-quiz","path":"/5-block-scope/2-quiz/error-2.md","lang":".md","content":"# Quiz\n\n## Error 2\n\n```js\n'use strict';\n\n{\n\tlet animal = 'dog'; // line 4\n\tconsole.log(animal); // line 5\n}\n\nanimal = 'cat'; // line 8\nconsole.log(animal); // line 9\n```\n\n---\n\n<details>\n<summary><strong>1. Which error will be thrown by this code?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. SyntaxError</em></summary>\n<br>\n\n✖ Nope.\n\nThere is only one variable declared in this program, so no risk of declaring the\nsame one twice.\n\n</details>\n<details>\n<summary><em>B. ReferenceError</em></summary>\n<br>\n\n✔ Correct!\n\nThe `animal` variable is declared in the _inner scope_ (line 4), it is not\navailable _outside_ of this scope.\n\nTrying to assign the variable on line 8 will cause a `ReferenceError` because\nthe variable was only declared _inside_ the scope.\n\n</details>\n<details>\n<summary><em>C. Trick question, there is no error!</em></summary>\n<br>\n\nNot so easy ;) There is an error in this program.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. On which line will the error occur?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. line 4</em></summary>\n<br>\n\n✖ Nope.\n\nThere is nothing wrong with this line, it's ok to declare a new variable inside\na block scope.\n\n</details>\n<details>\n<summary><em>B. line 5</em></summary>\n<br>\n\n✖ Nope.\n\nThere is nothing wrong here, it's ok to read a variable that was declared in the\nsame scope.\n\n</details>\n<details>\n<summary><em>C. line 8</em></summary>\n<br>\n\n✔ Correct!\n\n8 will throw a `ReferenceError` when it tries to assign a new value to `animal`\nbecause the variable has never been declared in the _outer scope_.\n\n`animal` is available in the _inner scope_ because that is where it was\ndeclared, but variables declared in an inner scope are not available in an\n_outer scope_.\n\n</details>\n<details>\n<summary><em>D. line 9</em></summary>\n<br>\n\n✖ Nope.\n\nThis line will never be executed! The error occurred on line 8 so the program\nstops on line 8.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. What will be logged to the console?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. <code>\"dog\"</code> then <code>ReferenceError</code></em></summary>\n<br>\n\n✔ Correct!\n\nOn line 5 `\"dog\"` will be logged to the console, and on line 8 there will be a\n`ReferenceError`.\n\nThe second log (line 9) will never be executed because the error happens earlier\nin the program.\n\n</details>\n<details>\n<summary><em>B. <code>\"cat\"</code> then <code>ReferenceError</code></em></summary>\n<br>\n\n✖ Nope.\n\nThis program will never log `\"cat\"`. The variable `animal` was initialized to\n`\"dog\"` and it's block scope is closed without assigning a different value.\n\n</details>\n<details>\n<summary><em>C.  <code>\"dog\"</code> then <code>SyntaxError</code></em></summary>\n<br>\n\n✖ Nope.\n\nThis program will log `\"dog\"`, but the error is not the correct.\n\n</details>\n\n</details>\n"},{"name":"error-3.md","type":"file","ext":".md","base":"error-3","dir":"5-block-scope/2-quiz","path":"/5-block-scope/2-quiz/error-3.md","lang":".md","content":"# Quiz\n\n## Error 3\n\n```js\n'use strict';\n\nlet animal = 'cat'; // line 3\n\n{\n\tlet animal = 'dog'; // line 6\n\tconsole.log(animal); // line 7\n}\n\nconsole.log(animal); // line 10\n```\n\n---\n\n<details>\n<summary><strong>1. Which error will be thrown by this code?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. SyntaxError</em></summary>\n<br>\n\n✖ Nope.\n\nThere _are_ two variables declared with the same name, but they are declared in\n_different_ scopes so there is no error.\n\n</details>\n<details>\n<summary><em>B. ReferenceError</em></summary>\n<br>\n\n✖ Nope.\n\nThe `animal` variable declared in the _outer scope_ (line 3) is still available\n_after_ the block scope has closed on line 10. So no error!\n\n</details>\n<details>\n<summary><em>C. Trick question, there is no error!</em></summary>\n<br>\n\n✔ Correct!\n\nThere is no error in this program. The `animal` variable declared on line 3 is\nstill available on line 10 _after_ the block scope has closed.\n\nIt is allowed to declare variables with the same name in different scopes, this\nis called _shadowing_. JavaScript won't throw an error but it does makes your\ncode harder to understand so try to avoid it.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. On which line will the error occur?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. line 3</em></summary>\n<br>\n\n✖ Nope.\n\nThe variable declaration on line 3 does have the same name as the variable\ndeclared on line 6, but they are both declared in _different scopes_.\n\nIt is possible to declare variables with the same name in different scopes.\n\n</details>\n<details>\n<summary><em>B. line 6</em></summary>\n<br>\n\n✖ Nope.\n\nYou may think this is an error because another variable named `animal` has been\ndeclared, but it's not an error!\n\nBecause both variables are declared in _different scopes_ there is no error on\nline 6.\n\n</details>\n<details>\n<summary><em>C. line 10</em></summary>\n<br>\n\n✖ Nope.\n\nLine 10 is ok because the variable declared in the _outer scope_ on line 3 is\nstill available _after_ the inner scope has closed.\n\nSo line 10 is logging the variable declared on line 3, not on line 6!\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. What will be logged to the console?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. <code>\"dog\"</code> then <code>\"dog\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nThe log on line 7 will print `\"dog\"`, but the log on line 10 will not.\n\nBy the time the program reaches line 10 the inner scope will be closed and the\nvariable storing `\"dog\"` no longer exists. Line 10 will log the value stored in\nthe _outer scope_ variable declared on line 3.\n\n</details>\n<details>\n<summary><em>B.  <code>\"cat\"</code> then <code>\"dog\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nNeither of these logs are correct.\n\nThe first log on line 7 will not be `\"cat\"` because it is _inside_ the block\nscope. It will log the value stored by the _inner_ `animal` variable.\n\nThe second log on line 10 will not be `\"dog\"` because it is _outside_ the block\nscope. It will log the value stored by the _outer_ `animal` variable.\n\n</details>\n<details>\n<summary><em>C.  <code>\"dog\"</code> then <code>\"cat\"</code></em></summary>\n<br>\n\n✔ Correct!\n\nThe first log on line 7 is _inside_ the block scope so it will log the _inner_\n`animal` variable. Since line 6 initializes `animal` with the value `\"dog\"`, we\nwill see `\"dog\"` logged on line 7.\n\nThe second log on line 10 is _outside_ the block scope so it will log the\n_outer_ `animal` variable. Since line 3 initializes `animal` with the value\n`\"cag\"`, we will see `\"cat\"` logged on line 10.\n\n</details>\n<details>\n<summary><em>D.  <code>\"cat\"</code> then <code>\"cat\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nThe log on line 10 will print `\"cat\"`, but the log on line 7 will not.\n\nLine 7 is _inside_ the block scope so it will read the variable declared on line\n6, this _is not_ the same variable that was declared on line 3 in the _outer\nscope_. Line 7 will log the value stored by the variable declared on line 6.\n\n</details>\n\n</details>\n"},{"name":"predicting-logs.md","type":"file","ext":".md","base":"predicting-logs","dir":"5-block-scope/2-quiz","path":"/5-block-scope/2-quiz/predicting-logs.md","lang":".md","content":"# Quiz\n\n## Predicting Logs\n\n```js\n'use strict';\n\nlet animal = 'cat'; // line 3\nconsole.log(animal); // line 4\n\n{\n\tanimal = 'dog'; // line 7\n\tconsole.log(animal); // line 8\n}\n\nconsole.log(animal); // line 11\n```\n\n---\n\n<details>\n<summary><strong>1. What will this program log to the console?</strong></summary>\n<br>\n\n<details>\n<summary><em>A.  <code>\"cat\"</code> then <code>\"dog\"</code> then <code>undefined</code></em></summary>\n<br>\n\n✖ Nope.\n\n`undefined` will never be logged in this program. There is only one variable\nnamed `animal`, and it always has a value.\n\nIt was initialized to `\"cat\"` and is later reassigned to `\"dog\"`.\n\n</details>\n<details>\n<summary><em>B.  <code>\"cat\"</code> then <code>\"dog\"</code> then <code>\"cat\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nThe variable `animal` is declared in the outer scope and _reassigned_ in the\ninner scope. A new variable was not declared inside the scope. It's the same\nvariable inside and outside!\n\nModifying an _outer scope_ variable from an _inner scope_ is the same as\nmodifying it outside, so the new value will still be stored for the final log.\n\n</details>\n<details>\n<summary><em>C.  <code>\"cat\"</code> then <code>\"dog\"</code> then <code>\"dog\"</code></em></summary>\n<br>\n\n✔ Correct!\n\nThe assignment on line 7 is inside a block scope, but is accessing a variable\ndeclared in the outer scope. This means that the new value will still be\navailable after the scope has closed.\n\nLine 8 and line 11 will both log `\"dog\"` because a new value was never assigned\nbetween those lines.\n\n</details>\n\n</details>\n"}]},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"5-block-scope","path":"/5-block-scope/README.md","lang":".md","content":"# Block Scope\n\nCurly braces create a new _block scope_. There are lots of great explanations of\nblock scope out there, but let's see if you can come up with your own after\nstudying these examples.\n\n```js\n'use strict';\nconsole.log('-- block scope --');\n\n{\n\tlet innerVariable = 'not available outside the curly braces';\n}\n\ninnerVariable; // ReferenceError\n```\n\n<details>\n<summary>🥚 inner and outer scope</summary>\n\n```js\n'use strict';\nconsole.log('-- block scope: inner and outer scope --');\n\nlet outerVariable = 'declared outside';\nconsole.log(outerVariable); // 'declared outside'\n\n// begin a new block scope\n{\n\t// variables declared outside of curly are available inside the curly braces\n\touterVariable = 'assigned inside';\n\tconsole.log(outerVariable); // 'assigned inside'\n\n\tlet innerVariable = 'declared inside';\n\tconsole.log(innerVariable); // 'declared inside'\n}\n\n// changes made inside the scope stay when you leave the scope\nconsole.log(outerVariable); // 'assigned inside'\n```\n\n</details>\n<details>\n<summary>🥚 shadowing</summary>\n\n```js\n'use strict';\nconsole.log('-- block scope: shadowing --');\n\n// shadowing is when you declare a variable inside a scope\n//  that has the same name as a variable in the outer scope\n\n// you should avoid variable shadowing\n//  it makes your code harder to understand\n\nlet favoriteTree = 'palm';\nconsole.log(favoriteTree); // 'palm'\n{\n\t// the outer variable is \"replaced\" inside by the new variable\n\t// it's no longer possible to modify the outer variable from the inner scope\n\tlet favoriteTree = 'date'; // no error!\n\tconsole.log(favoriteTree); // 'date'\n\n\tfavoriteTree = 'cedar';\n\tconsole.log(favoriteTree); // 'cedar'\n}\nconsole.log(favoriteTree); // 'palm'\n```\n\n</details>\n\n---\n\n## Block Scope Errors\n\nScopes are useful for making your programs easy to read, understand and debug,\nbut now you can make some mistakes that weren't possible before:\n\n<details>\n<summary>🥚 declaring in a scope, using out of scope</summary>\n\n```js\n'use strict';\nconsole.log('-- declaring in a scope, using out of scope --');\n\n// begin a new block scope\n{\n\tlet innerVariable = 'declared inside';\n\tconsole.log(innerVariable); // 'declared inside'\n}\n\n// variables declared in the inner scope are NOT available outside the scope\nconsole.log(innerVariable); // ReferenceError\n```\n\n## </details>\n\n## Nested Scopes\n\nYou can create scopes inside of scopes. This is common in control flow, for\nexample when you nest conditionals inside loops (more on this in the coming\nchapters).\n\n<details>\n<summary>🥚 nested scopes</summary>\n\n```js\n'use strict';\n// hint: try the 'variables' button\nconsole.log('-- nested scopes --');\n\nlet outer = 'a';\n{\n\tlet inner = '-';\n\t{\n\t\tlet innerInner = 'b';\n\t\touter = outer + inner + innerInner;\n\t}\n\t{\n\t\tlet innerInner = 'c';\n\t\touter = outer + inner + innerInner;\n\t}\n\touter = inner + outer + inner;\n}\nconsole.log(outer); // '-a-b-c-'\n```\n\n</details>\n\n---\n\n## Tracing Blocks\n\nWhen you trace code with block scopes you need to pay extra attention to when a\nscope begins and when a scope ends.\n\nThe _steps_ trace table has an option for \"enter scope\" and \"leave scope\", you\ncan use these without a name to to show that when a new scope has opened or\nclosed. Any variable that was declared inside the block is _scoped_ to that\nblock.\n"}]},{"name":"6-conditionals","type":"directory","path":"/6-conditionals","children":[{"name":"1-isolate","type":"directory","path":"/6-conditionals/1-isolate","children":[{"name":"1-long-enough.js","type":"file","ext":".js","base":"1-long-enough","dir":"6-conditionals/1-isolate","path":"/6-conditionals/1-isolate/1-long-enough.js","lang":".js","content":"'use strict';\n\nlet word = 'a';\n// let word = 'be';\n// let word = 'sea';\n// let word = 'frog';\n// let word = 'apple';\n// let word = 'banana';\n\nlet message;\nif (word.length <= 2) {\n\tmessage = 'a short word';\n} else if (word.length < 3) {\n\t// why is this path unreachable?\n\tmessage = 'unreachable path!';\n} else if (word.length < 5) {\n\tmessage = 'a perfect word';\n} else {\n\tmessage = 'a long word';\n}\n\nconsole.log(message);\n"},{"name":"2-weather-clothing.js","type":"file","ext":".js","base":"2-weather-clothing","dir":"6-conditionals/1-isolate","path":"/6-conditionals/1-isolate/2-weather-clothing.js","lang":".js","content":"'use strict';\n\n/*\n\n  Trace the following code by commenting and uncommenting the different values for the 'weather' variable.\n  See what happens every time and different value is used\n  and identify the exact line that is being executed\n\n*/\n\nlet weather = 'spring';\n// let weather = \"summer\";\n// let weather = \"winter\";\n// let weather = \"fall\";\n// let weather = \"holidays\";\n\nlet clothingChoice = '';\n\nif (weather === 'spring') {\n\tclothingChoice = 'Put on rain boots.';\n} else if (weather === 'summer') {\n\tclothingChoice = 'Make sure to take your sunscreen.';\n} else if (weather === 'fall') {\n\tclothingChoice = 'Wear a light jacket.';\n} else if (weather === 'winter') {\n\tclothingChoice = 'Wear a heavy coat.';\n} else {\n\tclothingChoice = 'Invalid weather type.';\n}\n\nconsole.log(clothingChoice);\n\n// Taken from: https://www.codecademy.com/courses/introduction-to-javascript/quizzes/learn-javascript-control-flow-control-flow-quiz\n"},{"name":"3-eary-words.js","type":"file","ext":".js","base":"3-eary-words","dir":"6-conditionals/1-isolate","path":"/6-conditionals/1-isolate/3-eary-words.js","lang":".js","content":"'use strict';\n\nlet word = '';\n// let word = 'a';\n// let word = 'be';\n// let word = 'eat';\n// let word = 'ear';\n// let word = 'peat';\n// let word = 'bear';\n// let word = 'early';\n// let word = 'burly';\n// let word = 'pearly';\n// let word = 'poultry';\n\nlet message;\nif (word.length >= 3) {\n\tif (word.includes('ear')) {\n\t\tmessage = 'eary word!';\n\t} else {\n\t\tmessage = 'not eary :(';\n\t}\n} else {\n\tmessage = 'word is too short';\n}\n\nconsole.log(message);\n"}]},{"name":"2-integrate","type":"directory","path":"/6-conditionals/2-integrate","children":[{"name":"1-cake.js","type":"file","ext":".js","base":"1-cake","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/1-cake.js","lang":".js","content":"'use strict';\n\nlet likesCake = confirm('do you like cake?');\n\nlet message = '';\nif (likesCake === true) {\n\tmessage = 'me too!';\n} else {\n\tmessage = 'me neither!';\n}\n\nalert(message);\n"},{"name":"1-do-not-cancel.js","type":"file","ext":".js","base":"1-do-not-cancel","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/1-do-not-cancel.js","lang":".js","content":"'use strict';\n\nlet input = prompt('please do not cancel');\n\nlet message = '';\nif (input === null) {\n\tmessage = 'you canceled :(';\n} else {\n\tmessage = 'thank you for your input: ' + input;\n}\n\nalert(message);\n"},{"name":"1-please-enter-yes.js","type":"file","ext":".js","base":"1-please-enter-yes","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/1-please-enter-yes.js","lang":".js","content":"'use strict';\n\nlet input = prompt('please enter \"yes\"');\n\nlet output = '';\nif (input.toLowerCase() === 'yes') {\n\toutput = 'you entered \"yes\"';\n} else {\n\toutput = '\"' + input + '\" is not \"yes\"';\n}\n\nalert(output);\n"},{"name":"1-yes-or-no-1.js","type":"file","ext":".js","base":"1-yes-or-no-1","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/1-yes-or-no-1.js","lang":".js","content":"'use strict';\n\nlet didConfirm = confirm('yes?');\n\nlet message;\nif (didConfirm) {\n\tmessage = 'ok';\n} else {\n\tmessage = 'no';\n}\n\nalert(message);\n"},{"name":"1-yes-or-no-2.js","type":"file","ext":".js","base":"1-yes-or-no-2","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/1-yes-or-no-2.js","lang":".js","content":"'use strict';\n\nlet didConfirm = confirm('yes?');\n\nlet message;\nif (didConfirm === false) {\n\tmessage = 'no';\n} else {\n\tmessage = 'ok';\n}\n\nalert(message);\n"},{"name":"2-input-something.js","type":"file","ext":".js","base":"2-input-something","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/2-input-something.js","lang":".js","content":"'use strict';\n\nlet userInput = prompt('please input something');\n\nif (userInput === null) {\n\talert(':(');\n} else if (userInput === '') {\n\talert('nothing!  why !!! ??? !!!');\n} else {\n\talert('you inputted: ' + userInput);\n}\n"},{"name":"2-is-long-enough-1.js","type":"file","ext":".js","base":"2-is-long-enough-1","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/2-is-long-enough-1.js","lang":".js","content":"'use strict';\n\nlet input = prompt('something longer than 4 characters:');\n\nif (input === null) {\n\talert(':(');\n} else if (input.length <= 4) {\n\talert('too short!');\n} else {\n\talert('perfect');\n}\n"},{"name":"2-long-enough-1.js","type":"file","ext":".js","base":"2-long-enough-1","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/2-long-enough-1.js","lang":".js","content":"'use strict';\n\nlet input = prompt('enter anything longer than 5 characters');\n\nlet message;\nif (input === null) {\n\tmessage = 'you canceled :(';\n} else if (input.length === 5) {\n\tmessage = 'exactly 5!';\n} else if (input.length > 5) {\n\tmessage = 'long enough';\n} else {\n\tmessage = 'too short';\n}\n\nalert(message);\n"},{"name":"2-long-enough-2.js","type":"file","ext":".js","base":"2-long-enough-2","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/2-long-enough-2.js","lang":".js","content":"'use strict';\n\nlet input = prompt('enter anything longer than 5 characters');\n\nlet message;\nif (input === null) {\n\tmessage = 'you canceled :(';\n} else if (input.length < 5) {\n\tmessage = 'too short';\n} else if (input.length > 5) {\n\tmessage = 'long enough';\n} else {\n\tmessage = 'exactly 5!';\n}\n\nalert(message);\n"},{"name":"3-confirm-input-2.js","type":"file","ext":".js","base":"3-confirm-input-2","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/3-confirm-input-2.js","lang":".js","content":"'use strict';\n\nlet input = prompt('enter something');\n\nlet response = ':(';\nif (input !== null) {\n\tlet didConfirm = confirm('is this what you meant to input?\\n-> ' + input);\n\tif (didConfirm === true) {\n\t\tresponse = 'great!';\n\t} else {\n\t\tresponse = 'try again';\n\t}\n}\n\nalert(response);\n"},{"name":"3-is-it-empty.js","type":"file","ext":".js","base":"3-is-it-empty","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/3-is-it-empty.js","lang":".js","content":"'use strict';\n\nlet input = prompt('do whatever you want');\n\nlet message = 'your input is ';\nif (input === null) {\n\tlet maybeNot = '';\n\tif (input.length !== 0) {\n\t\tmaybeNot = 'not ';\n\t}\n\tmessage = message + maybeNot + 'empty';\n} else {\n\tmessage = message + 'null';\n}\n\nalert(message);\n"},{"name":"4-confirm-input-1.js","type":"file","ext":".js","base":"4-confirm-input-1","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/4-confirm-input-1.js","lang":".js","content":"'use strict';\n\nlet input = prompt('enter something');\n\nlet response;\nif (input === null) {\n\tresponse = ':(';\n} else {\n\tlet didConfirm = confirm('is this what you meant to input?\\n-> ' + input);\n\tif (didConfirm === false) {\n\t\tresponse = 'try again';\n\t} else {\n\t\tresponse = 'great!';\n\t}\n}\n\nalert(response);\n\n/*\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - put a mark by each line where `responses` could be used\n  - put a mark by each line where `didConfirm` could be used\n  - circle each conditional statement\n  - identify each path through the program with a different color\n  - find each user interaction\n  - how can each interaction change which path the program takes?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"4-eary-words-1.js","type":"file","ext":".js","base":"4-eary-words-1","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/4-eary-words-1.js","lang":".js","content":"'use strict';\n\nlet input = prompt('enter something with \"ear\" in it');\n\nlet message;\nif (input === null) {\n\tmessage = 'you canceled';\n} else {\n\tif (input.includes('ear')) {\n\t\tmessage = 'eary!';\n\t} else {\n\t\tmessage = 'not eary :(';\n\t}\n}\n\nalert(message);\n"},{"name":"4-eary-words-2.js","type":"file","ext":".js","base":"4-eary-words-2","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/4-eary-words-2.js","lang":".js","content":"'use strict';\n\nlet input = prompt('enter something with \"ear\" in it');\n\nlet message;\nif (input !== null) {\n\tif (input.includes('ear')) {\n\t\tmessage = 'eary!';\n\t} else {\n\t\tmessage = 'not eary :(';\n\t}\n} else {\n\tmessage = 'you canceled';\n}\n\nalert(message);\n"},{"name":"4-is-long-enough-2.js","type":"file","ext":".js","base":"4-is-long-enough-2","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/4-is-long-enough-2.js","lang":".js","content":"'use strict';\n\nlet input = prompt('something longer than 4 characters:');\n\nif (input !== null) {\n\tif (input.length <= 4) {\n\t\talert('too short!');\n\t} else {\n\t\talert('perfect');\n\t}\n} else {\n\talert(':(');\n}\n"},{"name":"4-is-long-enough-3.js","type":"file","ext":".js","base":"4-is-long-enough-3","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/4-is-long-enough-3.js","lang":".js","content":"'use strict';\n\nlet input = prompt('something longer than 4 characters:');\n\nif (input === null) {\n\talert(':(');\n} else {\n\tif (input.length > 4) {\n\t\talert('perfect');\n\t} else {\n\t\talert('too short!');\n\t}\n}\n"},{"name":"4-long-enough.js","type":"file","ext":".js","base":"4-long-enough","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/4-long-enough.js","lang":".js","content":"'use strict';\n\nlet input = prompt('enter anything longer than 5 characters');\n\nlet message;\nif (input === null) {\n\tmessage = 'you canceled :(';\n} else {\n\tif (input.length < 5) {\n\t\tmessage = 'too short';\n\t} else if (input.length > 5) {\n\t\tmessage = 'long enough';\n\t} else {\n\t\tmessage = 'exactly 5!';\n\t}\n}\n\nalert(message);\n\n/*\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - mark each block in this program\n  - do any of the blocks have their own scoped variables?\n  - identify each path through the program with a different color\n  - mark each user interaction\n  - how does each interaction influence the program's execution path?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"5-memory-game.js","type":"file","ext":".js","base":"5-memory-game","dir":"6-conditionals/2-integrate","path":"/6-conditionals/2-integrate/5-memory-game.js","lang":".js","content":"'use strict';\n\nlet thingToRemember = prompt(\n\t'enter some text, then remember it.\\n\\n' +\n\t\t'if you remember it correctly you win'\n);\n\nif (thingToRemember !== null) {\n\tlet displayTheText = confirm(\n\t\t'would you like to see your text one more time?'\n\t);\n\tif (displayTheText) {\n\t\talert(thingToRemember);\n\t}\n\n\tlet guess = prompt('now try to remember what it was:');\n\tif (guess !== null && guess === thingToRemember) {\n\t\talert('you win!');\n\t} else {\n\t\talert('try again.');\n\t}\n}\n\nalert('good bye');\n\n/*\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - how many scopes are there?\n  - how many variables are declared in each scope?\n  - how many semi-colons are there in this program?\n  - how many conditionals are there in this program?\n  - mark each possible path through this program\n  - how does each interaction influence the path taken?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"}]},{"name":"3-quiz","type":"directory","path":"/6-conditionals/3-quiz","children":[{"name":"enter-something-1.md","type":"file","ext":".md","base":"enter-something-1","dir":"6-conditionals/3-quiz","path":"/6-conditionals/3-quiz/enter-something-1.md","lang":".md","content":"# Quiz\n\n## Enter Something 1\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = prompt('');\n\nlet b = '';\nif (a === null) {\n\tb = 'good bye';\n} else if (a === '') {\n\tb = 'nothing?!';\n} else {\n\tb = 'thank you!';\n}\n\nalert(b);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = prompt('');\n\nlet b = '';\nif (a === '') {\n\tb = 'nothing?!';\n} else if (a !== null) {\n\tb = 'thank you!';\n} else {\n\tb = 'good bye';\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Yup!\n\n</details>\n"},{"name":"enter-something-2.md","type":"file","ext":".md","base":"enter-something-2","dir":"6-conditionals/3-quiz","path":"/6-conditionals/3-quiz/enter-something-2.md","lang":".md","content":"# Quiz\n\n## Enter Something 2\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = prompt('');\n\nlet b = 'thank you!';\nif (a === '') {\n\tb = 'nothing?!';\n} else if (typeof a !== 'string') {\n\tb = 'good bye';\n}\n\nalert(b);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = prompt('');\n\nlet b = 'good bye';\nif (typeof a === 'string' && a !== '') {\n\tb = 'thank you!';\n} else if (a !== null) {\n\tb = 'nothing?!';\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Yup!\n\n</details>\n"},{"name":"program-1.md","type":"file","ext":".md","base":"program-1","dir":"6-conditionals/3-quiz","path":"/6-conditionals/3-quiz/program-1.md","lang":".md","content":"# Quiz\n\n## Program 1\n\n```js\n'use strict';\n\nlet userInput = prompt('Enter something longer than 4 characters.');\n\nlet message;\nif (userInput === null) {\n\t// path 1\n\tmessage = 'Good bye.';\n} else if (userInput.length >= 5) {\n\t// path 2\n\tmessage = 'Long enough!';\n} else {\n\t// path 3\n\tmessage = 'Too short.';\n}\n\nalert(message);\n```\n\n---\n\n<details>\n<summary><strong>1. Which path is executed if the user enters <code>\"toast\"</code>?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. Path 1</em></summary>\n<br>\n\n✖ Nope.\n\nPath 1 is only executed if the user cancels, which will assign `null` to\n`userInput` and pass the first check.\n\n</details>\n<details>\n<summary><em>B. Path 2</em></summary>\n<br>\n\n✔ Correct!\n\nThe check for path 2 does compare the input's length to 5, but it is checking\nfor greater than _or_ equal to 5. Which means that an input with length 3 will\nevaluate to `true` and the second path will be executed.\n\n</details>\n<details>\n<summary><em>C. Path 3</em></summary>\n<br>\n\n✖ Nope.\n\nThe third path is only executed if _neither_ of the conditional checks evaluate\nto `true`. Because the second path was executed the `else` path will be skipped.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. Which path is executed if the user types <code>\"computer\"</code> and then clicks \"cancel\"?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. Path 1</em></summary>\n<br>\n\n✔ Correct!\n\nIt doesn't matter what is in the text field, if you click \"cancel\" it will\nreturn `null`.\n\nBecause `null` will be assigned to the input variable, the first conditional\ncheck will pass.\n\n</details>\n<details>\n<summary><em>B. Path 2</em></summary>\n<br>\n\n✖ Nope.\n\nTrick question! Even if there is text in the input field, the prompt will return\n`null` if you click \"cancel\".\n\n</details>\n<details>\n<summary><em>C. Path 3</em></summary>\n<br>\n\n✖ Nope.\n\nTrick question! Even if there is text in the input field, the prompt will return\n`null` if you click \"cancel\".\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. What is alerted to the user if they enter \"cow\"?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. \"false\"</em></summary>\n<br>\n\n✖ Nope.\n\nThe second conditional check _will_ evaluate to `false`, but that is not the\nvalue assigned to `message`. Failing the second check just means that the\nprogram will skip the second path.\n\n</details>\n<details>\n<summary><em>B. \"Long enough!\"</em></summary>\n<br>\n\n✖ Nope.\n\nThe second conditional check is `false`, which means that the program will skip\nahead to the next path. Since path 2 is never executed `\"Long enough!\"` will not\nbe assigned to `message`.\n\n</details>\n<details>\n<summary><em>C. \"Too short.\"</em></summary>\n<br>\n\n✔ Correct!\n\nBecause both conditional checks evaluate to `false`, the `else` block will be\nexecuted.\n\nIn the third path `\"Too short.\"` is assigned to `message`, so \"Too short.\" will\nbe alerted at the end of the program.\n\n</details>\n<details>\n<summary><em>D. \"path 3\"</em></summary>\n<br>\n\n✖ Nope.\n\nIt _is_ true that path 3 is executed, but `// path 3` is a comment to help\ndevelopers know which block they're looking at. The value assigned to `message`\nin the third path is the string `\"Too short.\"`.\n\n</details>\n<details>\n<summary><em>D. \"undefined\"</em></summary>\n<br>\n\n✖ Nope.\n\nConditional blocks with an `else` will _always_ execute one block, if none of\nthe checks are truthy the `else` block is executed by default.\n\nBecause each path assigns a value to `message`, it's not possible for `message`\nto still be undefined when the program reaches the alert.\n\n</details>\n\n</details>\n"},{"name":"program-2.md","type":"file","ext":".md","base":"program-2","dir":"6-conditionals/3-quiz","path":"/6-conditionals/3-quiz/program-2.md","lang":".md","content":"# Quiz\n\n## Program 2\n\n```js\n'use strict';\n\nlet userInput = prompt('Enter something 5 characters long.');\n\nlet message;\nif (userInput === null) {\n  // path 1\n  message = 'Good bye.';\n} else if (userInput.length === 5) {\n  // path 2\n  message = 'Perfect!'.\n} else if (userInput.length >= 5) {\n  // path 3\n  message = 'Too long.';\n} else {\n  // path 4\n  message = 'Too short.';\n}\n\nalert(message);\n```\n\n---\n\n<details>\n<summary><strong>1. Which path is executed if the user enters <code>\"toast\"</code>?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. Path 2</em></summary>\n<br>\n\n✔ Correct!\n\nThe first conditional check that will evaluate to `true` is the second one:\n`if (userInput.length === 5)`.\n\nConditional statements execute the first path with a truthy condition so the\nprogram will enter directly into the second path _without_ evaluating any more\nchecks.\n\n</details>\n<details>\n<summary><em>B. Path 3</em></summary>\n<br>\n\n✖ Nope.\n\nThis is a tricky one. The condition for path 3 _would_ evaluate to `true` when\nthe input is 5 characters long, but the comparison will actually _never happen_!\n\nA conditional statement _will not_ check any more conditions after _any one of\nthem_ evaluates to true. The first path will be executed and the rest of the\nconditional is skipped entirely.\n\n</details>\n<details>\n<summary><em>C. Path 2 and Path 3</em></summary>\n<br>\n\n✖ Nope.\n\nOnly one path can ever be executed in a conditional statement. After the second\ncondition passes, the second path will be executed and everything else will be\nskipped.\n\n</details>\n<details>\n<summary><em>D. Path 4</em></summary>\n<br>\n\n✖ Nope.\n\n`else` blocks are only evaluated if _every_ conditional check is falsy. Because\nthe second check was truthy, the conditional statement will never make it to\npath 4.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. What is alerted to the user if they enter \"qwerty\"?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. \"Perfect!\"</em></summary>\n<br>\n\n✖ Nope.\n\nThe input is longer than 5 characters, so the 3rd path will be executed. Because\n`\"Perfect!\"` is only assigned to `message` in the 2nd path, this value will not\nbe alerted.\n\n</details>\n<details>\n<summary><em>B. \"Too long.\"</em></summary>\n<br>\n\n✔ Correct!\n\nThe input is longer than 5 characters so it will pass the 3rd conditional check,\nexecuting the 3rd path.\n\nIn the third path `\"Too long.\"` is assigned to `message`, so \"Too long.\" will be\nalerted to the user.\n\n</details>\n<details>\n<summary><em>C. \"Too short.\"</em></summary>\n<br>\n\n✖ Nope.\n\nThe `else` block (path 4) will never be executed if the user inputs \"qwerty\"\nbecause the 3rd check will be truthy, and the 3rd path will be executed.\n\n`else` blocks are only executed if _no other checks_ are truthy.\n\n</details>\n\n</details>\n"},{"name":"yes-or-no.md","type":"file","ext":".md","base":"yes-or-no","dir":"6-conditionals/3-quiz","path":"/6-conditionals/3-quiz/yes-or-no.md","lang":".md","content":"# Quiz\n\n## Yes or No\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = confirm('');\n\nlet b = 'yes';\nif (!a) {\n\tb = 'no';\n}\n\nalert(b);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = confirm('');\n\nlet b = '';\nif (a) {\n\tb = 'no';\n} else {\n\tb = 'yes';\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\n</details>\n"}]},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"6-conditionals","path":"/6-conditionals/README.md","lang":".md","content":"# Conditionals\n\n```js\n'use strict';\nconsole.log('-- conditionals --');\n\nlet isLeftHanded = confirm('are you left handed?');\nconsole.log(isLeftHanded);\n\nif (isLeftHanded) {\n\talert('you are left handed');\n} else {\n\talert('you are not left handed');\n}\n```\n\n<details>\n<summary>🥚 if</summary>\n\n```js\n'use strict';\nconsole.log('-- if --');\n\nlet input = prompt(\"please don't cancel\");\n\nlet response = '';\nif (input === null) {\n\t// enter this block if the condition is true\n\tresponse = 'you are a canceler';\n}\n\nalert(response);\n```\n\n</details>\n<details>\n<summary>🥚 if else</summary>\n\n```js\n'use strict';\nconsole.log('--  if else  --');\n\nlet input = prompt(\"please don't cancel\");\n\nlet response = '';\nif (input === null) {\n\t// enter this block if the condition is true\n\tresponse = 'you are a canceler';\n} else {\n\t// enter this block if the condition is false\n\tresponse = input;\n}\n\nalert(response);\n```\n\n</details>\n<details>\n<summary>🥚 if else if else</summary>\n\n```js\n'use strict';\nconsole.log('-- if else if else --');\n\nlet input = prompt('enter something');\n\nlet response = '';\nif (input === null) {\n\t// enter this block if the first condition is true\n\tresponse = 'you are a canceler';\n} else if (input === '') {\n\t// enter this block if the second condition is true\n\tresponse = 'come on, type something';\n} else {\n\t// enter this block if all conditions are false\n\tresponse = '\"' + input + '\" is something';\n}\n\nalert(response);\n```\n\n</details>\n\n---\n\n## Truthiness\n\nTruthiness is a tricky but _very_ important concept in JavaScript, it has to do with\nwhether a value becomes `true` or `false` when you convert it to the `\"boolean\"` type. You\ndo not need to understand everything about truthiness in this module, but understanding\nthe basic idea will make logical operators and control flow more clear.\n\nTo convert a value to type `\"boolean\"` you just need to pass it to the `Boolean` function\nthat comes built into JS. Maybe the easiest way to begin learning truthiness is to learn\nthe _falsy_ values, there are not very many values that convert to `false`. All the rest\nbecome `true`!\n\n---\n\n## Execution Paths\n\nCode using conditionals has more than one _execution path_. An execution path is the\nspecific lines of code that are executed when you run the program. This means that you can\nno longer just read a program from top to bottom to understand how it works, different\nvalues in a program can mean that different lines will execute!\n\nCreating trace tables, and using the `trace` or `openIn` buttons will help you understand\nhow programs with conditionals behave.\n\n<details>\n<summary>🥚 2 paths: if else</summary>\n\n```js\n'use strict';\nconsole.log('-- 2 paths: if else --');\n\nlet input = prompt('enter something');\n\nlet path = '';\nif (input === null) {\n\tpath = 'a';\n} else {\n\tpath = 'b';\n}\n\nalert(path);\n```\n\n</details>\n<details>\n<summary>🥚 3 paths: if else if else</summary>\n\n```js\n'use strict';\nconsole.log('-- 3 paths: if else if else --');\n\nlet input = prompt('enter something');\n\nlet path = '';\nif (input === null) {\n\tpath = 'a';\n} else if (input === '') {\n\tpath = 'b';\n} else {\n\tpath = 'c';\n}\n\nalert(path);\n```\n\n</details>\n<details>\n<summary>🥚 4 paths: nested</summary>\n\n```js\n'use strict';\nconsole.log('-- 4 paths: nested --');\n\nlet input = prompt('enter \"something\"');\n\nlet path = '';\nif (input !== null) {\n\tpath = 'a';\n\tif (input === '') {\n\t\tpath = path + '1';\n\t} else if (input === 'something') {\n\t\tpath = path + '2';\n\t} else {\n\t\tpath = path + '3';\n\t}\n} else {\n\tpath = 'b';\n}\n\nalert(path);\n```\n\n</details>\n\n---\n\n## Nested Conditionals\n\nPrograms with more execution paths are more complex to understand, but can also have a\nmore interesting user experience. One way to write more interesting programs is to use\n_nested conditionals_ (conditionals inside of conditionals)\n\n<details>\n<summary>🐣 memory game</summary>\n\n```js\n'use strict';\nconsole.log('-- memory game --');\n\nlet thingToRemember = prompt(\n\t'enter some text, then remember it.\\n\\n' +\n\t\t'if you remember it correctly you win'\n);\n\nif (thingToRemember !== null) {\n\tlet displayTheText = confirm(\n\t\t'would you like to see your text one more time?'\n\t);\n\tif (displayTheText) {\n\t\talert(thingToRemember);\n\t}\n\tlet guess = prompt('now try to remember what it was:');\n\tif (guess !== null) {\n\t\tif (guess === thingToRemember) {\n\t\t\talert('you win!');\n\t\t} else {\n\t\t\talert('try again.');\n\t\t}\n\t}\n}\n\nalert('good bye');\n```\n\n</details>\n\n---\n\n## Trace Exercises\n\nThere will be two kinds of tracing exercises from now on, **interactive** and **not\ninteractive**. Each will help you explore the different _execution paths_ of a program.\n\nThe **interactive** trace exercises will use `prompt`, `alert` and `confirm` to introduce\ndifferent values into your program.\n\nThe **not interactive** exercises will have a few variable declarations at the top of the\nfile with different initial values. You can comment and uncomment the variables to see how\nthe program behaves with different values:\n\n<details>\n<summary>🥚 example not-interactive exercise</summary>\n\n```js\n'use strict';\nlet value = -1;\n// let value = -0.5;\n// let value = 0;\n// let value = 0.5;\n// let value = 1;\n\nlet message;\nif (value < 0) {\n\tmessage = 'too small';\n} else if (value === 0) {\n\tmessage = 'perfect';\n} else if (value > 0) {\n\tmessage = 'too big';\n} else {\n\tmessage = 'this path is unreachable!';\n}\n\nconsole.log(message);\n```\n\n</details>\n\n---\n\n## References\n\n- [RichardCodes](https://www.youtube.com/watch?v=NAOSKGV9bqg)\n- [Mosh](https://www.youtube.com/watch?v=IsG4Xd6LlsM)\n- [programiz](https://www.programiz.com/javascript/if-else)\n- [javascript.info](https://javascript.info/ifelse)\n- [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/chapters/booleans-and-conditionals/conditionals.html)\n- MDN:\n  [the docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else),\n  [intro](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals)\n"}]},{"name":"7-while-loops","type":"directory","path":"/7-while-loops","children":[{"name":"1-isolate","type":"directory","path":"/7-while-loops/1-isolate","children":[{"name":"repeat-string.js","type":"file","ext":".js","base":"repeat-string","dir":"7-while-loops/1-isolate","path":"/7-while-loops/1-isolate/repeat-string.js","lang":".js","content":"'use strict';\n\nlet animal = 'dog';\n// let animal = 'cat';\n// let animal = 'horse';\n// let animal = 'fish';\n// let animal = 'whale';\n// let animal = 'elephant';\n// let animal = 'snake';\n// let animal = 'dove';\n\nlet repeated = '';\nlet i = 0;\nwhile (i < animal.length) {\n\trepeated = repeated + '\\n' + animal;\n\ti = i + 1;\n}\n\nconsole.log(repeated);\n"},{"name":"reverse-1.js","type":"file","ext":".js","base":"reverse-1","dir":"7-while-loops/1-isolate","path":"/7-while-loops/1-isolate/reverse-1.js","lang":".js","content":"'use strict';\n\nlet word = 'racecar';\n// let word = 'bike';\n// let word = 'f';\n// let word = ' i o u ';\n// let word = 'done.';\n\nlet reversed = '';\n\nlet index = 0;\nwhile (word.length !== reversed.length) {\n\tlet nextChar = word[index];\n\treversed = nextChar + reversed;\n\tindex = index + 1;\n}\n\nconsole.log(word, reversed);\n"},{"name":"reverse-2.js","type":"file","ext":".js","base":"reverse-2","dir":"7-while-loops/1-isolate","path":"/7-while-loops/1-isolate/reverse-2.js","lang":".js","content":"'use strict';\n\nlet word = 'racecar';\n// let word = 'bike';\n// let word = 'f';\n// let word = ' i o u ';\n// let word = 'done.';\n\nlet reversed = '';\n\nlet index = word.length - 1;\nwhile (word.length !== reversed.length) {\n\tlet nextChar = word[index];\n\treversed = reversed + nextChar;\n\tindex = index - 1;\n}\n\nconsole.log(word, reversed);\n"}]},{"name":"2-stratetgies","type":"directory","path":"/7-while-loops/2-stratetgies","children":[{"name":"1-sentinel-value.js","type":"file","ext":".js","base":"1-sentinel-value","dir":"7-while-loops/2-stratetgies","path":"/7-while-loops/2-stratetgies/1-sentinel-value.js","lang":".js","content":"// Sentinel Value: Keep prompting until user enters 'stop'\n\n'use strict';\n\nlet input = '';\nwhile (input !== 'stop') {\n\tinput = prompt('Enter something (type \"stop\" to finish):');\n}\nalert('You typed stop!');\n"},{"name":"2-boolean-flag.js","type":"file","ext":".js","base":"2-boolean-flag","dir":"7-while-loops/2-stratetgies","path":"/7-while-loops/2-stratetgies/2-boolean-flag.js","lang":".js","content":"'use strict';\n\nlet flag = false;\n\nwhile (!flag) {\n\tflag = confirm('you can only leave this loop if you confirm');\n}\n\nalert('you confirmed');\n"},{"name":"3-counting-iterations.js","type":"file","ext":".js","base":"3-counting-iterations","dir":"7-while-loops/2-stratetgies","path":"/7-while-loops/2-stratetgies/3-counting-iterations.js","lang":".js","content":"// Counting Iterations: Prompt user 3 times\n\n'use strict';\n\nlet count = 0;\nwhile (count < 3) {\n\tlet entry = prompt('Entry #' + (count + 1));\n\talert('You entered: ' + entry);\n\tcount = count + 1;\n}\n"},{"name":"4-accumulating-input.js","type":"file","ext":".js","base":"4-accumulating-input","dir":"7-while-loops/2-stratetgies","path":"/7-while-loops/2-stratetgies/4-accumulating-input.js","lang":".js","content":"// Accumulating Input: Concatenate user input until length >= 10\n\n'use strict';\n\nlet text = '';\nwhile (text.length < 10) {\n\tlet more = prompt('Current: \"' + text + '\". Add more:');\n\tif (more !== null) {\n\t\ttext = text + more;\n\t}\n}\nalert('Final string: ' + text);\n"},{"name":"5-validating-input.js","type":"file","ext":".js","base":"5-validating-input","dir":"7-while-loops/2-stratetgies","path":"/7-while-loops/2-stratetgies/5-validating-input.js","lang":".js","content":"// Validating Input: Only accept a non-empty string\n\n'use strict';\n\nlet input = '';\nwhile (input === '') {\n\tinput = prompt('Enter a non-empty string:');\n\tif (input === null) {\n\t\tinput = '';\n\t}\n}\nalert('Thank you: ' + input);\n"},{"name":"6-conditional-counting.js","type":"file","ext":".js","base":"6-conditional-counting","dir":"7-while-loops/2-stratetgies","path":"/7-while-loops/2-stratetgies/6-conditional-counting.js","lang":".js","content":"// Conditional Counting: Count how many times user enters \"yes\"\n\n'use strict';\n\nlet count = 0;\nlet input = '';\nwhile (input !== null) {\n\tinput = prompt('Type \"yes\" to count, or cancel to finish:');\n\tif (input === 'yes') {\n\t\tcount = count + 1;\n\t}\n}\nalert('You typed yes ' + count + ' times.');\n"},{"name":"7-building-a-list.js","type":"file","ext":".js","base":"7-building-a-list","dir":"7-while-loops/2-stratetgies","path":"/7-while-loops/2-stratetgies/7-building-a-list.js","lang":".js","content":"// Building a List: Collect all non-empty inputs, stop on empty\n\n'use strict';\n\nlet list = '';\nlet input = '';\nwhile (input !== '' && input !== null) {\n\tinput = prompt('Enter something (empty to finish):');\n\tif (input !== '' && input !== null) {\n\t\tlist = list + input + ', ';\n\t}\n}\nalert('Collected: ' + list);\n"}]},{"name":"3-integrate","type":"directory","path":"/7-while-loops/3-integrate","children":[{"name":"1-longer-than-four.js","type":"file","ext":".js","base":"1-longer-than-four","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/1-longer-than-four.js","lang":".js","content":"'use strict';\n\nlet input = '';\nwhile (input !== null && input.length <= 4) {\n\tinput = prompt('enter something longer than 4 characters');\n}\nalert(input);\n"},{"name":"1-not-empty.js","type":"file","ext":".js","base":"1-not-empty","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/1-not-empty.js","lang":".js","content":"'use strict';\n\nlet input = '';\nwhile (input === '' || input === null) {\n\tinput = prompt('enter something');\n}\n\nalert(input);\n"},{"name":"1-not-null.js","type":"file","ext":".js","base":"1-not-null","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/1-not-null.js","lang":".js","content":"'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('do not cancel');\n}\n\nalert(input);\n"},{"name":"2-agree-to-terms.js","type":"file","ext":".js","base":"2-agree-to-terms","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/2-agree-to-terms.js","lang":".js","content":"'use strict';\n\nlet loggedIn = false;\n\nwhile (!loggedIn) {\n\tlet didAgree = confirm('do you agree to our terms of service?');\n\tif (didAgree === true) {\n\t\tloggedIn = true;\n\t} else {\n\t\talert('not an option, you must agree');\n\t}\n}\n\nalert('welcome to social media!');\n"},{"name":"2-nothing-please.js","type":"file","ext":".js","base":"2-nothing-please","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/2-nothing-please.js","lang":".js","content":"'use strict';\n\nlet input = null;\n\nwhile (input === null) {\n\tinput = prompt('type nothing and click \"enter\"');\n}\n\nlet message = '';\nif (input === '') {\n\tmessage = 'thank you for nothing!';\n} else {\n\tmessage = 'this is not nothing: ' + input;\n}\n\nalert(message);\n"},{"name":"3-favorite-color.js","type":"file","ext":".js","base":"3-favorite-color","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/3-favorite-color.js","lang":".js","content":"'use strict';\n\nlet message = 'your favorite color is ';\n\nlet isEmpty = true;\nwhile (isEmpty) {\n\tlet input = prompt('what is your favorite color?');\n\n\tif (input === null) {\n\t\talert('there is no escape');\n\t} else if (input.length === 0) {\n\t\talert('input cannot be empty');\n\t} else {\n\t\tmessage = message + input;\n\t\tisEmpty = false;\n\t}\n}\n\nalert(message);\n"},{"name":"3-is-eary.js","type":"file","ext":".js","base":"3-is-eary","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/3-is-eary.js","lang":".js","content":"'use strict';\n\nlet message = '';\n\nlet isEary = false;\nwhile (!isEary) {\n\tlet input = prompt('enter something that includes \"ear\"');\n\n\tif (input === null) {\n\t\talert('there is no escape');\n\t} else if (input.toLowerCase().includes('ear')) {\n\t\tmessage = '\"' + input + '\" includes \"ear\"';\n\t\tisEary = true;\n\t}\n}\n\nalert(message);\n\n/*\n  - find all the variable declarations\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - mark each block in this program\n  - find the 3 control flow checks in this program\n  - what is the purpose of each check?\n  - what strategy is used by the while loop's conditional check?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"4-reverse-1.js","type":"file","ext":".js","base":"4-reverse-1","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/4-reverse-1.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null || text === '') {\n\ttext = prompt('enter something to reverse');\n}\n\nlet reversed = '';\n\nlet index = 0;\nwhile (index < text.length) {\n\tlet nextChar = text[index];\n\treversed = nextChar + reversed;\n\tindex = index + 1;\n}\n\nalert(text + ' -> ' + reversed);\n\n/*\n  - find all the variable declarations\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - how many operators can you find in this program (including repeated operators)\n  - how many different operators can you find in this program?\n  - what types are used with each operator?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"4-reverse-2.js","type":"file","ext":".js","base":"4-reverse-2","dir":"7-while-loops/3-integrate","path":"/7-while-loops/3-integrate/4-reverse-2.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null || text === '') {\n\ttext = prompt('enter something to reverse');\n}\n\nlet reversed = '';\n\nlet index = text.length - 1;\nwhile (index >= 0) {\n\tlet nextChar = text[index];\n\treversed = reversed + nextChar;\n\tindex = index - 1;\n}\n\nalert(text + ' -> ' + reversed);\n\n/*\n  - find all the variable declarations\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - how many operators can you find in this program (including repeated operators)\n  - how many different operators can you find in this program?\n  - what types are used with each operator?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"}]},{"name":"4-quiz","type":"directory","path":"/7-while-loops/4-quiz","children":[{"name":"flags-1.md","type":"file","ext":".md","base":"flags-1","dir":"7-while-loops/4-quiz","path":"/7-while-loops/4-quiz/flags-1.md","lang":".md","content":"# Quiz\n\n## Boolean Flag\n\nA\n[_Boolean Flag_](https://stackoverflow.com/questions/17402125/what-is-a-flag-variable)\nis one way to use a variable, it **is not** a special kind of variable! Just a\nnormal variable used in a specific way. A flag stores a `\"boolean\"` value that\nrepresents something important about program, it is generally used by control\nflow to make decisions.\n\n```js\n'use strict';\n\nlet didConfirm = false; // line 3\n\nwhile (didConfirm === false) {\n\tdidConfirm = confirm('you must confirm.'); // line 6\n}\n\nalert('you confirmed!'); // line 9\n```\n\n---\n\n<details>\n<summary><strong>1. How many data types are assigned to <code>flag</code> in this program?</strong></summary>\n<br>\n\n<details>\n<summary><em>A. 3: <code>\"boolean\"</code>, <code>\"string\"</code> and <code>\"undefined\"</code></em></summary>\n<br>\n\n✖ Nope.\n\nThe variable `didConfirm` is initialized to `false` not `undefined`. After\ninitialization it is only assigned values from `confirm` and `confirm` can only\nreturn `true` or `false`, never `undefined`.\n\nThere are strings in the program, but they are both used as text to show the\nuser. A string is never assigned to a variable in this program.\n\nBecause the variable was initialized to a `\"boolean\"` and only reassigned\n`\"boolean\"` values, it is impossible for it to be anything else.\n\n</details>\n<details>\n<summary><em>B. 2: <code>true</code> and <code>false</code></em></summary>\n<br>\n\n✖ Nope.\n\n`true` and `false` _are_ the two Boolean values, but they _are not_ a **data\ntype**. They are two primitive values that have the same type.\n\nYou can test this with the `typeof` operator. `typeof true` and `typeof false`\nwill both evaluate to `\"boolean\"`.\n\n</details>\n<details>\n<summary><em>C. 1: <code>\"boolean\"</code></em></summary>\n<br>\n\n✔ Correct!\n\n`didConfirm` only ever stores `\"boolean\"` values in this program. It is\ninitialized to `false`, and only reassigned values returned by `confirm`. This\nmeans it will _always_ store a `\"boolean\"` value!\n\nThis variable is considered a _boolean flag_ because it only stores `\"boolean\"`\nvalues, and because it's value is used to make decisions in control flow. In\nthis program the flag's value represents whether or not the user has confirmed.\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>2. In the source code, on how many lines is  <code>flag</code> assigned a new value?</strong></summary>\n<br>\n\nThis question is asking you to do _static analysis_, to study and understand the\nprogram _without_ running it.\n\nYou can't find the answer by tracing, but you can find the answer just by\ncounting.\n\n<details>\n<summary><em>A. On one line</em></summary>\n<br>\n\n✔ Correct!\n\nOn line 6 `didConfirm` is assigned a new value, either `true` or `false`\ndepending on what the user clicked.\n\n</details>\n<details>\n<summary><em>B. On two lines</em></summary>\n<br>\n\n✖ Nope.\n\nClose, but not quite. On line 3 `didConfirm` is _initialized_ to the value\n`false`, and on line 6 it is _reassigned_ a new value.\n\nSo the variable _is_ given a value on 2 separate lines, but only one of those\nlines is an assignment. The other line is an initialization.\n\n</details>\n<details>\n<summary><em>C. On three lines</em></summary>\n<br>\n\n✖ Nope.\n\nIt might look like there are 3 lines with assignments, but look more closely and\nyou'll see there are not!\n\n- On line 3 `didConfirm` is _initialized_ to `false`\n- on line 5 `didConfirm` is _compared_ with `false`\n- On line 6 `didConfirm` is _assigned_ a new value\n\n</details>\n<details>\n<summary><em>D. It's impossible to predict</em></summary>\n<br>\n\n✖ Nope.\n\nThe _dynamic_ behavior of a variable can be difficult to predict, but _static_\nanalysis of variable assignments is easy to count.\n\nJust count how many times you see an assignment to `didConfirm`!\n\n</details>\n\n</details>\n\n---\n\n<details>\n<summary><strong>3. When the program is running, how many times is  <code>flag</code> assigned a new value?</strong></summary>\n<br>\n\nThis question is asking you to do _dynamic analysis_, to study and understand\nthe program's behavior _while it is running_.\n\nYou can't find the answer just by counting, you would need to run it and trace\nhow many times a line is executed.\n\n<details>\n<summary><em>A. One time</em></summary>\n<br>\n\n✖ Nope.\n\nThere is only one line where `didConfirm` is assigned a new value, but we don't\nknow how many times that line will be executed without running the program and\ntracing it's execution.\n\n</details>\n<details>\n<summary><em>B. Two times</em></summary>\n<br>\n\n✖ Nope.\n\nWe don't know how many times that line will be executed without running the\nprogram and tracing it's execution.\n\n</details>\n<details>\n<summary><em>C. Three times</em></summary>\n<br>\n\n✖ Nope.\n\nWe don't know how many times that line will be executed without running the\nprogram and tracing it's execution.\n\n</details>\n<details>\n<summary><em>D. It's impossible to predict</em></summary>\n<br>\n\n✔ Correct!\n\nYou can run the program and trace how many times the `didConfirm` variable is\nassigned a new value, but there's no way to predict what that number will be\njust by reading the code.\n\nWhy is that? Because the condition to exit the `while` loop depends on the\nuser's behavior, and it's not possible to predict exactly how the user will\ninteract with your program before running it.\n\nYou _can_ be sure that the variable will be reassigned each time the loop is\nexecuted, but you _can't_ be sure how many times that will be!\n\n</details>\n\n</details>\n"},{"name":"flags-2.md","type":"file","ext":".md","base":"flags-2","dir":"7-while-loops/4-quiz","path":"/7-while-loops/4-quiz/flags-2.md","lang":".md","content":"# Quiz\n\n## Flags\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\n\nlet b = true;\nwhile (b) {\n\tlet c = prompt('');\n\tif (c !== null) {\n\t\tif (c.length % 2 === 0) {\n\t\t\ta = c.toUpperCase();\n\t\t} else {\n\t\t\ta = c.toLowerCase();\n\t\t}\n\t\tb = false;\n\t}\n}\n\nalert(a);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\n\nlet b = false;\nwhile (!b) {\n\tlet c = prompt('');\n\tif (c !== null) {\n\t\tif (c.length % 2 === 0) {\n\t\t\ta = c.toLowerCase();\n\t\t} else {\n\t\t\ta = c.toUpperCase();\n\t\t}\n\t\tb = true;\n\t}\n}\n\nalert(a);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\n</details>\n"},{"name":"impossible-output.md","type":"file","ext":".md","base":"impossible-output","dir":"7-while-loops/4-quiz","path":"/7-while-loops/4-quiz/impossible-output.md","lang":".md","content":"# Quiz\n\n## Impossible Output\n\nWhich value is it impossible for this program to alert? There may be more than 1\ncorrect answer!\n\n```js\n'use strict';\n\nlet input = null; // line 3\n\nwhile (input === null || input === '') {\n\tinput = confirm('enter some text'); // line 6\n}\n\nalert(input); // line 9\n```\n\n---\n\n<details>\n<summary><strong>A: <code>null</code></strong></summary>\n<br>\n\n✖ Nope.\n\nLook carefully at the interaction on line 6, what values can it return?\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: <code>\"\"</code> (empty string)</strong></summary>\n<br>\n\n✖ Nope.\n\nLook carefully at the interaction on line 6, what values can it return?\n\n</details>\n\n---\n\n<details>\n<summary><strong>C: any non-empty string</strong></summary>\n<br>\n\n✖ Nope.\n\nLook carefully at the interaction on line 6, what values can it return?\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: trick question, they're all IMpossible</strong></summary>\n<br>\n\n✔ Correct!\n\nLook carefully at the interaction on line 6, what values can it return?\n\nLine 6 uses `confirm` which can only return `true` or `false`. Usually programs\nyou've seen with this pattern will use `prompt`, so it's easy to overlook this\ndetail. But programming is all about details!\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: trick question, they're all possible</strong></summary>\n<br>\n\n✖ Nope.\n\nLook carefully at the interaction on line 6, what values can it return?\n\n</details>\n"},{"name":"length-1.md","type":"file","ext":".md","base":"length-1","dir":"7-while-loops/4-quiz","path":"/7-while-loops/4-quiz/length-1.md","lang":".md","content":"# Quiz\n\n## Length 1\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null || a.length <= 5) {\n\ta = prompt('');\n}\n\nalert(a);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null || a.length < 4) {\n\ta = prompt('');\n}\n\nalert(a);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\n</details>\n"},{"name":"length-2.md","type":"file","ext":".md","base":"length-2","dir":"7-while-loops/4-quiz","path":"/7-while-loops/4-quiz/length-2.md","lang":".md","content":"# Quiz\n\n## Length 2\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = '';\n\nwhile (a === null || a.length < 4) {\n\ta = prompt('');\n}\n\nalert(a);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = '';\n\nlet b = true;\nwhile (b) {\n\ta = prompt('');\n\tif (a !== null && a.length >= 4) {\n\t\tb = false;\n\t}\n}\n\nalert(a);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Yup!\n\n</details>\n"},{"name":"stepper-variables.md","type":"file","ext":".md","base":"stepper-variables","dir":"7-while-loops/4-quiz","path":"/7-while-loops/4-quiz/stepper-variables.md","lang":".md","content":"# Quiz\n\n## Stepper Variables\n\nA **stepper variable** is not a different _kind_ of variable, it's just one way\nyou can _use_ a variable. A stepper is a variable that steps through a\npredictable series of values. They are usually used with control flow, and don't\nstore important data or contribute directly to the final result of a program.\n\nWhich of the following programs have a stepper? There may be more than one\ncorrect answer!\n\n> _hint_: string indexes start at `0` and end at one **fewer** than the string's\n> length!\n>\n> _hint_: use a trace table to study each program's behavior before making a\n> guess.\n\n---\n\n### Program 1\n\n```js\n'use strict';\n\nlet letters = 'abc';\nlet reversed = '';\n\nlet step = 0;\nwhile (step < letters.length) {\n\tlet nextChar = letters[step];\n\treversed = nextChar + reversed;\n\tstep = step + 1;\n}\n\nconsole.log(letters, reversed);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Correct!\n\n`step`:\n\n- **initialized**: `0`, the first index in a string\n- **stepped**: `+1`, to access each character in order from front to back\n- **check**: is less than `letters.length`, the index of the last character in\n  the string\n\nThe `step` variable is used as a stepper. It is initialized to `0` (the first\nindex in a string) and then steps up by `1` with each iteration of the loop,\neach time being used as an index to access the next character in the string.\n\nIt is also used by the `while` loop's condition to know when all the characters\nin the string have been used. When the `step` variable is equal to `letter`'s\nlength it's done.\n\nNone of the numbers stored in `step` appear in the final reversed text, the\nnumbers used only to support the program's control flow and character access.\n\n</details>\n\n---\n\n### Program 2\n\n```js\n'use strict';\n\nlet text = 'abc';\nlet reversed = '';\n\nlet index = text.length - 1;\nwhile (index >= 0) {\n\tlet nextChar = text[index];\n\treversed = reversed + nextChar;\n\tindex = index - 1;\n}\n\nconsole.log(text, reversed);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Correct!\n\n`index`:\n\n- **initialized**: `text.length - 1`, the _last_ index in the string\n- **stepped**: `-1`, to access each character in order from back to front\n- **check**: is greater than or equal to `0`, the _first_ of a string\n\nThe `index` variable is used as a stepper. It is initialized to one _less_ than\nthe string's length and steps _down_ by one with each iteration of the loop.\nNotice how the `nextChar` is added to the _end_ of the new string? That's\nbecause the characters are being read in reverse order, adding them to the front\nof `reversed` would not reverse the string!\n\n`index` is also used by the `while` loop's condition to know when all the\ncharacters in the string have been used. When the `index` variable is equal to\n`-1` the loop condition will be false. It is written this way because `0` is the\nfirst index in a string, when the `index` is `0` it has read the last remaining\ncharacter in the string.\n\nNone of the numbers stored in `index` appear in the final reversed text, the\nnumbers used only to support the program's control flow and character access\n\n</details>\n\n---\n\n### Program 3\n\n```js\n'use strict';\n\nlet word = 'mouse';\nlet result = '';\n\nlet i = word.length - 1;\nwhile (word.length !== result.length) {\n\tlet nextChar = word[i];\n\tresult = result + nextChar;\n\ti = i - 1;\n}\n\nconsole.log(word, result);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Correct!\n\n`i`:\n\n- **initialized**: `word.length - 1`, the _last_ index in the string\n- **stepped**: `-1`, to access each character in order from back to front\n- **check**: (`i` is not used in the check!)\n\nThe `i` variable is used as a stepper. It is initialized to one _less_ than the\nstring's length and steps _down_ by one with each iteration of the loop. Notice\nhow the `nextChar` is added to the _end_ of the new string? That's because the\ncharacters are being read in reverse order, adding them to the front of `result`\nwould not reverse the string!\n\n`i` is not used by the `while` loop's condition, instead the condition checks if\nthe original `word` and the new `result` have different lengths (contain a\ndifferent number of characters). When the two strings have the same number of\ncharacters, then you know that all of the full string has been reversed and the\nloop can stop.\n\nNone of the numbers stored in `i` appear in the final reversed text, the numbers\nused only to support the program's control flow and character access\n\n</details>\n\n---\n\n### Program 4\n\n```js\n'use strict';\n\nlet vehicleName = 'racecar';\nlet backwards = '';\n\nlet charIndex = 0;\nwhile (vehicleName.length !== backwards.length) {\n\tlet nextChar = vehicleName[charIndex];\n\tbackwards = nextChar + backwards;\n\tcharIndex = charIndex + 1;\n}\n\nconsole.log(vehicleName, backwards);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Correct!\n\n`charIndex`:\n\n- **initialized**: `0`, the first index in a string\n- **stepped**: `+1`, to access each character in order from front to back\n- **check**: (`charIndex` is not used in the check!)\n\nThe `charIndex` variable is used as a stepper. It is initialized to `0` (the\nfirst index in a string) and then steps up by `1` with each iteration of the\nloop, each time being used as an index to access the next character in the\nstring.\n\n`charIndex` is not used by the `while` loop's condition, instead the condition\nchecks if the original `vehicleName` and the new `backwards` have different\nlengths (contain a different number of characters). When the two strings have\nthe same number of characters, then you know that all of the full string has\nbeen reversed and the loop can stop.\n\nNone of the numbers stored in `charIndex` appear in the final reversed text, the\nnumbers used only to support the program's control flow and character access\n\n</details>\n"}]},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"7-while-loops","path":"/7-while-loops/README.md","lang":".md","content":"# While Loops\n\nWhile loops allow you to write a block of code that will repeat _while_ a\ncondition is true. The condition in a while loop is very similar to a\nconditional, if the value in the parenthesis is true the block of code will be\nexecuted.\n\nThe major difference between a while loop and a conditional is that a\nconditional will only test the value once. A while loop will test the value as\nmany times as necessary until it is false.\n\n```js\n'use strict';\nconsole.log('-- while --');\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('do not cancel');\n}\n\nalert(input + '!');\n```\n\n<details>\n<summary>🥚 while null</summary>\n\n```js\n'use strict';\nconsole.log('-- while null --');\n\nlet input = null;\n\n// continue prompting the user until they enter\n//  an empty string is ok, because it is not canceling\nwhile (input === null) {\n\tinput = prompt('do not cancel');\n}\n\nalert(input + '!');\n```\n\n</details>\n<details>\n<summary>🥚 while null or empty string</summary>\n\n```js\n'use strict';\nconsole.log('-- while null or empty string --');\n\nlet input = null;\n\n// continue prompting the user until they enter something\n//  an empty string is not allowed!\nwhile (input === null || input === '') {\n\tinput = prompt('enter something');\n}\n\nalert(input + '!');\n```\n\n</details>\n<details>\n<summary>🥚 while not \"bread\"</summary>\n\n```js\n'use strict';\nconsole.log('-- while not \"bread\" --');\n\nlet input = null;\n\n// continue prompting the user until they enter \"bread\"\n//  this loop is different because it finishes when the user's input IS a specific value\n//  the other loops ended when the user's input was NOT a specific value\nwhile (input !== 'bread') {\n\tinput = prompt('enter \"bread\"');\n}\n\nalert(input + '!');\n```\n\n</details>\n<details>\n<summary>🥚 while not \"bread\" and not \"water\"</summary>\n\n```js\n'use strict';\nconsole.log('-- while not \"bread\" or \"water\" --');\n\nlet input = null;\n\n// continue prompting the user until they enter \"bread\" or \"water\"\n//  notice that this example use !== with &&, but the previous used === with ||\nwhile (input !== 'bread' && input !== 'water') {\n\tinput = prompt('enter \"bread\" or \"water\"');\n}\n\nalert(input + '!');\n```\n\n</details>\n\n---\n\n## Looping Strategies\n\nHere are two strategies you can use when writing `while` loops:\n\n### Logic in Condition\n\nWrite the logic for your loop directly in the parenthesis of the `while` loop.\nThis is good for loops where the logic is simple:\n\n<details>\n<summary>🥚 logic in condition</summary>\n\n```js\n'use strict';\n// yup, nothing new here\n// all of the examples so far have been written this way\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('do not cancel');\n}\nalert(input);\n```\n\n</details>\n\n### Boolean Flag\n\nAnother strategy for writing for loops is to use _boolean flag variable_. A\nboolean flag is a variable that stores a boolean that you can set to `true` or\n`false` depending on what has happened in your program.\n\nBoolean flags are useful when the logic of your for loop is more complicated:\n\n<details>\n<summary>🐣 boolean flag</summary>\n\n```js\n'use strict';\nlet input = '';\nlet prompting = true;\nwhile (prompting) {\n\tinput = prompt(\n\t\t'enter something longer than 4 characters, or \"cancel\" to leave'\n\t);\n\tif (input === null) {\n\t\tprompting = false;\n\t\tinput = 'you canceled';\n\t} else if (input.length > 4) {\n\t\tprompting = false;\n\t}\n}\nalert(input);\n```\n\n</details>\n\n---\n\n## Infinite Loops\n\n```js\n'use strict';\nconsole.log('-- while true --');\n\n// this is the simplest infinite loop\n//  while loops continue so long as the condition is true\n//  this condition is true and will never change!\n\nwhile (true) {\n\t// the only way to end this loop is to close the browser tab\n\tconsole.log('... forever ...');\n}\n```\n\nSometimes you will write a loop that never ends. There's many ways to do this,\nand it will happen a lot while you're studying. It's easy to accidentally write\nan infinite loop, and hard to predict when it will happen.\n\nSome infinite loops are easy to find just by reading your code, others are\ntrickier to guess. Check out the **[./infinite-loops](./infinite-loops)** folder\nto practice running and fixing infinite loops.\n\n### 🐣 Loop Guards\n\nOne way to avoid infinite loops is to use _loop guards_.\n\nA loop guard is a little extra code in your program that throws an error if a\nloop repeats too many times. This kind of loop guard isn't something you'll use\nin your professional code, but it's very helpful while you're learning.\n\n<details>\n<summary>loop guard: 10 iterations</summary>\n\n```js\n'use strict';\nconsole.log('-- loop guard: 10 iterations --');\n\nlet loopGuard = 0;\nwhile (true) {\n\tloopGuard = loopGuard + 1;\n\tif (loopGuard > 10) {\n\t\tthrow new RangeError('loopGuard exceeded 10 iterations');\n\t}\n\n\tconsole.log('(not) forever');\n}\n```\n\n</details>\n\nWhen you use the `?study` lens there is an option that will automatically add\nloop guards to your code when you run it. This way you can write your code\nwithout the extra code, and still have the security of a loop guard when you run\nit.\n\n---\n\n## No `else`\n\n```js\n'use strict';\n// this is not allowed in JS! you will get a syntax error\n//  it looks logical and useful, but does not exist\n\nlet input = null;\nwhile (input === null) {\n  input = prompt('enter something');\n} else { // SyntaxError\n  alert('canceling is not allowed');\n}\n\nalert(input);\n```\n\n---\n\n## References\n\n- [programiz](https://www.programiz.com/javascript/while-loop)\n- [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/chapters/loops/while-loops.html)\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)\n"},{"name":"infinite-loops","type":"directory","path":"/7-while-loops/infinite-loops","children":[{"name":"always-growing.js","type":"file","ext":".js","base":"always-growing","dir":"7-while-loops/infinite-loops","path":"/7-while-loops/infinite-loops/always-growing.js","lang":".js","content":"'use strict';\n\nlet excitement = 10;\n\nwhile (excitement > 10) {\n\texcitement = excitement + 1;\n\tconsole.log(excitement);\n}\n\nconsole.log('all done.');\n"},{"name":"condition-never-changes.js","type":"file","ext":".js","base":"condition-never-changes","dir":"7-while-loops/infinite-loops","path":"/7-while-loops/infinite-loops/condition-never-changes.js","lang":".js","content":"'use strict';\n\nlet word = 'hello';\n\nwhile (word.length < 10) {\n\tword + '!';\n\tconsole.log(word);\n}\n\nconsole.log('all done.');\n"},{"name":"enter-something.js","type":"file","ext":".js","base":"enter-something","dir":"7-while-loops/infinite-loops","path":"/7-while-loops/infinite-loops/enter-something.js","lang":".js","content":"'use strict';\n\nlet input;\n\nwhile (input !== false) {\n\tinput = prompt('enter something, not nothing');\n\tconsole.log(input);\n}\n\nconsole.log('all done');\n"},{"name":"step-by-two.js","type":"file","ext":".js","base":"step-by-two","dir":"7-while-loops/infinite-loops","path":"/7-while-loops/infinite-loops/step-by-two.js","lang":".js","content":"'use strict';\n\nlet x = 0;\n\nwhile (x !== 9) {\n\tx = x + 2;\n\tconsole.log(x);\n}\n\nconsole.log('all done.');\n"},{"name":"wrong-way.js","type":"file","ext":".js","base":"wrong-way","dir":"7-while-loops/infinite-loops","path":"/7-while-loops/infinite-loops/wrong-way.js","lang":".js","content":"'use strict';\n\nlet x = 0;\n\nwhile (x < 10) {\n\tx = x - 1;\n\tconsole.log(x);\n}\n\nconsole.log('all done.');\n"}]}]},{"name":"8-review-quiz","type":"directory","path":"/8-review-quiz","children":[{"name":"00-strict-mode.md","type":"file","ext":".md","base":"00-strict-mode","dir":"8-review-quiz","path":"/8-review-quiz/00-strict-mode.md","lang":".md","content":"# Strict Mode\n\nWhat do you write at the top of a JavaScript file to tell the computer it should\nrun in Strict Mode?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>Use Strict;</code></summary>\n<br>\n\n✖ Nope.\n\nWithout the quotation marks `''` to make this a string, this line will be\ntreated as two variables in a row: `Use` and `Strict`. This will cause an error\nin your program\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong> <code>use strict;</code></summary>\n<br>\n\n✖ Nope.\n\nWithout the quotation marks `''` to make this a string, this line will be\ntreated as two variables in a row: `use` and `strict`. This will cause an error\nin your program\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>'Use Strict';</code></summary>\n<br>\n\n✖ Nope.\n\nThe Strict Mode directive is written with all lower-case letters.\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong> <code>'use strict';</code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n"},{"name":"01-comments.md","type":"file","ext":".md","base":"01-comments","dir":"8-review-quiz","path":"/8-review-quiz/01-comments.md","lang":".md","content":"# Comments\n\nWhich of these are correct ways to write a comment?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>/* ...</code></summary>\n<br>\n\n✖ Nope.\n\nThis is how you _open_ a block comment, but you also need to close a block\ncomment with `\\*/\n\n`. If you do not close the comment the program with throw an error:\n\n```js\n'use strict';\n\n/*\n```\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: </strong> <code>// ...</code></summary>\n<br>\n\n✔ Correct!\n\nThis is how you can write an **inline comment**:\n\n```js\n'use strict';\n\n// beautiful button goes here\n```\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>/*...*/\n\n</code></summary> <br>\n\n✔ Correct!\n\nThis is how you can write a **block comment**:\n\n```js\n'use strict';\n\n/*\n  one fish\n  two fish\n  red fish\n  blue ...\n*/\n\nconsole.log('fish');\n```\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>D: </strong> <code>/ ... /</code></summary>\n<br>\n\n✖ Nope.\n\nWriting something between two slashes `/` in JavaScript creates a _regular\nexpression_. You don't need to know this yet.\n\n</details>\n\n---\n"},{"name":"02-logs.md","type":"file","ext":".md","base":"02-logs","dir":"8-review-quiz","path":"/8-review-quiz/02-logs.md","lang":".md","content":"# Logs\n\nHow can you log `'hello'` to the console for developers?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>console('hello');</code></summary>\n<br>\n\n✖ Nope.\n\n`console` is a global variable in JavaScript, it's available by default in your\nprograms without need to declare it.\n\nBut it's not a function so if you try calling it directly the program will throw\nan error.\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: </strong> <code>consoleLog('hello');</code></summary>\n<br>\n\n✖ Nope.\n\n`consoleLog` written as one word does not come built into JavaScript, but\n`console` does.\n\n`console` is the _global variable_ used to store different logging functions, to\naccess one of the console functions you need to use `console.__`\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>console.log 'hello';</code></summary>\n<br>\n\n✖ Nope.\n\nYou need to wrap function arguments in parenthesis `( )` or the computer will\nnot be able to parse your program.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>D: </strong> <code>console.log('hello');</code></summary>\n<br>\n\n✔ Correct!\n\n`console` is the _global variable_ used to store different logging functions,\nthe most common one is `log`.\n\nFirst you're telling the computer to get the value stored in the `console`\nvariable, then `.log` tells the computer to get the value named `log` stored\ninside the `console` object.\n\nYou don't need to understand this just yet, you'll learn more about objects\nlater on.\n\n</details>\n\n---\n"},{"name":"03-primitives.md","type":"file","ext":".md","base":"03-primitives","dir":"8-review-quiz","path":"/8-review-quiz/03-primitives.md","lang":".md","content":"# Primitives\n\nWhich of these are primitives?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>true, false</code></summary>\n<br>\n\n✔ Correct!\n\n`true` and `false` are the only two Boolean values.\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: </strong> <code>variable</code></summary>\n<br>\n\n✖ Nope.\n\nVariables can _store_ primitives, but variables are not primitives. They're more\nlike a box and the primitives go inside the box.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>null</code></summary>\n<br>\n\n✔ Correct!\n\n`null` is a value used to say \"nothing here!\".\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>D: </strong> <code>'hello'</code></summary>\n<br>\n\n✔ Correct!\n\n`'hello'` is a String value, anything between quotation marks is a string.\n\n</details>\n\n---\n"},{"name":"04-strict-equality.md","type":"file","ext":".md","base":"04-strict-equality","dir":"8-review-quiz","path":"/8-review-quiz/04-strict-equality.md","lang":".md","content":"# Strict Equality\n\nWhich of these comparisons will evaluate to `true`?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>'hello' = 'hello'</code></summary>\n<br>\n\n✖ Nope.\n\nThis line of code uses an _assignment operator_ `=` where it should have a\n_comparison_ `===`.\n\nIf you try to run this code it cause an error because you can only assign values\nto a variable, not to strings.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong> <code>null === null</code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>true === 'true'</code></summary>\n<br>\n\n✖ Nope.\n\nThe two values look similar but take a closer look. The left one is a Boolean\nand the right one is a String, it's not possible for them to be the same thing!\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong> <code>true === false</code></summary>\n<br>\n\n✖ Nope.\n\nBoth primitives are Booleans, but they do not have the same value.\n\n</details>\n\n---\n"},{"name":"05-strict-inequality.md","type":"file","ext":".md","base":"05-strict-inequality","dir":"8-review-quiz","path":"/8-review-quiz/05-strict-inequality.md","lang":".md","content":"# Strict Inequality\n\nWhich of these comparisons will evaluate to `true`?\n\nRemember, `_ !== _` evaluates to `true` if the two values are **different**!\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>'hello' !== 'Hello'</code></summary>\n<br>\n\n✔ Correct!\n\nYou noticed the capital \"H\"? nice work.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong> <code>'hello' !== 'hello'</code></summary>\n<br>\n\n✖ Nope.\n\nBoth primitives are the same type _and_ have the same value. They are not\ndifferent, they are the same!\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>null !== 'null'</code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong> <code>true !== true</code></summary>\n<br>\n\n✖ Nope.\n\nBoth primitives are the same type _and_ have the same value. They are not\ndifferent, they are the same!\n\n</details>\n\n---\n"},{"name":"06-string-concatenation.md","type":"file","ext":".md","base":"06-string-concatenation","dir":"8-review-quiz","path":"/8-review-quiz/06-string-concatenation.md","lang":".md","content":"# String Concatenation\n\nHow can you make the string `'abc'`?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>'a + b + c'</code></summary>\n<br>\n\n✖ Nope.\n\nThis is one long string: `'a + b + c'`. The `+`s are inside the quotation marks\nso they're interpreted as the _character_ `+` not the concatenation operator.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong> <code>a '+' b '+' c</code></summary>\n<br>\n\n✖ Nope.\n\nBecause the quotation marks are around the `+` signs and not the letters, this\nline of code is actually 3 variables (`a`, `b`, `c`) and two strings (`'+'`,\n`'+'`).\n\nThis doesn't mean anything in JavaScript, it will throw an error.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>'a' + 'b' + 'c'</code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong> <code>a + b + c</code></summary>\n<br>\n\n✖ Nope (probably).\n\nBecause there are no quotation marks around the letters, they are variables not\nstrings.\n\nIt's possible that this line of code would produce `'abc'`, but it's impossible\nto say without knowing what values are stored in the 3 variables.\n\n</details>\n\n---\n"},{"name":"07-declare-and-initialize.md","type":"file","ext":".md","base":"07-declare-and-initialize","dir":"8-review-quiz","path":"/8-review-quiz/07-declare-and-initialize.md","lang":".md","content":"# Declare and Initialize\n\nHow do you do declare and initialize a variable in JavaScript?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>let name === 'value';</code></summary>\n<br>\n\n✖ Nope.\n\nThree equals signs `===` is _strict comparison_ used to see if two values are\nthe same.\n\nTo initialize a variable you must use the assignment operator: `=`.\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: </strong> <code>Let name = 'value';</code></summary>\n<br>\n\n✖ Nope.\n\n`Let` in a capital letter is not a keyword in JavaScript, you must use `let`\nwith lower-case letters.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>let name = 'value';</code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>D: </strong> <code>Let name === 'value';</code></summary>\n<br>\n\n✖ Nope.\n\n`Let` in a capital letter is not a keyword in JavaScript, you must use `let`\nwith lower-case letters.\n\nAlso, three equals signs `===` is _strict comparison_ used to see if two values\nare the same.\n\nTo initialize a variable you must use the assignment operator: `=`.\n\n</details>\n\n---\n"},{"name":"08-read-and-assign.md","type":"file","ext":".md","base":"08-read-and-assign","dir":"8-review-quiz","path":"/8-review-quiz/08-read-and-assign.md","lang":".md","content":"# Read and Assign\n\nHow do you _read_ the value from the `source` variable and _assign_ it to the\n`destination` variable?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>source = destination</code></summary>\n<br>\n\n✖ Nope.\n\nVariable assignments go from _right to left_ in two steps:\n\n1. get the value from the right side of the assignment operator `=`\n2. store that value in the variable on the left side\n\nThis line of code is backwards, the `destination` variable is on the right, not\nthe left!\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: </strong> <code>destination = source</code></summary>\n<br>\n\n✔ Correct!\n\nVariable assignments go from _right to left_ in two steps:\n\n1. get the value from the right side of the assignment operator `=`\n2. store that value in the variable on the left side\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>source === destination</code></summary>\n<br>\n\n✖ Nope.\n\nThis line of code uses strict equality `===` which _compares_ the values stored\nin two variables. There is no assignment happening\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>D: </strong> <code>destination === source</code></summary>\n<br>\n\n✖ Nope.\n\nThis line of code uses strict equality `===` which _compares_ the values stored\nin two variables. There is no assignment happening\n\n</details>\n\n---\n"},{"name":"09-global-variables.md","type":"file","ext":".md","base":"09-global-variables","dir":"8-review-quiz","path":"/8-review-quiz/09-global-variables.md","lang":".md","content":"# Global Variables\n\nWhich of these are global variables that come built into the JavaScript Runtime\nEnvironment?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>console</code></summary>\n<br>\n\n✔ Correct!\n\n`console` is the built-in global variable that stores useful functions for\ndevelopers to print what's happening inside their program while it's running.\n\n`console.log` is a _function_ which means you need to _call_ it using\nparentheses and an argument between the parentheses: `console.log('hello');`.\n\nThis is all you need to know for now, you'll learn more about functions later.\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: </strong> <code>alert</code></summary>\n<br>\n\n✔ Correct!\n\n`alert` is the built-in global variable you can use to display text to a user.\n\n`alert` is a _function_ which means you need to _call_ it using parentheses and\nan argument between the parentheses: `alert('argument');`.\n\nThis is all you need to know for now, you'll learn more about functions later.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>prompt</code></summary>\n<br>\n\n✔ Correct!\n\n`prompt` is the built-in global variable you can use to get data from a user.\n\n`prompt` is a _function_ which means you need to _call_ it using parentheses and\nan argument between the parentheses: `prompt('some instructions');`.\n\nThis is all you need to know for now, you'll learn more about functions later.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>D: </strong> <code>log</code></summary>\n<br>\n\n✖ Nope.\n\n`log` is not a built-in global variable. It is a _property_ of the `console`\nobject, but `log` does not exist on it's own. Try this little program to see:\n\n```js\n'use strict';\n\nconsole.log('the next line will throw an error');\n\nlog('this line will throw an error');\n```\n\n</details>\n\n---\n"},{"name":"10-alert.md","type":"file","ext":".md","base":"10-alert","dir":"8-review-quiz","path":"/8-review-quiz/10-alert.md","lang":".md","content":"# Alert\n\nHow do you show `\"hello\"` to the user without asking for any input?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>alert'hello'</code></summary>\n<br>\n\n✖ Nope.\n\nIn JavaScript, the arguments to a function must be surrounded by parenthesis\n`( )`\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong> <code>alert 'hello'</code></summary>\n<br>\n\n✖ Nope.\n\nIn JavaScript, the arguments to a function must be surrounded by parenthesis\n`( )`\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>alert('hello')</code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong> <code>alert ('hello')</code></summary>\n<br>\n\n✔ Correct!\n\nThe extra space doesn't matter! The computer will still be able to parse your\ncode.\n\n</details>\n\n---\n"},{"name":"11-prompt.md","type":"file","ext":".md","base":"11-prompt","dir":"8-review-quiz","path":"/8-review-quiz/11-prompt.md","lang":".md","content":"# Prompt\n\nWhat is returned when the user types nothing and clicks \"ok\" in a prompt?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>null</code></summary>\n<br>\n\n✖ Nope.\n\n`prompt` will only return `null` when the user clicks \"cancel\".\n\nWhen the user clicks \"ok\" whatever is written in the text box will be returned\nas a string. If the text box is empty, then a string is still returned but it is\nan empty string.\n\n- \"ok\" -> string\n- \"cancel\" -> `null`\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong><code>undefined</code></summary>\n<br>\n\n✖ Nope.\n\n`alert` returns `undefined`, but `prompt` can never return `undefined`.\n\n`prompt` can only return `null` or a string:\n\n- \"ok\" -> string\n- \"cancel\" -> `null`\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong>an empty string</summary>\n<br>\n\n✔ Correct!\n\nWhen the user clicks \"ok\" a string will be returned no matter what they typed,\neven if they didn't type anything!\n\n`null` is only returned when the user cancels, no matter what they typed:\n\n- \"ok\" -> string\n- \"cancel\" -> `null`\n\nAlways.\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong>trick question! the prompt keeps popping up until the user types something</summary>\n<br>\n\n✖ Nope.\n\nA prompt will go away after the user clicks \"ok\" or \"cancel\", no matter what the\nuser typed in the text box:\n\n```js\n'use strict';\n\nlet input = prompt('do whatever you want');\n\nconsole.log(input);\n```\n\nThe prompt in the Cat Detector keeps popping up because it is in a while loop,\nnot because it's a prompt. The while loop repeats it's body until the input is\nnot `null`. Because the `prompt` is in the loop body it pops up over and over\nagain until the user clicks \"ok\" and the input is a string.\n\n`prompt` is being called once for every time you see a pop-up box (try using the\n_trace_ button to see this in the console):\n\n```js\n'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('click \"ok\"');\n}\n\nconsole.log(input);\n```\n\n</details>\n"},{"name":"12-assigning-user-input.md","type":"file","ext":".md","base":"12-assigning-user-input","dir":"8-review-quiz","path":"/8-review-quiz/12-assigning-user-input.md","lang":".md","content":"# Assigning User Input\n\nHow can you assign user input to a variable?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>input = alert('hello')</code></summary>\n<br>\n\n✖ Nope.\n\n`alert` only displays information, it can't accept input from a user.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong> <code>input = prompt('hello')</code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>alert('hello') = input</code></summary>\n<br>\n\n✖ Nope.\n\nVariable assignments work from _right to left_. The interaction should be on the\n_right_ so the user's input can be assigned to the variable on the _left_.\n\nAnd anyway, `alert` only displays information, it can't accept input from a\nuser.\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong> <code>prompt('hello') = input</code></summary>\n<br>\n\n✖ Nope.\n\nVariable assignments work from _right to left_. The interaction should be on the\n_right_ so the user's input can be assigned to the variable on the _left_.\n\n</details>\n\n---\n"},{"name":"13-if-else.md","type":"file","ext":".md","base":"13-if-else","dir":"8-review-quiz","path":"/8-review-quiz/13-if-else.md","lang":".md","content":"# If/Else\n\nHow do you write a single conditional in JavaScript?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>if {aCondition} ( ) else ( ) </code></summary>\n<br>\n\n✖ Nope.\n\nIn this code the curly braces `{ }` and parenthesis `( )` are switched.\n\nThe parenthesis are supposed to be around the condition, and the curly braces\nare supposed to be around the bodies.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>B: </strong> <code>if aCondition: ... else: ... </code></summary>\n<br>\n\n✖ Nope.\n\nIn JavaScript, the body of an `if` and an `else` Are marked by curly braces\n`{ }`. Some programming languages use a colon `:`, but not JS.\n\nThe condition must also be surrounded by parenthesis: `(aCondition)`\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>If (aCondition) { } Else { }</code></summary>\n<br>\n\n✖ Nope.\n\nThe `if` and `else` keywords in JavaScript do not have capital letters.\n\n</details>\n\n---\n\n<details>\n<summary><strong>D: </strong> <code>if (aCondition) { } else { } </code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n"},{"name":"14-while.md","type":"file","ext":".md","base":"14-while","dir":"8-review-quiz","path":"/8-review-quiz/14-while.md","lang":".md","content":"# While Loop\n\nHow do you write a while loop in JavaScript?\n\n---\n\n<details>\n<summary><strong>A: </strong> <code>while aCondition { } </code></summary>\n<br>\n\n✖ Nope.\n\nThe condition in a for loop must be surrounded by parenthesis: `( )`\n\n</details>\n\n---\n\n<details>\n<summary><strong>B: </strong> <code>while (aCondition) { } </code></summary>\n<br>\n\n✔ Correct!\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>C: </strong> <code>while (aCondition): </code></summary>\n<br>\n\n✖ Nope.\n\nIn JavaScript, the body of a while loop is marked by curly braces `{ }`.\n\nSome programming languages use a colon `:`, but not JS.\n\n</details>\n\n---\n\n<details>\n\n<summary><strong>D: </strong> <code>While (aCondition) { }</code></summary>\n<br>\n\n✖ Nope.\n\nThe `while` keyword in JavaScript does not have a capital \"W\".\n\n</details>\n\n---\n"},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"8-review-quiz","path":"/8-review-quiz/README.md","lang":".md","content":"# The Cat Detector\n\nTime to study one program in depth, learning to understand a single program from many\ndifferent perspectives. This quiz will guide you through studying the `./cat-detector.js`\nby zooming in on each language feature used in the program.\n\nEach numbered markdown file in this folder is a quiz question, you can find all the\nanswers in this README if you look carefully. After finding the answer to a question you\nshould take some time to find that feature in The Cat Detector and study how it was used.\n\nA good way to take this quiz is in small groups using 3 computers:\n\n1. one computer to open the quiz questions\n2. one computer with this README open as a reference\n3. a third computer with the `./cat-detector.js`\n\nHere are all the language features used in The Cat Detector:\n\n- [Strict Mode](#strict-mode)\n- [Comments](#comments)\n- [Logs](#logs)\n- [Primitives](#primitives)\n    - [Strings](#strings)\n    - [Booleans](#booleans)\n    - [Null](#null)\n- [Operators](#operators)\n    - [Strict Equality](#strict-equality)\n    - [Strict Inequality](#strict-inequality)\n    - [String Concatenation](#string-concatenation)\n    - [Assignment Operator](#assignment-operator)\n- [Variables](#variables)\n    - [Declaring and Initializing](#declaring-and-initializing)\n    - [Reading](#reading)\n    - [Assigning](#assigning)\n    - [Built-In Global Variables](#built-in-global-variables)\n- [User Interactions](#user-interactions)\n    - [Alert](#alert)\n    - [Prompt](#prompt)\n    - [Interactions vs. Logs](#interactions-vs-logs)\n- [Control Flow](#control-flow)\n    - [`if`/`else`](#ifelse)\n    - [`while`](#while)\n- [That's all!](#thats-all)\n\n---\n\n## Strict Mode\n\nThis will be at the top of every program, just ignore it for now. you'll learn more about\nit later.\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n```\n\n</details>\n\n---\n\n## Comments\n\nComments are there to leave notes in the source code for a developer to read. The computer\nwill ignore comments and the user won't know they're there.\n\nYou will come across two kinds of comments:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\n// a single-line (inline) comment\n\n/*\n  a multi-line comment\n  also called a \"block comment\"\n*/\n```\n\n</details>\n\n---\n\n## Logs\n\nlogs print information in the console to help developers understand what happened in the\nprogram:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\n// you can log one thing at a time\nconsole.log('hello');\nconsole.log('...');\nconsole.log('good bye');\n\n// or you log more than one thing using commas\nconsole.log('hello', '...', 'good bye');\n```\n\n</details>\n\n---\n\n## Primitives\n\nPrograms are all about data: storing it, changing it, showing it to users, getting it from\nusers. Primitives are the basic pieces of data in a JavaScript program. Each primitive has\ntwo important aspects:\n\n- **Type**: There are multiple types, each primitive belongs to only one type. You can\n  think of _types_ as a category like \"fruits\" or \"vegetables\".\n- **Value**: There can be more than one value within each type, just like there are\n  different fruits or different vegetables. (You won't cover these in this module.)\n\nThis diagram might help to see the big picture:\n\n<details>\n<summary>data types diagram</summary>\n<br>\n\n- **Primitive Types**: The basic units of data in a program, like the individual fruits\n  and vegetables when you go shopping.\n- **Composite/Non-Primitive Types**: Structures that _store_ and _organize_ data, like the\n  basket you use to carry your groceries.\n\n![data types diagram](../assets/data-types.jpeg)\n\n</details>\n\nThese are the three primitives you will find in The Cat Detector:\n\n---\n\n### Strings\n\nStrings are the type used to store text, every string value must begin and end with\nquotes:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('this is a string');\nconsole.log('this IS ALSO a \"string\" !!!');\n\n// you can use '\\n' to make a new line inside a string\nconsole.log('line 1 \\nline 2 \\nline 3');\n\n// an empty string, but still a string!\nconsole.log('');\n```\n\n</details>\n\n---\n\n### Booleans\n\nBooleans are used the type for yes/no or on/off. There are only two boolean values, `true`\nand `false`:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log(true);\nconsole.log(false);\n\n// true/false and the strings 'true'/'false' are not the same thing!\nconsole.log('true');\nconsole.log('false');\n```\n\n</details>\n\n---\n\n### Null\n\nNull is a strange thing that you will learn more about later. For now you can think of\n`null` as the only value in it's own type.\n\nIn The Cat Detector `null` is just used to mean \"nothing\", the user did not provide any\ndata for the program:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log(null);\n\n// null and the string 'null' are not the same thing!\nconsole.log('null');\n```\n\n</details>\n\n---\n\n## Operators\n\nOperators combine values to produce a new value. There are many operators in JS, but these\nare the only ones you need for The Cat Detector:\n\n---\n\n### Strict Equality\n\nThe `_ === _` operator checks if two values have **the same** type _and_ value:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-> strict equality:  ===  ');\n//  checks if two values have the same type AND value\n//  it will evaluate to either true or false\n\n// comparing booleans\nconsole.log(true === true); // true\nconsole.log(true === false); // false\nconsole.log(false === true); // false\nconsole.log(false === false); // true\n\n// strings must be exactly the same for a comparison to be true\nconsole.log('hello' === 'hello'); // true\nconsole.log('hello' === 'HELLO'); // false\n\n// comparing across types is always false\n//  even if they look like they might be the same thing\nconsole.log(null === 'null'); // false\nconsole.log(true === 'true'); // false\nconsole.log(false === 'false'); // false\n\n// it does not matter on which side you put the values\nconsole.log('HELLO' === 'hello'); // false\nconsole.log(null === 'null'); // false\nconsole.log(true === 'true'); // false\nconsole.log(false === 'false'); // false\n```\n\n</details>\n\n---\n\n### Strict Inequality\n\nThe `_ !== _` operator checks if two values have **different** types _or_ values:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-> strict inequality:  !==  ');\n//  checks if two values have different types or value\n//  it will evaluate to either true or false\n//  it's the opposite of strict equality\n\n// comparing booleans\nconsole.log(true !== true); // false\nconsole.log(true !== false); // true\nconsole.log(false !== true); // true\nconsole.log(false !== false); // false\n\n// strings must be exactly the same for a comparison to be true\nconsole.log('hello' !== 'hello'); // false\nconsole.log('hello' !== 'HELLO'); // true\n\n// comparing across types is always false\nconsole.log(null !== 'null'); // true\nconsole.log(true !== 'true'); // true\nconsole.log(false !== 'false'); // true\n\n// it does not matter on which side you put the values\nconsole.log('HELLO' !== 'hello'); // true\nconsole.log('null' !== null); // true\nconsole.log('true' !== true); // true\nconsole.log('false' !== false); // true\n```\n\n</details>\n\n---\n\n### String Concatenation\n\nThe `_ + _` operator combines two string values into one string value:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-> string concatenation:  +  ');\n// combines multiple strings into a single string\n// the \"trace\" button will help see the difference\n\n// logs the 3 strings separately\nconsole.log('a', 'b', 'c');\n\n// combines 3 strings into 1 string then prints 1 string\n// this happens in two steps:\n//  'a' + 'b' -> 'ab'\n//  'ab' + 'c' -> 'abc'\nconsole.log('a' + 'b' + 'c');\n```\n\n</details>\n\n---\n\n### Assignment Operator\n\nThe assignment operator is used to initialize variables (`let _ = _;`) or assign them new\nvalues (`_ = _`). You'll study this operator in the next section about ...\n\n---\n\n## Variables\n\nVariables are [like boxes](https://www.youtube.com/watch?v=Jvrszgiexg0) you can use to\nstore data in your programs. (_That video uses `var` but these programs use `let`. For now\nyou can think of them as the same thing._)\n\nThere is a lot to know about variables, but for The Cat Detector you only need to know\nthis:\n\n---\n\n### Declaring and Initializing\n\nTo create a new variable in your program you need to _declare_ it using `let`, you cannot\nuse a variable before it is declared.\n\nYou can assign an initial value to a variable when you declare it, this is the first value\nthat will be stored in your variable:\n\n![variable diagram](../assets/variable-declare-initialize.jpg)\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- declare and initialize --');\n\n// declare the variable and initialize it's value\nlet userName = 'Joe';\n\n// read the value and log it to the console\nconsole.log(userName); // 'Joe'\n```\n\n</details>\n\n---\n\n### Reading\n\nYou can read the value stored in a variable, reading the value _does not_ change what is\nstored in the variable:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- reading --');\n\n// declare the variable and initialize it's value\nlet favoriteColor = 'orange';\n// read the value and log it to the console\nconsole.log(favoriteColor); // 'orange'\n\n// read the value from `favoriteColor` and use it to initialize `message`\n//  notice! `favoriteColor` is read BEFORE `message` is initialized\nlet message = 'your favorite color is ' + favoriteColor;\n// read the value from `message` and log it to the console\nconsole.log(message);\n\n// `favoriteColor` still stores the same value:\nconsole.log(favoriteColor);\n```\n\n</details>\n\n---\n\n### Assigning\n\nYou can change the value stored in a variable by _assigning_ a new value.\n\nCareful! Variables are _dynamic_, their values can change during program execution. What\nyou see written in the source code may not always be what is stored in a variable.\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- assigning --');\n\nlet favoriteColor = 'orange';\nconsole.log(favoriteColor); // 'orange'\n\n// assign a new value to `favoriteColor`\nfavoriteColor = 'blue';\nconsole.log(favoriteColor); // 'blue'\n\nlet message = 'your favorite color is ' + favoriteColor;\n// what value will be logged to the console? why?\nconsole.log(message); // ???\n\n// what value is stored in `favoriteColor`? why?\nconsole.log(favoriteColor); // ???\n```\n\n</details>\n\n---\n\n### Built-In Global Variables\n\nJavaScript programs have some _global variables_ built into the runtime environment. You\ncan use these variables without declaring them.\n\nThere are many, but you will only encounter 3 of them in these programs:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- global variables --');\n\n// -- console --\n// console is a global variable storing an object\n//  the object contains helpful functions for developers:\nconsole.log(console);\n\n// -- alert --\n// alert is a global variable storing a function\nconsole.log(alert);\n\n// -- prompt --\n// prompt is a global variable storing a function\nconsole.log(prompt);\n\n/*\n  PS. you will learn more about objects and functions later\n    for now this is all you need to know\n*/\n```\n\n</details>\n\n---\n\n## User Interactions\n\nComputer programs are often written for a user, user-centred applications need some way to\ncommunicate with the user. This communication goes two-ways:\n\n- The computer can display information for the user\n- The user can input data for the program to use\n\nIn The Cat Detector you will be find two different user interactions:\n\n---\n\n### Alert\n\nAlert just displays text for the user to read, the user cannot input any data to your\nprogram with `alert`.\n\nThe program wil pause until the user clicks \"ok\":\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- alert --');\n\nalert('hello! welcome to this boring program.');\n\nalert('all done.');\n```\n\n</details>\n\n---\n\n### Prompt\n\n`prompt` allows a user to input data to your program, they have two options:\n\n- if the user clicks \"ok\", the text they typed will be returned as a string\n- if the user clicks \"cancel\", `null` is returned\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- prompt --');\n\nalert(\n\t'hello! welcome to this boring program, run it a few times to learn about `prompt`'\n);\n\n// encourage the user to explore their options\nlet userInput = prompt(\n\t'try each of these input combinations:\\n' +\n\t\t'- type something and click \"ok\"\\n' +\n\t\t'- type nothing and click \"ok\"\\n' +\n\t\t'- type something and click \"cancel\"\\n' +\n\t\t'- type nothing and click \"cancel\"\\n'\n);\n\n// log the user's input for the developer to see\nconsole.log(userInput);\n\nalert('check your console to see what data you put into the program.');\n```\n\n</details>\n\n---\n\n### Interactions vs. Logs\n\nThere is one more important difference between an interaction (`alert`, `prompt`) and\n`console.log`. Logging to the console will show more information about _types_ and will\nshow from which line the log was printed. This extra information is very useful to\ndevelopers but not important for users:\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- interactions vs. logs --');\n\n/* --- different types --- */\n\n// alerting true or 'true' looks exactly the same to a user\nalert(true);\nalert('true');\n\n// logging these values to the console looks different!\n//  also, see the info to the right of these logs in the console?\n//  try clicking on that and seeing what happens\nconsole.log(true);\nconsole.log('true');\n\n/* --- multiple values --- */\n\n// you cannot alert multiple values, users just need one message\nalert('hello', true);\n\n// you can log more than one value, they are all colored differently\n//  this can be very helpful for a developer\nconsole.log('hello', true);\n```\n\n</details>\n\n---\n\n## Control Flow\n\nControl flow is how you can instruct the computer to different things depending on what\ndata is currently stored in memory. There are only three control flow structures you will\nneed for The Cat Detector:\n\n---\n\n### `if`/`else`\n\nAn `if`/`else` statement allows you to give the computer two possible instructions. One to\nuse if a condition is true, the other if the condition is false:\n\n1. Evaluate the condition in the parenthesis\n    - If the condition is true, execute the code in the `if` block\n    - Otherwise execute the `else` block\n2. Move on to the next line after the block\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- if/else --');\n\nlet userInput = prompt('please do not cancel');\nconsole.log(userInput);\n\nif (userInput === null) {\n\t// this code is executed if the user canceled\n\talert('you canceled :(');\n} else {\n\t// this code is executed if the user clicks \"ok\"\n\talert('thank you for your input: ' + userInput);\n}\n\nalert('all done!');\n```\n\n</details>\n\n---\n\n### `while`\n\nA `while` statement will repeat a block of code _as long as_ the condition is true:\n\n1. Evaluate the condition in the parenthesis\n    - If the condition is true, execute the code in the block\n    - Otherwise skip to step 2 without executing the block\n2. Move on to the next line after the block\n\n<details>\n<summary>example code</summary>\n<br>\n\n```js\n'use strict';\n\nconsole.log('-- while --');\n\nlet userInput = null;\n\nwhile (userInput === null) {\n\tuserInput = prompt('do not cancel, there is no escape');\n\tconsole.log(userInput);\n}\n\nalert('thank you for your input: ' + userInput);\n```\n\n</details>\n\n---\n\n## That's all\n\nThere is much more to learn, but nothing more in The Cat Detector.\n"},{"name":"cat-detector.js","type":"file","ext":".js","base":"cat-detector","dir":"8-review-quiz","path":"/8-review-quiz/cat-detector.js","lang":".js","content":"'use strict';\n\n/* Cat Detector\n\n  This programs prompts the user to input a cat,\n  and lets them know if they did input a cat or not.\n\n  Data In:\n    ???\n\n  Data Out:\n    ???\n\n  Test Cases:\n    ???\n\n\n  PS. try the \"ask me\" button!\n*/\n\n/* --- ??? --- */\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('please enter \"cat\"');\n}\n\n/* --- ??? --- */\n\nlet message = '';\nif (input !== 'cat') {\n\tmessage = '\"' + input + '\" is not a cat';\n} else {\n\tmessage = 'thank you for the cat';\n}\n\n/* --- ??? --- */\n\nalert(message);\n"}]},{"name":"9-for-of-loops","type":"directory","path":"/9-for-of-loops","children":[{"name":"1-isolate","type":"directory","path":"/9-for-of-loops/1-isolate","children":[{"name":"0-one-at-a-time.js","type":"file","ext":".js","base":"0-one-at-a-time","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/0-one-at-a-time.js","lang":".js","content":"'use strict';\n\nlet animal = 'dog';\n// let animal = 'cat';\n// let animal = 'horse';\n// let animal = 'fish';\n// let animal = 'whale';\n// let animal = 'elephant';\n// let animal = 'snake';\n// let animal = 'dove';\n\nfor (let letter of animal) {\n\tconsole.log(letter);\n}\n"},{"name":"1-reverse-a-string.js","type":"file","ext":".js","base":"1-reverse-a-string","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/1-reverse-a-string.js","lang":".js","content":"'use strict';\n\nlet languageName = 'JavaScript';\n\nlet reversedName = '';\nfor (let character of languageName) {\n\treversedName = character + reversedName;\n}\n\nconsole.log(reversedName === 'tpircSavaJ');\n"},{"name":"1-reverse.js","type":"file","ext":".js","base":"1-reverse","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/1-reverse.js","lang":".js","content":"'use strict';\n\nlet animal = 'cat';\n// let animal = 'horse';\n// let animal = 'fish';\n// let animal = 'whale';\n// let animal = 'elephant';\n// let animal = 'snake';\n// let animal = 'dove';\n\nlet reversed = '';\nfor (let letter of animal) {\n\treversed = letter + reversed;\n}\n\nconsole.log(animal + ' -> ' + reversed);\n"},{"name":"2-bigger-animals.js","type":"file","ext":".js","base":"2-bigger-animals","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/2-bigger-animals.js","lang":".js","content":"'use strict';\n\nlet animal = 'dog';\n// let animal = 'cat';\n// let animal = 'horse';\n// let animal = 'fish';\n// let animal = 'whale';\n// let animal = 'elephant';\n// let animal = 'snake';\n// let animal = 'dove';\n\nlet bigAnimal = '';\nfor (let letter of animal) {\n\tlet upperCase = letter.toUpperCase();\n\tbigAnimal = bigAnimal + upperCase;\n}\n\nconsole.log(bigAnimal);\n"},{"name":"2-double-characters.js","type":"file","ext":".js","base":"2-double-characters","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/2-double-characters.js","lang":".js","content":"'use strict';\n\nlet animal = 'dog';\n// let animal = 'cat';\n// let animal = 'horse';\n// let animal = 'fish';\n// let animal = 'whale';\n// let animal = 'elephant';\n// let animal = 'snake';\n// let animal = 'dove';\n\nlet doubled = '';\nfor (let character of animal) {\n\tdoubled = doubled + character + character;\n}\n\nconsole.log(animal + ' -> ' + doubled);\n"},{"name":"2-double-it.js","type":"file","ext":".js","base":"2-double-it","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/2-double-it.js","lang":".js","content":"'use strict';\n\nlet string = '_-|-_';\n\nlet doubled = '';\nfor (let character of string) {\n\tdoubled = doubled + character + character;\n}\n\nconsole.log(doubled === '__--||--__');\n"},{"name":"3-has-a-vowel.js","type":"file","ext":".js","base":"3-has-a-vowel","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/3-has-a-vowel.js","lang":".js","content":"'use strict';\n\nlet letters = 'xyz';\n// let letters = 'aeiou';\n// let letters = 'zaei';\n// let letters = 'aeiz';\n// let letters = 'xyza';\n// let letters = 'axyz';\n// let letters = '';\n\nlet hasAVowel = false;\n\nfor (let letter of letters) {\n\tif ('aeiou'.includes(letter)) {\n\t\thasAVowel = true;\n\t}\n}\n\nif (hasAVowel) {\n\tconsole.log('\"' + letters + '\" has at least one vowel');\n} else {\n\tconsole.log('\"' + letters + '\" does not have any vowels');\n}\n"},{"name":"3-has-no-vowels.js","type":"file","ext":".js","base":"3-has-no-vowels","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/3-has-no-vowels.js","lang":".js","content":"'use strict';\n\nlet letters = 'xyz';\n// let letters = 'aeiou';\n// let letters = 'zaei';\n// let letters = 'aeiz';\n// let letters = 'xyza';\n// let letters = 'axyz';\n// let letters = '';\n\nlet noVowels = true;\n\nfor (let letter of letters) {\n\tif ('aeiou'.includes(letter)) {\n\t\tnoVowels = false;\n\t}\n}\n\nif (noVowels) {\n\tconsole.log('\"' + letters + '\" has no vowels');\n} else {\n\tconsole.log('\"' + letters + '\" has at least one vowel');\n}\n"},{"name":"3-remove-vowels.js","type":"file","ext":".js","base":"3-remove-vowels","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/3-remove-vowels.js","lang":".js","content":"'use strict';\n\nlet before = 'abcdefghijklmnopqrstuvwxyz';\n\nlet vowels = 'aeiou';\n\nlet after = '';\nfor (let letter of before) {\n\tif (!vowels.includes(letter)) {\n\t\tafter = after + letter;\n\t}\n}\n\nconsole.log(after === 'bcdfghjklmnpqrstvwxyz');\n"},{"name":"4-big-little-big.js","type":"file","ext":".js","base":"4-big-little-big","dir":"9-for-of-loops/1-isolate","path":"/9-for-of-loops/1-isolate/4-big-little-big.js","lang":".js","content":"'use strict';\n\nlet before = 'camel';\n\nlet after = '';\n\nlet upperCase = false;\nfor (let char of before) {\n\tif (upperCase) {\n\t\tafter = after + char.toUpperCase();\n\t} else {\n\t\tafter = after + char.toLowerCase();\n\t}\n\tupperCase = !upperCase;\n}\n\nconsole.log(after === 'cAmEl');\n"}]},{"name":"2-strategies","type":"directory","path":"/9-for-of-loops/2-strategies","children":[{"name":"1-character-by-character.js","type":"file","ext":".js","base":"1-character-by-character","dir":"9-for-of-loops/2-strategies","path":"/9-for-of-loops/2-strategies/1-character-by-character.js","lang":".js","content":"// Character-by-Character: Iterate through a string one character at a time\n\n'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter a string:');\n}\n\nlet result = '';\nfor (let char of input) {\n\tresult = result + char + '-';\n}\nalert(result.slice(0, -1));\n"},{"name":"2-counting-chars.js","type":"file","ext":".js","base":"2-counting-chars","dir":"9-for-of-loops/2-strategies","path":"/9-for-of-loops/2-strategies/2-counting-chars.js","lang":".js","content":"// Counting Characters: Count occurrences of a specific character\n\n'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter a string:');\n}\n\nlet target = null;\nwhile (target === null) {\n\ttarget = prompt('enter a character to count:');\n}\n\nlet count = 0;\nfor (let char of input) {\n\tif (char === target) {\n\t\tcount = count + 1;\n\t}\n}\nalert('found ' + count + ' ' + target + '(s)');\n"},{"name":"3-reversing-string.js","type":"file","ext":".js","base":"3-reversing-string","dir":"9-for-of-loops/2-strategies","path":"/9-for-of-loops/2-strategies/3-reversing-string.js","lang":".js","content":"// Reversing String: Build a reversed copy of the input\n\n'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter a string:');\n}\n\nlet reversed = '';\nfor (let char of input) {\n\treversed = char + reversed;\n}\nalert(reversed);\n"},{"name":"4-finding-first.js","type":"file","ext":".js","base":"4-finding-first","dir":"9-for-of-loops/2-strategies","path":"/9-for-of-loops/2-strategies/4-finding-first.js","lang":".js","content":"// Finding First: Find the first occurrence of a character\n\n'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter a string:');\n}\n\nlet target = null;\nwhile (target === null) {\n\ttarget = prompt('enter a character to find:');\n}\n\nlet found = false;\nlet position = 0;\n\nfor (let char of input) {\n\tif (char === target && !found) {\n\t\tfound = true;\n\t}\n\tposition = position + 1;\n}\n\nif (!found) {\n\talert('found ' + target + ' at position ' + position);\n} else {\n\talert('did not find ' + target);\n}\n"},{"name":"5-removing-chars.js","type":"file","ext":".js","base":"5-removing-chars","dir":"9-for-of-loops/2-strategies","path":"/9-for-of-loops/2-strategies/5-removing-chars.js","lang":".js","content":"'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter a string:');\n}\n\nlet target = null;\nwhile (target === null) {\n\ttarget = prompt('enter a character to remove:');\n}\n\nlet result = '';\nfor (let char of input) {\n\tif (char !== target) {\n\t\tresult = result + char;\n\t}\n}\nalert(result);\n"},{"name":"6-doubling-chars.js","type":"file","ext":".js","base":"6-doubling-chars","dir":"9-for-of-loops/2-strategies","path":"/9-for-of-loops/2-strategies/6-doubling-chars.js","lang":".js","content":"// Doubling Characters: Double each character in the string\n\n'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter a string:');\n}\n\nlet doubled = '';\nfor (let char of input) {\n\tdoubled = doubled + char + char;\n}\nalert(doubled);\n"}]},{"name":"3-integrate","type":"directory","path":"/9-for-of-loops/3-integrate","children":[{"name":"1-reverse-mirror.js","type":"file","ext":".js","base":"1-reverse-mirror","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/1-reverse-mirror.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null) {\n\ttext = prompt('enter some text, it will be mirrored');\n}\n\nlet reversed = '';\nfor (let character of text) {\n\treversed = character + text;\n}\n\nlet mirrored = text + '|' + reversed;\n\nalert(mirrored);\n"},{"name":"1-reverse.js","type":"file","ext":".js","base":"1-reverse","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/1-reverse.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null) {\n\ttext = prompt('enter some text to reverse');\n}\n\nlet reversed = '';\nfor (let letter of text) {\n\treversed = letter + reversed;\n}\n\nalert(text + ' -> ' + reversed);\n"},{"name":"2-bigger-animals.js","type":"file","ext":".js","base":"2-bigger-animals","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/2-bigger-animals.js","lang":".js","content":"'use strict';\n\nlet animal = null;\nwhile (animal === null) {\n\tanimal = prompt('enter an animal, it will become bigger');\n}\n\nlet bigAnimal = '';\nfor (let letter of animal) {\n\tlet upperCase = letter.toUpperCase();\n\tbigAnimal = bigAnimal + upperCase;\n}\n\nalert(animal + ' -> ' + bigAnimal);\n"},{"name":"2-double-characters.js","type":"file","ext":".js","base":"2-double-characters","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/2-double-characters.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null) {\n\ttext = prompt('enter some text, each character will be repeated');\n}\n\nlet doubled = '';\nfor (let character of text) {\n\tdoubled = doubled + character + character;\n}\n\nalert(text + ' -> ' + doubled);\n"},{"name":"2-mirror.js","type":"file","ext":".js","base":"2-mirror","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/2-mirror.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null) {\n\ttext = prompt('enter some text, it will be mirrored');\n}\n\nlet mirrored = '|';\nfor (let character of text) {\n\tmirrored = character + mirrored + character;\n}\n\nalert(mirrored);\n"},{"name":"3-has-a-vowel.js","type":"file","ext":".js","base":"3-has-a-vowel","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/3-has-a-vowel.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null) {\n\ttext = prompt('enter some text');\n}\n\nlet hasAVowel = false;\nfor (let letter of text) {\n\tif ('aeiouAEIOU'.includes(letter)) {\n\t\thasAVowel = true;\n\t}\n}\n\nlet message = '';\nif (hasAVowel) {\n\tmessage = '\"' + text + '\" has at least one vowel';\n} else {\n\tmessage = '\"' + text + '\" does not have any vowels';\n}\n\nalert(message);\n\n/*\n  - find all the variable declarations\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - does this program have a stepper variable?\n    - if so, what does it represent? how does it step?\n  - does this program have a boolean flag?\n    - if so, what does it represent? how is it toggled?\n  - how many loops are in this program?\n    - what is the role of each loop?\n  - what is most interesting to you about this program? or surprising? or confusing?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"3-has-no-consonants.js","type":"file","ext":".js","base":"3-has-no-consonants","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/3-has-no-consonants.js","lang":".js","content":"'use strict';\n\nlet letters = null;\nwhile (letters === null) {\n\tletters = prompt('enter some letters');\n}\n\nlet noConsonants = true;\nfor (let letter of letters) {\n\tlet lowerCaseLetter = letter.toLowerCase();\n\tif ('bcdfghjklmnpqrstvwxyz'.includes(lowerCaseLetter)) {\n\t\tnoConsonants = false;\n\t}\n}\n\nlet message = '';\nif (noConsonants) {\n\tmessage = '\"' + letters + '\" has no consonants';\n} else {\n\tmessage = '\"' + letters + '\" has at least one consonant';\n}\n\nalert(message);\n\n/*\n  - find all the variable declarations\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - does this program have a stepper variable?\n    - if so, what does it represent? how does it step?\n  - does this program have a boolean flag?\n    - if so, what does it represent? how is it toggled?\n  - how many loops are in this program?\n    - what is the role of each loop?\n  - what is most interesting to you about this program? or surprising? or confusing?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"3-has-no-vowels.js","type":"file","ext":".js","base":"3-has-no-vowels","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/3-has-no-vowels.js","lang":".js","content":"'use strict';\n\nlet text = null;\nwhile (text === null) {\n\ttext = prompt('enter some text');\n}\n\nlet noVowels = true;\nfor (let letter of text) {\n\tif ('aeiouAEIOU'.includes(letter)) {\n\t\tnoVowels = false;\n\t}\n}\n\nlet message = '';\nif (noVowels) {\n\tmessage = '\"' + text + '\" has no vowels';\n} else {\n\tmessage = '\"' + text + '\" has at least one vowel';\n}\n\nalert(message);\n\n/*\n  - find all the variable declarations\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - does this program have a stepper variable?\n    - if so, what does it represent? how does it step?\n  - does this program have a boolean flag?\n    - if so, what does it represent? how is it toggled?\n  - how many loops are in this program?\n    - what is the role of each loop?\n  - what is most interesting to you about this program? or surprising? or confusing?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"},{"name":"3-no-repeats.js","type":"file","ext":".js","base":"3-no-repeats","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/3-no-repeats.js","lang":".js","content":"'use strict';\n\nlet phrase = '';\nwhile (phrase === '' || phrase === null) {\n\tphrase = prompt('enter some text');\n}\n\nlet noRepeats = '';\nfor (let character of phrase) {\n\tif (!noRepeats.includes(character)) {\n\t\tnoRepeats = noRepeats + character;\n\t}\n}\n\nalert('\"' + phrase + ' -> \"' + noRepeats + '\"');\n"},{"name":"3-remove-vowels.js","type":"file","ext":".js","base":"3-remove-vowels","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/3-remove-vowels.js","lang":".js","content":"'use strict';\n\nlet letters = null;\nwhile (letters === null) {\n\tletters = prompt('enter some letters');\n}\n\nlet noVowels = '';\nfor (let character of letters) {\n\tif (!'aeiouAEIOU'.includes(character)) {\n\t\tnoVowels = noVowels + character;\n\t}\n}\n\nalert(letters + ' -> ' + noVowels);\n"},{"name":"4-remove-spaces.js","type":"file","ext":".js","base":"4-remove-spaces","dir":"9-for-of-loops/3-integrate","path":"/9-for-of-loops/3-integrate/4-remove-spaces.js","lang":".js","content":"'use strict';\n\nlet input = null;\n\nlet hasSpaces = false;\nwhile (!hasSpaces) {\n\tinput = prompt(\n\t\t'enter something with at least one space, the spaces will be removed'\n\t);\n\n\tif (input === null) {\n\t\talert('no escape');\n\t} else if (input === '') {\n\t\talert('gotta enter something');\n\t} else if (!input.includes(' ')) {\n\t\talert('there must be a space!');\n\t} else {\n\t\thasSpaces = true;\n\t}\n}\n\nlet spaceless = '';\nfor (let character of input) {\n\tif (character !== ' ') {\n\t\tspaceless = spaceless + character;\n\t}\n}\n\nalert(input + ' -> ' + spaceless);\n\n/*\n  - find all the variable declarations\n  - mark each variable use with a different color (like in the ?variables lens)\n  - use lines to connect each variable declaration to it's uses\n  - what strategy was used for the input loop?\n  - describe how the for-of loop creates a new string with no spaces\n  - what is most interesting to you about this program? or surprising? or confusing?\n  - do you find this program or the other `remove-spaces` easier to read?\n\n  done with these questions?  try \"ask me\" and \"random line\"\n*/\n"}]},{"name":"4-quiz","type":"directory","path":"/9-for-of-loops/4-quiz","children":[{"name":"filter-1.md","type":"file","ext":".md","base":"filter-1","dir":"9-for-of-loops/4-quiz","path":"/9-for-of-loops/4-quiz/filter-1.md","lang":".md","content":"# Quiz\n\n## Filter 1\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tif (c.toLowerCase() !== c) {\n\t\tb = b + c;\n\t}\n}\n\nalert(b);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tif (c.toUpperCase() === c) {\n\t\tb = b + c;\n\t}\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Yup!\n\n</details>\n"},{"name":"filter-2.md","type":"file","ext":".md","base":"filter-2","dir":"9-for-of-loops/4-quiz","path":"/9-for-of-loops/4-quiz/filter-2.md","lang":".md","content":"# Quiz\n\n## Filter 2\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '0123456789';\n\nlet c = '';\nfor (let d of a) {\n\tif (b.includes(d)) {\n\t\tc = c + d;\n\t}\n}\n\nalert(c);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tif (\n\t\tc === '0' ||\n\t\tc === '1' ||\n\t\tc === '2' ||\n\t\tc === '3' ||\n\t\tc === '4' ||\n\t\tc === '5' ||\n\t\tc === '6' ||\n\t\tc === '7' ||\n\t\tc === '8' ||\n\t\tc === '9'\n\t) {\n\t\tb = b + c;\n\t}\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Yup!\n\n</details>\n"},{"name":"filter-3.md","type":"file","ext":".md","base":"filter-3","dir":"9-for-of-loops/4-quiz","path":"/9-for-of-loops/4-quiz/filter-3.md","lang":".md","content":"# Quiz\n\n## Filter 3\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tif (!b.includes(c)) {\n\t\tb = b + c;\n\t}\n}\n\nalert(b);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tif (!a.includes(c)) {\n\t\tb = b + c;\n\t}\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\n</details>\n"},{"name":"map-1.md","type":"file","ext":".md","base":"map-1","dir":"9-for-of-loops/4-quiz","path":"/9-for-of-loops/4-quiz/map-1.md","lang":".md","content":"# Quiz\n\n## Map 1\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tif (c.toUpperCase() === c) {\n\t\tb = b + c.toLowerCase();\n\t} else {\n\t\tb = b + c.toUpperCase();\n\t}\n}\n\nalert(b);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tlet d = c !== c.toLowerCase();\n\tif (d) {\n\t\tb = b + c.toUpperCase();\n\t} else {\n\t\tb = b + c.toLowerCase();\n\t}\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\n</details>\n"},{"name":"map-2.md","type":"file","ext":".md","base":"map-2","dir":"9-for-of-loops/4-quiz","path":"/9-for-of-loops/4-quiz/map-2.md","lang":".md","content":"# Quiz\n\n## Map 1\n\nDo these programs have the same behavior? (_data in, data out_)\n\n<table>\n<tr>\n<td>\n\n### Program 1\n\n</td>\n<td>\n\n### Program 2\n\n</td>\n</tr>\n<tr>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tb = c + b;\n}\n\nalert(b);\n```\n\n</td>\n<td>\n\n```js\n'use strict';\n\nlet a = null;\nwhile (a === null) {\n\ta = prompt('');\n}\n\nlet b = '';\nfor (let c of a) {\n\tb = b + c;\n\tb = b[b.length - 1] + b.slice(0, b.length - 1);\n}\n\nalert(b);\n```\n\n</td>\n</tr>\n</table>\n\n---\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Yup!\n\n</details>\n"},{"name":"mirrorize.md","type":"file","ext":".md","base":"mirrorize","dir":"9-for-of-loops/4-quiz","path":"/9-for-of-loops/4-quiz/mirrorize.md","lang":".md","content":"# Quiz\n\n## Mirrorize\n\nWhich line can be placed in the blank to make a loop that mirrors the input?\nThere may be more than 1 correct answer!\n\n> _hint_: use a trace table to study each program's behavior before making a\n> guess.\n\n```js\n'use strict';\n\nlet text = 'abc';\n\nlet mirrored = '|';\nfor (let char of text) {\n\t__;\n}\n\nconsole.log(mirrored); // 'cba|abc'\n```\n\n---\n\n<details>\n<summary>A: <code>mirrored = char + mirrored;</code></summary>\n<br>\n\n✖ Nope.\n\nClose! This is line contains one half of the correct solution.\n\nThis is how you _reverse_ a string. The characters from `\"abc\"` will be added in\norder to the _front_ of the `mirrored` string. The final log will be:\n\n- `\"cba|\"`\n\n</details>\n\n---\n\n<details>\n<summary>B: <code>mirrored = mirrored + char;</code></summary>\n<br>\n\n✖ Nope.\n\nClose! This is line contains one half of the correct solution.\n\nThis line of code will just rebuild the original text one character at a time,\nadding each one to the _end_ of the growing string. The final log will be:\n\n- `\"|abc\"`\n\n</details>\n\n---\n\n<details>\n<summary>C: <code>mirrored = char + mirrored + char;</code></summary>\n<br>\n\n✔ Correct!\n\nWith each iteration, this line of code will add the same character to both end\nof the `mirrored` string. The final result will be a string with the reversed\ntext on the left, and the original text on the right:\n\n- `\"cba|abc\"`\n\n</details>\n\n---\n\n<details>\n<summary>D: <code>mirrored = mirrored + char + mirrored;</code></summary>\n<br>\n\n✖ Nope.\n\nMuch cooler, but not correct. Can you figure out why the final log looks like\nthis?\n\n- `\"|a|b|a|c|a|b|a|\"`\n\n</details>\n"},{"name":"reverse-a-string.md","type":"file","ext":".md","base":"reverse-a-string","dir":"9-for-of-loops/4-quiz","path":"/9-for-of-loops/4-quiz/reverse-a-string.md","lang":".md","content":"# Quiz\n\n## Reverse a String\n\nWhich of the following programs will reverse the text and log `\"ydwoh\"`? There\nmay be more than one correct answer!\n\n> _hint_: use a trace table to study each program's behavior before making a\n> guess.\n\n---\n\n### Program 1\n\n```js\n'use strict';\n\nlet text = 'howdy';\n\nlet reversed = '';\nfor (let char of text) {\n\treversed = reversed + char;\n}\n\nconsole.log(reversed);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\nWith each iteration of the loop the program will add the next letter from\n`\"howdy\"` to the end of `reversed`. Because `reversed` starts out as an empty,\nby the end of the program it will just be `\"howdy\"`.\n\nThe final log will be:\n\n- `\"howdy\"`\n\n</details>\n\n---\n\n### Program 2\n\n```js\n'use strict';\n\nlet text = 'howdy';\n\nfor (let char of text) {\n\ttext = text + char;\n}\n\nconsole.log(text);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\nWith each iteration of the loop the program will add the next letter from\n`\"howdy\"` to the end of `text`. Because `text` starts out as `\"howdy\"`, by the\nend of the program it will be `\"howdyhowdy\"`.\n\nThe final log will be:\n\n- `\"howdyhowdy\"`\n\n</details>\n\n---\n\n### Program 3\n\n```js\n'use strict';\n\nlet text = 'howdy';\n\nlet reversed = '';\nfor (let char of text) {\n\treversed = char + reversed;\n}\n\nconsole.log(reversed);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✔ Correct!\n\nWith each iteration of the loop the program will add the next letter from\n`\"howdy\"` to the _beginning_ of `reversed`. Because `reversed` starts out as an\nempty string, by the end of the program it will be `\"ydwoh\"`.\n\nThe final log will be:\n\n- `\"ydwoh\"`\n\n</details>\n\n---\n\n### Program 4\n\n```js\n'use strict';\n\nlet text = 'howdy';\n\nfor (let char of text) {\n\ttext = char + text;\n}\n\nconsole.log(text);\n```\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n✖ Nope.\n\nWith each iteration of the loop the program will add the next letter from\n`\"howdy\"` to the _beginning_ of `text`. Because `text` starts out as `\"howdy\"`,\nby the end of the program it will be `\"ydwohhowdy\"`.\n\nThe final log will be:\n\n- `\"ydwohhowdy\"`\n\n</details>\n"}]},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"9-for-of-loops","path":"/9-for-of-loops/README.md","lang":".md","content":"# 🥚 `for-of`\n\nThe `for-of` loop is a convenient syntax for iterating through a string one\ncharacter at a time. You will declare a variable in the loop head and it will be\nassigned each character, one after the other.\n\nThe loop body will be executed once for each character in the string. With each\niteration the variable will be re-declared and reassigned with the next\ncharacter in the array. You can use the variable however you like inside the\nloop body.\n\n```js\n'use strict';\nconsole.log('-- for-of --');\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\nfor (let character of input) {\n\talert(character);\n}\n\n// input has not been changed!\nalert(input + '!');\n```\n\n---\n\n## Using `for-of`\n\nUnderstanding how a `for-of` loop works is not so difficult, but using them in a\nprogram can get tricky. Programs that use _iteration_ can be complicated to\nunderstand, even for experienced programmers!\n\nHere are a few small programs to give you an idea of what's possible. You'll\nstudy these programs again in this chapter so no worries if they don't make\nsense right away.\n\n<details>\n<summary>🥚 reverse a string</summary>\n\n```js\n'use strict';\nconsole.log('-- for-of: reverse a string --');\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\nlet reversed = '';\nfor (let character of input) {\n\treversed = character + reversed;\n}\n\nalert(input + ' -> ' + reversed);\n```\n\n</details>\n<details>\n<summary>🥚 remove vowels</summary>\n\n```js\n'use strict';\nconsole.log('-- for-of: remove vowels --');\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something, all vowels will be removed');\n}\n\nlet noVowels = '';\nfor (let character of input) {\n\tif (!'aeiouAEIOU'.includes(character)) {\n\t\tnoVowels = noVowels + character;\n\t}\n}\n\nalert(input + ' -> ' + noVowels);\n```\n\n</details>\n<details>\n<summary>🥚 check for vowels</summary>\n\n```js\n'use strict';\nconsole.log('-- for-of: check for vowels --');\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt(\n\t\t'enter something, the program will check if it has any vowels'\n\t);\n}\n\nlet hasVowels = false;\nfor (let character of input) {\n\tif ('aeiouAEIOU'.includes(character)) {\n\t\thasVowels = true;\n\t}\n}\n\nif (hasVowels) {\n\talert('\"' + input + '\" has vowels');\n} else {\n\talert('\"' + input + '\" does not have vowels');\n}\n```\n\n</details>\n"}]},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"","path":"/README.md","lang":".md","content":"# Welcome to Programming\n\nTake your first steps into programming by learning how to read, trace and understand small JavaScript program.\n"},{"name":"behavior-strategy-implementation.md","type":"file","ext":".md","base":"behavior-strategy-implementation","dir":"","path":"/behavior-strategy-implementation.md","lang":".md","content":"# Behavior, Strategy, Implementation\n\n3 different ways to understand the same program.\n\n<br/>\n\n![Behavior, Strategy, Implementation Tree](../assets/behavior-strategy-implementation.excalidraw.svg)\n\n<br/>\n\n## Behavior\n\nWhat does the program do? What are it’s inputs and it’s outputs? How does a uers interact\nwith it? Behavior is all about what your program looks like \"from the outside\", without\nlooking at a single line of code.\n\nProgram behavior can be described with a **user story**, **acceptance criteria**, and\n**input/output pairs** (_or_ **test cases**). Here are some examples describing the behavior\nof a `reverses-string.js` program:\n\n```js\n/*\n  -- USER STORY --\n  a user can input a non-empty string and only the letters will be turned into a mirror\n    -- ACCEPTANCE CRITERIA --\n    - given the user cancels, they will be prompted again\n    - given the input is empty, they will be prompted again\n    - given their input is valid, the loop will exit and the mirrored letters will be displayed\n  \n  -- INPUT/OUTPUT PAIRS --\n  test cases:\n    only letters:\n      'abc' -> 'abc|cba'\n      'hello' -> 'hello|olleh'\n      'JavaScript' -> 'JavaScript|tpircSavaJ'\n    only not-letters:\n      '.(-).' -> '|'\n      '-=>|<=-' -> '|'\n      '. - ^ - .' -> '|'\n    mixed letters and not-letters:\n      'hello!' -> 'hello|olleh'\n      'good bye?' -> 'goodbye|eybdoog'\n      'let input = \"\"' -> 'letinput|tupnitel'\n*/\n```\n\n## Strategy\n\nHow do you approach solving the problem? There are many strategies to solve the same\nproblem! A way to practice strategy is to think of transforming the arguments to the\nreturn value in small steps, _focusing on the data not the code_. This is the realm of\nflow charts, diagrams, and pseudo-code.\n\nOne way to approach strategy is to solve the problem a few different ways by hand, writing\nwhat you expect to change in memory at each step. Like if you were the debugger and you\ncouldn't see the source code. Using a pencil and paper is a the best way to go, pick a few\ntest cases and see how you'd solve them manually.\n\nHere are three possible strategies to approach mirroring a string. Each one is written as\nstep-by-step goals focusing on _what_ should happen at each step, not _how_ it will\nhappen. This type of comment is helpful to include in your code:\n\n### Reverse & Concatenate: _Strategy_\n\n```js\n// 1. get a string from the user\n// 2. create a new reversed copy of the strings\n// 3. combine the original string with the mirror string\n// 4. display the mirrored string to the user\n```\n\n### Iterate Backwards: _Strategy_\n\n```js\n// 1. get a string from the user\n// 2. create a string with only the \"|\" character\n// 3. iterate backwards over the string\n//\t\ta. append each character on both sides of the new string\n// 4. display the mirrored string to the user\n```\n\n### Reverse & Iterate: _Strategy_\n\n```js\n// 1. get a string from the user\n// 2. create a new reversed copy of the string\n// 3. create a string with only the \"|\" character\n// 4. iterate forwards over the reversed string\n// \t\ta. append each character to either side of the new string\n// 5. display the mirrored string to the user\n```\n\n## Implementation\n\nWhich language features and which lines of code did you use to code your strategy? There\nare many ways to implement the same strategy, and no single right answer! A good\nimplementation should be simple and clear, and help readers understand your strategy by\nusing helpful white space, variable names and comments (when necessary).\n\nBelow are 2 different implementations of each strategy described above, and some\ndiscussion questions:\n\n- Which implementation(s) do you think are the easiest to understand?\n- Do you think more comments are helpful or distracting?\n- Do you think long variables names are more helpful or distracting?\n- Which implementation do you think is better, and why?\n- How would you change the code to make it more understandable?\n\n### Reverse & Concatenate: _Implementations_\n\n```js\n// 1. get a string from the user\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\n// 2. create a new reversed copy of the strings\nlet reversed = '';\nfor (let nextChar of input) {\n\treversed = nextChar + reversed;\n}\n\n// 3. combine the original string with the mirror string\nlet mirrorederorrim = input + '|' + reversed;\n\n// 4. display the mirrored string to the user\nalert(mirrorederorrim);\n```\n\n```js\n// get a string from the users\nlet toMirror = null;\nwhile (toMirror === null) {\n\ttoMirror = prompt('Enter some text, it will be mirrored.');\n}\n\n// create a new backwards string\nlet mirrored = '';\nfor (let nextChar of toMirror) {\n\t// move each character from the end to the beginning\n\tmirrored = nextChar + mirrored;\n}\n\n// display your mirrorized string\nalert('Here is your mirrored text: ' + toMirror + '|' + mirrored);\n```\n\n### Iterate Backwards: _Implementations_\n\n```js\n// 1. get a string from the user\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\n// 2. create a string with only the \"|\" character\nlet mirrored = '|';\n\n// 3. iterate backwards over the string\nlet index = input.length - 1;\nwhile (index >= 0) {\n\t// a. append each character on both sides of the new string\n\tlet nextChar = input[index];\n\tmirrored = nextChar + mirrored + nextChar;\n\tindex = index - 1;\n}\n\n// 4. display the mirrored string to the user\nalert(mirrored);\n```\n\n```js\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\nlet mirrored = '|';\n\nlet count = 1;\nwhile (count <= input.length) {\n\tlet nextChar = input[input.length - count];\n\tmirrored = nextChar + mirrored + nextChar;\n\tcount = count + 1;\n}\n\nalert(mirrored);\n```\n\n### Reverse & Iterate: _Implementations_\n\n```js\n// 1. get a string from the user\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\n// 2. create a new reversed copy of the string\nlet reversed = '';\nfor (let nextChar of input) {\n\treversed = nextChar + reversed;\n}\n\n// 3. create a string with only the \"|\" character\nlet mirrored = '|';\n\n// 4. iterate forwards over the reversed string\nfor (let nextChar of reversed) {\n\t// a. append each character to either side of the new string\n\tmirrored = nextChar + mirrored + nextChar;\n}\n\n// 5. display the mirrored string to the user\nalert(mirrored);\n```\n\n```js\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter something');\n}\n\nlet reversed = '';\nlet i = 0;\nwhile (i < input.length) {\n\treversed = input[i] + reversed;\n\ti = i + 1;\n}\n\nlet mirrored = '|';\nfor (let nextChar of reversed) {\n\tmirrored = nextChar + mirrored + nextChar;\n}\n\nalert(mirrored);\n```\n"},{"name":"devtools-debugger","type":"directory","path":"/devtools-debugger","children":[{"name":"1-stepping-through.js","type":"file","ext":".js","base":"1-stepping-through","dir":"devtools-debugger","path":"/devtools-debugger/1-stepping-through.js","lang":".js","content":"'use strict';\n\n/* 🥚 Stepping Through\n\n  click the [debug] button to start the program in your debugger\n\n  see the little arrow at the top of the pane on the right?\n    it looks like this:  ->·\n    this evaluates one statement at a time\n\n  your challenge: step through to each commented line and pause\n    look around the debugger, what do you see?\n\n*/\n\nlet didClickOk = confirm('please click \"ok\":');\n\nif (didClickOk !== true) {\n\talert(':(');\n} else {\n\talert('thank you!');\n}\n"},{"name":"2-scope-panel.js","type":"file","ext":".js","base":"2-scope-panel","dir":"devtools-debugger","path":"/devtools-debugger/2-scope-panel.js","lang":".js","content":"'use strict';\n\n/* 🥚 Scope Panel\n\n  go through this program one step at a time and watch the Scopes panel\n    this shows you the CURRENT VALUE of each variable in your program\n  the Scope Panel is one of the most important tools you have to understand code\n\n  before pressing the \"step\" button:\n  - predict which line will be next\n  - predict what will change in the Scopes panel -->\n\n  after pressing the \"step\":\n  - were you right about which line was next?\n  - were you right about what changed in the Scopes panel? -->\n\n*/\n\nlet didClickOk = confirm('please click \"ok\":');\n\nlet message = '';\nif (didClickOk !== true) {\n\tmessage = ':(';\n} else {\n\tmessage = 'thank you!';\n}\n\nalert(message);\n"},{"name":"3-hovering-preview.js","type":"file","ext":".js","base":"3-hovering-preview","dir":"devtools-debugger","path":"/devtools-debugger/3-hovering-preview.js","lang":".js","content":"'use strict';\n\n/* 🥚 Hovering Previews\n\n  practice previewing expressions at different steps of execution\n  - variables: hover without highlighting\n  - expressions: highlight and hover\n\n  pause this program each time you reach the `if` check:\n  - highlighting one portion of the `if` check expression\n  - hover your mouse over it to see the value\n  - check the scopes panel to understand how the value was calculated\n\n*/\n\nlet didClickOk = confirm('please click \"ok\":');\n\nlet message = '';\n\n// try previewing the value of this conditional check:\n// 1. hover over `didClickOk` to see it's value\n// |----------|\n// 2. highlight the entire expression and hover over it\n// |-------------------|\nif (didClickOk !== true) {\n\tmessage = ':(';\n} else {\n\tmessage = 'thank you!';\n}\n\nalert(message);\n"},{"name":"4-continue-to-here.js","type":"file","ext":".js","base":"4-continue-to-here","dir":"devtools-debugger","path":"/devtools-debugger/4-continue-to-here.js","lang":".js","content":"'use strict';\n\n/* 🐣 Continue to Here\n\n  click the [debug] button to study this program in the debugger\n\n  then practice skipping ahead to the commented line:\n\n  1. right click the line number on the left in the debugger\n  2. select \"continue to here\"\n  3. look around in the debugger, what do you notice?\n      - which line is highlighted?\n      - what has changed in the panels on the right? -->\n  4. keep using \"continue to here\" on the same line\n      skipping ahead helps focus on specific details in the program\n      you no longer need to step through every line all the time\n      it also helps you avoid stepping past the line you want to study\n\n*/\n\nlet didClickOk = confirm('please click \"ok\":');\n\nlet message = '';\nif (didClickOk !== true) {\n\tmessage = ':(';\n} else {\n\tmessage = 'thank you!';\n}\n\nalert(message);\n"},{"name":"5-breakpoints.js","type":"file","ext":".js","base":"5-breakpoints","dir":"devtools-debugger","path":"/devtools-debugger/5-breakpoints.js","lang":".js","content":"'use strict';\n\n/* 🐣 Breakpoints\n\n  use the [debug] button to pause this program in the devtools\n\n  click on a line number to create a breakpoint\n    you can create as many as you want\n  you can now use the big blue triangle button -->\n    this button will skip ahead to the next breakpoint\n\n  breakpoints are saved in your devtools, not in your source code\n  you can change them while the program is running\n\n*/\n\nlet didClickOk = confirm('please click \"ok\":');\n\nlet message = '';\n// try setting a breakpoint on the conditional check\nif (didClickOk !== true) {\n\tmessage = ':(';\n} else {\n\tmessage = 'thank you!';\n}\n\nalert(message);\n"},{"name":"6-debugger-statement.js","type":"file","ext":".js","base":"6-debugger-statement","dir":"devtools-debugger","path":"/devtools-debugger/6-debugger-statement.js","lang":".js","content":"'use strict';\n\n/* 🐥 Debugger Statement\n\n  The `debugger` statement will make your program pause in the devtools\n\n  `debugger` statements are saved in your source code\n  you can not change them while the program is running\n\n  If you use `debugger`, the program will stop even if you use the [run] button\n\n*/\n\nlet didClickOk = confirm('please click \"ok\":');\n\nlet message = '';\ndebugger;\nif (didClickOk !== true) {\n\tmessage = ':(';\n} else {\n\tmessage = 'thank you!';\n}\n\nalert(message);\n"},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"devtools-debugger","path":"/devtools-debugger/README.md","lang":".md","content":"# Devtools Debugger\n\n- [Here is a video guide for setting up your devtools debugger.](https://denepo.js.org/welcome-to-js/3-understanding-programs/1-predicting-execution/devtool-setup.mp4)\n- The programs in this folder are designed to help you understand the debugger as you step\n  through the code.\n"}]},{"name":"errors","type":"directory","path":"/errors","children":[{"name":"README.md","type":"file","ext":".md","base":"README","dir":"errors","path":"/errors/README.md","lang":".md","content":"# Errors\n\nWhen something is wrong in your code that causes the program to stop.\n\n---\n\n## Program Life-Cycle\n\nWhen you run a program, there are actually two phases that happen behind the\nscenes:\n\n1. **Creation Phase**: The JS interpreter will \"read\" (parse) your code and\n   prepare the environment to execute your program.\n\n2. **Execution Phase**: Actually following your instructions, executing your\n   program one step at a time.\n\n---\n\n## Describing Errors\n\nTo search or ask for help when you have an error, you need to know how to\ndescribe the error:\n\n- **Environment**: Node + version? Browser? Which browser?\n\n- **Name**: The error's name logged in the console.\n\n- **Message**: The error's message logged in the console.\n\n- **Location**: The line & column where your error occurred.\n\n- **Life-Cycle**: Did it occur during creation or execution?\n\n---\n\n## Searching Errors Online\n\nWhen searching for help online, you want to use the information that is not\nspecific to _your_ program. This includes:\n\n- **Environment**: Node + version? Browser? Which browser?\n\n- **Name**: The error's name logged in the console.\n\n- **Message**: The error's message logged in the console.\n\n---\n\n## Finding Error Locations\n\nTo find where an error occurred in your debugger, click on the link to the right\nof the error message in your console:\n\n```js\n'use strict';\n\nconsole.log('--- in execution phase ---');\n\nlet x = 1;\n\nlet x = 2;\n```\n\n---\n\n## Pausing on Errors\n\nYou can also configure your devtools to pause on errors by clicking the stop\nsign in the upper right corner of your debugger. This will show you which values\nwere in memory when the error occurred:\n\n```js\n'use strict';\n\nconsole.log('--- in execution phase ---');\n\nlet input = 6;\n\nfor (let i of input) {\n\tconsole.log(i);\n}\n```\n\n---\n\n## Mistakes vs. Errors\n\nWhen fixing errors it's important to tell the difference between the _error_ in\nyour program and the _mistake_ in your code. Often the error will be on a\ndifferent line than your mistake:\n\n```js\n'use strict';\n\nconsole.log('--- in execution phase ---');\n\n// mistake: assigning null to input\nlet input = null;\n\n// error: accessing .length of null\nif (input.length < 5) {\n\tconsole.log('too short');\n} else {\n\tconsole.log('perfect');\n}\n```\n\n---\n\n## Fixing Errors\n\nFixing errors is not as simple as making the code run! Sometimes there will be\nmore than one way to fix an error, choosing the best option will take practice\nand experience:\n\n```js\n'use strict';\n\nconsole.log('--- in execution phase ---');\n\n/*\n  should the second variable be named `y`?\n  or should there only be one variable: `x = 2`?\n*/\n\nlet x = 1;\n\nlet x = 2;\n```\n\n---\n\n## The Exercises\n\nThere is bunch of code with errors. Practice finding the errors in the debugger,\ndescribing the errors, and fixing them. You will use this comment to organize\nyour notes:\n\n```js\n/*\n  environment:\n\n  name:\n  message:\n\n  location:\n\n  life cycle:\n\n  the mistake:\n\n  the fix(es):\n*/\n```\n"},{"name":"program-lifecycle.md","type":"file","ext":".md","base":"program-lifecycle","dir":"errors","path":"/errors/program-lifecycle.md","lang":".md","content":"# Fixing Errors\n\nProgram life cycle is the air JavaScript breaths, you may not notice it but it's\nalways there and it's pretty darned important. Taking the time to become\nfamiliar with the life-cycle of JS program will make it easier to debug your\ncode and to learn the tricker topics everyone's talking about; scope, errors,\nhoisting, strict mode, you name it.\n\nLearning to recognize the difference between your source code (simply a text\nfile) and the dynamic runtime of your program (values changing in memory) is a\ncritical skill. Before it 'clicks', it will be a mystery. After it 'clicks' it\nwill be almost simple. To understand a running program you need to be aware of\nthe life-cycle of a JS program:\n\n0. **Source Code**: the text file sitting in your computer's folder system. it\n   doesn't do anything, it's just like any other text file\n1. **Creation Phase**: before actually running your program, the javascript\n   parser will \"read\" your code and get everything ready to run your program\n   (without running the program!)\n2. **Execution Phase**: running your program! carrying out your instructions one\n   at a time\n\n---\n\n## 4 Principles\n\n1. **JavaScript Syntax**\n    - You can think of this like spelling, grammar & vocabulary. If you open\n      parenthesis, you must close them or the JS parser will not understand what\n      you wrote. If you use a symbol that JS doesn't support it will throw an\n      error. If you write anything that JS does not understand or write code that\n      JS does not allow, you will get a syntax error.\n    - Learning JS syntax means building your understanding of what is and isn't\n      allowed, then recognizing & fixing mistakes you make. This is just a lot of\n      memorization and attention to detail. Fortunately most modern code editors\n      have a lot of features to help you with this.\n2. **JavaScript Semantics**\n    - Just because your code has correct syntax doesn't mean everything is ok! It\n      is still possible for you to use correct syntax in incorrect ways. The\n      rules that define correct and incorrect usage are JS semantics.\n    - You can think of it like normal language. You may be using english words\n      that are spelled correctly, but that doesn't mean your grammar is correct!\n      \"Red dog woods running\"\n3. **Creation Phase** & **Execution Phase**\n    - _Creation phase_ is what happens before the program runs. JS will interpret\n      your code and prepare the program memory. Some types of error occur during\n      creation phase.\n    - _Execution Phase_ is everything that happens after the creation phase. This\n      is when JS executes your program one instruction at a time. Different\n      errors can occur in execution phase than in creation phase.\n4. **Errors**\n    - **creation phase errors**: Bad \"spelling\" or bad \"grammar\". Your program\n      can either not be understood by the JS parser, or made a mistake that the\n      parser was able to find without running your code. Your program will not\n      continue to the execution phase.\n    - **execution phase errors**: Commonly called \"runtime errors\". You made no\n      syntax errors and no semantic errors the parser could catch, so your\n      program entered execution phase. But somewhere in your program you\n      instructed JavaScript to do something that is not possible, maybe trying to\n      use a variable that wasn't declared.\n\n### All together\n\n| _Error Classifications_ |                                                                                               syntax error                                                                                                |                                                                                                        semantic error                                                                                                        |\n| :---------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|   **creation phase**    |                                    Bad spelling, the parser can't understand (or \"parse\") what you've written. Your program will not continue to the execution phase.                                     |                   The parser was able to parse your code, but you tried doing something the parser will not allow. An error is thrown before entering execution phase. (ie. reassigning a letant variable)                   |\n|   **execution phase**   | These are less common, generally by the time your program is running there are no syntax errors. But in some cases it is possible to have run-time syntax errors in JS, worry about that when it happens. | \"runtime errors\". You made no syntax errors, and no semantic errors the parser can catch. Instead you wrote a command JS doesn't allow and won't notice untill it tries to execute that line. (these are the hardest to fix) |\n\n---\n\n## The Exercises\n\nIn this chapter you will learn some simple steps you can take to find and\nunderstand the errors in your code. You'll learn to fill in all the blanks in\nthis comment:\n\n```js\n/*\n  environment:\n\n  name:\n  message:\nl\n  callstack:\n\n  life cycle:\n\n  the mistake:\n\n  the fix(es):\n*/\n```\n\nOnce you've gotten used to finding this information in your DevTools, you're\nready to fix errors in all your projects!\n\n---\n\n## Logic Errors\n\nLogic mistakes (or \"bugs\") are when your code runs without an error, but does\nnot do what you wanted it to. This is a different topic from Errors (when your\ncode breaks). Bugs and errors are often taught together, but are actually\ndifferent. Take a look at this funny video\n[comparing syntax & logic errors](https://www.youtube.com/watch?v=tV0tQisuxPo)\nto understand the difference by analogy. You can think of it like normal\nlanguage, a sentence can have good grammar but still make no sense: \"Dogs talk\nalmost as red as a bus.\"\n\nWhile fixing errors requires \"only\" a solid understanding of the JS Syntax and\nSemantics, plus some experience with the debugger. Fixing logic mistakes also\nrequires an understanding of debugging strategies, testing and strategic\nthinking. These exercises only cover Errors.\n\n---\n\n## Resources\n\n- [Describing Errors (class recording)](https://vimeo.com/530238051)\n- [creation phase & execution phase](https://www.youtube.com/watch?v=YID-HIdy1bk)\n- [syntax vs semantics](https://www.youtube.com/watch?v=vP-mn62EF0o)\n- [Syntax Parsers, Execution Contexts, and Lexical Environments](https://jsbeginners.com/understanding-the-weird-parts-notes-1/)\n- [different kinds of errors](https://education.launchcode.org/intro-to-professional-web-dev/chapters/errors-and-debugging/categories-of-errors.html)\n- JS Tutor snippets:\n    - [creation phase errors](https://goo.gl/1Psxu7)\n    - [creation phase errors](https://goo.gl/68af7H)\n    - [execution phase errors](https://goo.gl/WzbmNE)\n- [JS error reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors)\n- [JavaScript Engines](https://www.youtube.com/watch?v=BMKWdLX9w3M)\n- [errors vs. bugs vs. defects](https://www.youtube.com/watch?v=pqSB3MrUtD4)\n"}]},{"name":"flashcards","type":"directory","path":"/flashcards","children":[{"name":"0-for-developers","type":"directory","path":"/flashcards/0-for-developers","children":[{"name":"01.md","type":"file","ext":".md","base":"01","dir":"flashcards/0-for-developers","path":"/flashcards/0-for-developers/01.md","lang":".md","content":"# For Developers\n\nHow do you write an inline comment for developers to read that the computer will\nignore when running your code?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `// an inline comment`\n\n```js\n'use strict';\n\n// this program does nothing\n\n// all the lines are comments!\n```\n\n</details>\n"},{"name":"02.md","type":"file","ext":".md","base":"02","dir":"flashcards/0-for-developers","path":"/flashcards/0-for-developers/02.md","lang":".md","content":"# For Developers\n\nHow do you write a block comment (multiple lines) for developers to read that\nthe computer will ignore when running your code?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `/* a block comment */`\n\n```js\n'use strict';\n\n/*\n  this program does nothing\n\n  all the lines are comments!\n*/\n```\n\n</details>\n"},{"name":"03.md","type":"file","ext":".md","base":"03","dir":"flashcards/0-for-developers","path":"/flashcards/0-for-developers/03.md","lang":".md","content":"# For Developers\n\nHow do you log a message the console for a developer to read?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `console.log('a message');`\n\n```js\n'use strict';\n\nconsole.log('this program only prints a message for developers');\n```\n\n</details>\n"},{"name":"04.md","type":"file","ext":".md","base":"04","dir":"flashcards/0-for-developers","path":"/flashcards/0-for-developers/04.md","lang":".md","content":"# For Developers\n\nWhat do your write at the top of a JS file so the JS interpreter will catch more\nof your mistakes?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `'use strict';` (_Strict Mode_)\n\n```js\n/*\n  this will work, the program is not in strict mode\n\n  using variables without declaring them is OK\n*/\n\ngreeting = 'hello! (not in strict mode, undeclared variable)';\n\nconsole.log(greeting); // 'hello! ...'\n```\n\n```js\n'use strict';\n\n/*\n  this will throw an error, the program IS in strict mode\n\n  using variables without declaring them is NOT OK\n*/\n\n// an error will occur on this line\ngreeting = 'hello! (strict mode, undeclared variable)';\n\n// the log will never happen!\nconsole.log(greeting);\n```\n\n```js\n'use strict';\n\n/*\n  this will work in strict mode\n\n  the variable is declared before it is used\n*/\n\nlet greeting = 'hello! (strict mode, declared variable)';\n\nconsole.log(greeting); // 'hello! ...'\n```\n\n> PS. Sometimes it's called\n> [sloppy mode](https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode)\n> when you write code without `'use strict';`.\n\n</details>\n"}]},{"name":"0-syntax","type":"directory","path":"/flashcards/0-syntax","children":[]},{"name":"1-variables","type":"directory","path":"/flashcards/1-variables","children":[{"name":"01.md","type":"file","ext":".md","base":"01","dir":"flashcards/1-variables","path":"/flashcards/1-variables/01.md","lang":".md","content":"# Variables\n\nWhat is it called when you use `let` to create a new variable?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _Declaring_ a variable using `let`\n\n```js\n'use strict';\n\n// you can not use the variable here, before it is declared.\n// console.log(greeting);\n\nlet greeting;\n\n// you can use it here, after it is declared\nconsole.log(greeting);\n```\n\n</details>\n"},{"name":"02.md","type":"file","ext":".md","base":"02","dir":"flashcards/1-variables","path":"/flashcards/1-variables/02.md","lang":".md","content":"# Variables\n\nWhat is it called when you assign a value to a variable at the same time as you\ndeclare it.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _Initializing_ a variable\n\n```js\n'use strict';\n\nlet greeting = 'hello!';\n\n// log the variable's initial value\nconsole.log(greeting);\n```\n\n</details>\n"},{"name":"03.md","type":"file","ext":".md","base":"03","dir":"flashcards/1-variables","path":"/flashcards/1-variables/03.md","lang":".md","content":"# Variables\n\nWhat is it called when you store new value in a variable after it has been\ndeclared?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _Assigning_ a value to a variable\n\n```js\n'use strict';\n\nlet greeting = 'hello!';\n\ngreeting = 'good bye.';\n\n// log the variable's final value\nconsole.log(greeting);\n```\n\n</details>\n"},{"name":"04.md","type":"file","ext":".md","base":"04","dir":"flashcards/1-variables","path":"/flashcards/1-variables/04.md","lang":".md","content":"# Variables\n\nWhat is it called when you access the value stored in a variable?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _Reading_ a variable's value\n\n```js\n'use strict';\n\nlet name = 'Tomblaine';\n\n// read the value stored in `name`\nlet greeting = 'hello ' + name + '!';\n\n// read the value stored in `greeting`\nconsole.log(greeting);\n```\n\n</details>\n"},{"name":"05.md","type":"file","ext":".md","base":"05","dir":"flashcards/1-variables","path":"/flashcards/1-variables/05.md","lang":".md","content":"# Variables\n\nThis error occurs when you try declaring the same variable more than once in the\nsame scope.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _SyntaxError_\n\n```js\n'use strict';\n\nlet vegetable = 'carrot';\n\n// there will be a SyntaxError on this line\nlet vegetable = 'potato';\n```\n\n> There are many other ways you can get a _SyntaxError_ in your program, this is\n> the only way you need to know for now. You will study errors in depth with the\n> Debugging module.\n\n</details>\n"},{"name":"06.md","type":"file","ext":".md","base":"06","dir":"flashcards/1-variables","path":"/flashcards/1-variables/06.md","lang":".md","content":"# Variables\n\nThis error occurs when you to either use a variable:\n\n- without ever declaring it\n- before it is declared\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _ReferenceError_\n\n## Using Without Declaring\n\n```js\n'use strict';\n\n// let animal; // uncomment this line to fix the error\n\nanimal = 'horse'; // ReferenceError\n\nconsole.log(animal);\n```\n\n```js\n'use strict';\n\n// a common mistake is spelling your variables incorrectly\nlet spellingMistake = 'oops!';\n\nconsole.log(spelingMistake); // ReferenceError\n```\n\n## Using Before Declaring\n\n```js\n'use strict';\n\n// reading before it is declared\n// console.log(favoriteColor); // ReferenceError\n\n// assigning before it is declared\n// favoriteColor = 'blue'; // ReferenceError\n\nlet favoriteColor = 'red';\n\n// this is ok\nfavoriteColor = 'orange';\n\n// so is this\nconsole.log(favoriteColor);\n```\n\n> There are many other ways you can get a _ReferenceError_ in your program, this\n> is the only way you need to know for now. You will study errors in depth with\n> the Debugging module.\n\n</details>\n"},{"name":"07.md","type":"file","ext":".md","base":"07","dir":"flashcards/1-variables","path":"/flashcards/1-variables/07.md","lang":".md","content":"# Variables\n\nWhat is called when a new variable is declared in curly braces `{ }` and you\ncannot access the variable outside of those braces?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _Block Scope_\n\n```js\n'use strict';\n\n{\n\tlet innerVariable = 'hello from the block scope!';\n\n\t// this line will work\n\tconsole.log(innerVariable);\n}\n\n// this line will throw an error\nconsole.log(innerVariable); // ReferenceError\n```\n\n</details>\n"}]},{"name":"2-primitives","type":"directory","path":"/flashcards/2-primitives","children":[{"name":"01.md","type":"file","ext":".md","base":"01","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/01.md","lang":".md","content":"# Primitives\n\nWhat is the type of `\"hello\"` and `\"good bye\"` and `\"JavaScript\"` and ....\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"string\"`\n\n```js\n'use strict';\n\nlet greeting = 'hello';\n\nconsole.log(greeting);\nconsole.log(typeof greeting);\n```\n\n</details>\n"},{"name":"02.md","type":"file","ext":".md","base":"02","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/02.md","lang":".md","content":"# Primitives\n\nWhat is the type of `true` and `false`.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"boolean\"`\n\n```js\n'use strict';\n\nlet likesPizza = true;\n\nconsole.log(likesPizza);\nconsole.log(typeof likesPizza);\n```\n\n</details>\n"},{"name":"03.md","type":"file","ext":".md","base":"03","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/03.md","lang":".md","content":"# Primitives\n\nWhat is the type of `null`.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"object\"`\n\nIt just is, memorize it for now and understand it later.\n\n```js\n'use strict';\n\nlet isConfusing = null;\n\nconsole.log(isConfusing);\nconsole.log(typeof isConfusing);\n```\n\n</details>\n"},{"name":"04.md","type":"file","ext":".md","base":"04","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/04.md","lang":".md","content":"# What is the type of `undefined`\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"undefined\"`\n\n```js\n'use strict';\n\nlet notInitialized;\n\nconsole.log(notInitialized);\nconsole.log(typeof notInitialized);\n```\n\n</details>\n"},{"name":"05.md","type":"file","ext":".md","base":"05","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/05.md","lang":".md","content":"# Primitives\n\nWhat is the type of `0` and `1` and `1.5` and ...\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"number\"`\n\n```js\n'use strict';\n\nlet bananas = 12;\n\nconsole.log(bananas);\nconsole.log(typeof bananas);\n```\n\n</details>\n"},{"name":"06.md","type":"file","ext":".md","base":"06","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/06.md","lang":".md","content":"# Primitives\n\nThis type is used to work with text.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"string\"`\n\n```js\n'use strict';\n\nlet input = null;\nwhile (input === null) {\n\tinput = prompt('enter some text');\n}\n\nconsole.log(input);\nconsole.log(typeof input);\n```\n\n</details>\n"},{"name":"07.md","type":"file","ext":".md","base":"07","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/07.md","lang":".md","content":"# Primitives\n\nThis type is used to say _yes_ or _no_, _on_ or _off_.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"boolean\"`\n\n```js\n'use strict';\n\nlet likesPizza = confirm('do you like pizza?');\n\nconsole.log(likesPizza);\nconsole.log(typeof likesPizza);\n```\n\n</details>\n"},{"name":"08.md","type":"file","ext":".md","base":"08","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/08.md","lang":".md","content":"# Primitives\n\nThis type is used to work with numerical values.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"number\"`\n\n```js\n'use strict';\n\nlet bananas = 12;\n\nconsole.log(bananas);\nconsole.log(typeof bananas);\n```\n\n</details>\n"},{"name":"09.md","type":"file","ext":".md","base":"09","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/09.md","lang":".md","content":"# Primitives\n\nThis type is used to say that there is nothing here, it can happen by not\nassigning a value to a variable.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"undefined\"`\n\n```js\n'use strict';\n\nlet notInitialized;\n\nconsole.log(notInitialized);\nconsole.log(typeof notInitialized);\n```\n\n</details>\n"},{"name":"10.md","type":"file","ext":".md","base":"10","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/10.md","lang":".md","content":"# Primitives\n\nThis type is used to say that there _should_ be nothing here, it can only happen\non purpose.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\"object\"`\n\nIt just is, memorize it for now and understand it later.\n\n```js\n'use strict';\n\nlet canceled;\nwhile (canceled !== null) {\n\tcanceled = prompt('please cancel');\n}\n\nconsole.log(canceled);\nconsole.log(typeof canceled);\n```\n\n</details>\n"},{"name":"11.md","type":"file","ext":".md","base":"11","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/11.md","lang":".md","content":"# Primitives\n\nHow do you access the _first_ character of a string?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n```js\n'use strict';\n\nlet threeLetters = 'abc';\n\n// the first character is at index 0\nlet first = threeLetters[0];\n\nconsole.log(first);\n```\n\n</details>\n"},{"name":"12.md","type":"file","ext":".md","base":"12","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/12.md","lang":".md","content":"# Primitives\n\nHow do you access the _second_ character of a string?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n```js\n'use strict';\n\nlet threeLetters = 'abc';\n\n// the second character is at index 1\nlet second = threeLetters[1];\n\nconsole.log(second);\n```\n\n</details>\n"},{"name":"13.md","type":"file","ext":".md","base":"13","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/13.md","lang":".md","content":"# Primitives\n\nHow do you access the _third_ character of a string?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n```js\n'use strict';\n\nlet threeLetters = 'abc';\n\n// the third character is at index 2\nlet third = threeLetters[2];\n\nconsole.log(third);\n```\n\n</details>\n"},{"name":"14.md","type":"file","ext":".md","base":"14","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/14.md","lang":".md","content":"# Primitives\n\nHow do you join two strings together into one string?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n```js\n'use strict';\n\nlet firstName = 'Java';\nlet lastName = 'Script';\n\n// concatenate the strings using `+`\nlet name = firstName + lastName;\nconsole.log(name);\n```\n\n</details>\n"},{"name":"15.md","type":"file","ext":".md","base":"15","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/15.md","lang":".md","content":"# Primitives\n\nHow do you convert a string to upper case?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n```js\n'use strict';\n\nlet language = 'JavaScript';\n\nconsole.log(language.toUpperCase());\n```\n\n</details>\n"},{"name":"16.md","type":"file","ext":".md","base":"16","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/16.md","lang":".md","content":"# Primitives\n\nHow do you convert a string to lower case?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n```js\n'use strict';\n\nlet language = 'JavaScript';\n\nconsole.log(language.toLowerCase());\n```\n\n</details>\n"},{"name":"17.md","type":"file","ext":".md","base":"17","dir":"flashcards/2-primitives","path":"/flashcards/2-primitives/17.md","lang":".md","content":"# Primitives\n\nHow do you get the length of a string?\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n```js\n'use strict';\n\nlet language = 'JavaScript';\n\nconsole.log(language.length);\n```\n\n</details>\n"}]},{"name":"3-operators","type":"directory","path":"/flashcards/3-operators","children":[{"name":"01.md","type":"file","ext":".md","base":"01","dir":"flashcards/3-operators","path":"/flashcards/3-operators/01.md","lang":".md","content":"# Operators\n\nThis operator is used to _initialize_ or _assign_ values to a variable.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _assignment_ operator: `=`\n\n```js\n'use strict';\n\n// initialize with the assignment operator\nlet greeting = 'hello';\nconsole.log(greeting);\n\n// assign wit the assignment operator\ngreeting = 'good bye';\nconsole.log(greeting);\n```\n\n</details>\n"},{"name":"02.md","type":"file","ext":".md","base":"02","dir":"flashcards/3-operators","path":"/flashcards/3-operators/02.md","lang":".md","content":"# Operators\n\nThis operator checks the _type_ of a value.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _typeof_ operator: `typeof`\n\n```js\n'use strict';\n\n// you can check the type of a primitive directly\nconsole.log(typeof '4');\n\n// or indirectly, by first reading the value from a variable then checking\nlet stringFour = '4';\nconsole.log(typeof stringFour);\n```\n\n</details>\n"},{"name":"03.md","type":"file","ext":".md","base":"03","dir":"flashcards/3-operators","path":"/flashcards/3-operators/03.md","lang":".md","content":"# Operators\n\nThis operator evaluates to true if the **type** _and_ **value** of two values\nare _the same_.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _strict equality_ operator: `===`\n\n```js\n'use strict';\n\n// you can use this operator to compare primitives directly\nconsole.log('4' === 4);\n\n// or to compare the values stored in variables\nlet stringFour = '4';\nlet numberFour = 4;\nconsole.log(stringFour === numberFour);\n```\n\n</details>\n"},{"name":"04.md","type":"file","ext":".md","base":"04","dir":"flashcards/3-operators","path":"/flashcards/3-operators/04.md","lang":".md","content":"# Operators\n\nThis operator evaluates to true if the **type** _or_ **value** of two values are\n_different_.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _strict inequality_ operator: `!==`\n\n```js\n'use strict';\n\n// you can use this operator to compare primitives directly\nconsole.log('4' !== 4);\n\n// or to compare the values stored in variables\nlet stringFour = '4';\nlet numberFour = 4;\nconsole.log(stringFour !== numberFour);\n```\n\n</details>\n"},{"name":"05.md","type":"file","ext":".md","base":"05","dir":"flashcards/3-operators","path":"/flashcards/3-operators/05.md","lang":".md","content":"# Operators\n\nThis operator does double duty, and it has two names!\n\n- when used with strings, it combines two strings into one string\n- when used with numbers, it adds them like in normal math\n\nWhat is it called in each of these situations?\n\n  <details>\n  <summary>flip the card</summary>\n  <br>\n\n## `+`\n\n### With Strings: _concatenation_\n\n```js\n'use strict';\n\n// you can use this operator directly with primitives directly\nconsole.log('4' + '5');\n\n// or indirectly with values stored in variables\nlet stringFour = '4';\nlet stringFive = '5';\nconsole.log(stringFour + stringFive);\n```\n\n### With Numbers: _addition_\n\n```js\n'use strict';\n\n// you can use this operator directly with primitives directly\nconsole.log(4 + 5);\n\n// or indirectly with values stored in variables\nlet numberFour = 4;\nlet numberFive = 5;\nconsole.log(numberFour + numberFive);\n```\n\n  </details>\n"},{"name":"06.md","type":"file","ext":".md","base":"06","dir":"flashcards/3-operators","path":"/flashcards/3-operators/06.md","lang":".md","content":"# Operators\n\nThis operator takes two values. If the left value is _falsy_ it evaluates to the\nleft value, else it evaluates to the right value.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _logical and_ operator: `&&`\n\n```js\n'use strict';\n\nconsole.log(true && true); // true\nconsole.log(true && false); // false\nconsole.log(false && true); // false\nconsole.log(false && false); // false\n```\n\n</details>\n"},{"name":"07.md","type":"file","ext":".md","base":"07","dir":"flashcards/3-operators","path":"/flashcards/3-operators/07.md","lang":".md","content":"# Operators\n\nThis operator takes two values. If the left value is _truthy_ it evaluates to\nthe left value, else it evaluates to the right value.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _logical or_ operator: `||`\n\n```js\n'use strict';\n\nconsole.log(true || true); // true\nconsole.log(true || false); // true\nconsole.log(false || true); // true\nconsole.log(false || false); // false\n```\n\n</details>\n"},{"name":"08.md","type":"file","ext":".md","base":"08","dir":"flashcards/3-operators","path":"/flashcards/3-operators/08.md","lang":".md","content":"# Operators\n\nThis operator turns `true` to `false`, and `false` to `true`.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _logical not_ operator: `!`\n\n```js\n'use strict';\n\nconsole.log(!true); // false\nconsole.log(!false); // true\n```\n\n</details>\n"},{"name":"09.md","type":"file","ext":".md","base":"09","dir":"flashcards/3-operators","path":"/flashcards/3-operators/09.md","lang":".md","content":"# Operators\n\nThis operator evaluates to `true` if the _left_ value is **bigger than** the\nright value.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _greater than_ operator: `>`\n\n```js\n'use strict';\n\nconsole.log(1 > 2); // false\nconsole.log(2 > 2); // false\nconsole.log(3 > 2); // true\n```\n\n</details>\n"},{"name":"10.md","type":"file","ext":".md","base":"10","dir":"flashcards/3-operators","path":"/flashcards/3-operators/10.md","lang":".md","content":"# Operators\n\nThis operator evaluates to `true` if the _left_ value is **bigger than** _or_\n**the same as** the right value.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _greater than or equal to_ operator: `>=`\n\n```js\n'use strict';\n\nconsole.log(1 >= 2); // false\nconsole.log(2 >= 2); // true\nconsole.log(3 >= 2); // true\n```\n\n</details>\n"},{"name":"11.md","type":"file","ext":".md","base":"11","dir":"flashcards/3-operators","path":"/flashcards/3-operators/11.md","lang":".md","content":"# Operators\n\nThis operator evaluates to `true` if the _left_ value is **smaller than** the\nright value.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _less than_ operator: `<`\n\n```js\n'use strict';\n\nconsole.log(1 < 2); // true\nconsole.log(2 < 2); // false\nconsole.log(3 < 2); // false\n```\n\n</details>\n"},{"name":"12.md","type":"file","ext":".md","base":"12","dir":"flashcards/3-operators","path":"/flashcards/3-operators/12.md","lang":".md","content":"# Operators\n\nThis operator evaluates to `true` if the _left_ value is **smaller than** _or_\n**the same as** the right value.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## _less than or equal to_ operator: `<=`\n\n```js\n'use strict';\n\nconsole.log(1 <= 2); // true\nconsole.log(2 <= 2); // true\nconsole.log(3 <= 2); // false\n```\n\n</details>\n"}]},{"name":"4-keywords","type":"directory","path":"/flashcards/4-keywords","children":[{"name":"01.md","type":"file","ext":".md","base":"01","dir":"flashcards/4-keywords","path":"/flashcards/4-keywords/01.md","lang":".md","content":"# Keywords\n\nThis **keyword** is used to declare a new _block scoped_ variable that _can_ be\nmodified.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `let`\n\n```js\n'use strict';\n\n// declare using `let` and initialize\nlet aVariable = 'hello!';\n\n// declare without initializing\nlet anotherVariable;\n```\n\n</details>\n"},{"name":"02.md","type":"file","ext":".md","base":"02","dir":"flashcards/4-keywords","path":"/flashcards/4-keywords/02.md","lang":".md","content":"# Keywords\n\nThis **keyword** is used to declare a block of code that should be executed _on\nthe condition that_ a check is truthy.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `if`\n\n```js\n'use strict';\n\nlet didConfirm = confirm('yes? no?');\n\nif (didConfirm === true) {\n\talert('hello!');\n}\n\nalert('all done.');\n```\n\n</details>\n"},{"name":"03.md","type":"file","ext":".md","base":"03","dir":"flashcards/4-keywords","path":"/flashcards/4-keywords/03.md","lang":".md","content":"# Keywords\n\nThis **keyword** is used to declare an _alternate_ block of code, should a\ncondition be falsy.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `else`\n\n```js\n'use strict';\n\nlet didConfirm = confirm('yes? no?');\n\nif (didConfirm === true) {\n\talert('hello!');\n} else {\n\talert('good bye.');\n}\n\nalert('all done.');\n```\n\n</details>\n"},{"name":"04.md","type":"file","ext":".md","base":"04","dir":"flashcards/4-keywords","path":"/flashcards/4-keywords/04.md","lang":".md","content":"# Keywords\n\nThis **combination of keywords** is used to place more than one conditional\ncheck in a row, each check executed _only if_ the previous checks were falsy.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `else if`\n\n```js\n'use strict';\n\nlet userInput = prompt('enter something');\n\nif (userInput === null) {\n\talert('canceler!');\n} else if (userInput === '') {\n\talert('that is nothing');\n} else {\n\talert('perfect!');\n}\n\nalert('your input: ' + userInput);\n```\n\n</details>\n"},{"name":"05.md","type":"file","ext":".md","base":"05","dir":"flashcards/4-keywords","path":"/flashcards/4-keywords/05.md","lang":".md","content":"# Keywords\n\nThis **keyword** is used to mark a block of code that should be repeated _as\nlong as_ a condition is truthy.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `while`\n\n```js\n'use strict';\n\nlet userInput = null;\n\nwhile (userInput === null) {\n\t// execute the body until the user clicks \"ok\"\n\tuserInput = prompt('do not cancel');\n}\n\nalert('all done: ' + userInput);\n```\n\n</details>\n"},{"name":"06.md","type":"file","ext":".md","base":"06","dir":"flashcards/4-keywords","path":"/flashcards/4-keywords/06.md","lang":".md","content":"# Keywords\n\nThis **combination of keywords** is used to create a loop that iterates over\neach character in a string.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `for ... of`\n\n```js\n'use strict';\n\nlet userInput = null;\n\nwhile (userInput === null) {\n\tuserInput = prompt('enter something');\n}\n\nfor (let character of userInput) {\n\talert(character);\n}\n\nalert(userInput + '!');\n```\n\n</details>\n"}]},{"name":"5-character-names","type":"directory","path":"/flashcards/5-character-names","children":[{"name":"01.md","type":"file","ext":".md","base":"01","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/01.md","lang":".md","content":"# Character Names\n\nThis **character** is used to mark the end of a _statement_ in JavaScript, kind\nof like how periods (`.`) mark the end of a sentence.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `;`\n\n- _singular_: semicolon\n- _plural_: semicolon\n\n```js\n// a statement\n'use strict';\n\n// a statement\nlet userInput = null;\n\nwhile (userInput === null) {\n\t// a statement\n\tuserInput = prompt('enter something');\n}\n\nfor (let character of userInput) {\n\t// a statement\n\talert(character);\n}\n\n// a statement\nalert(userInput + '!');\n```\n\n</details>\n"},{"name":"02.md","type":"file","ext":".md","base":"02","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/02.md","lang":".md","content":"# Character Names\n\nThis **pair of characters** is used to create a new _block_.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `{ }`\n\n- _singular_: curly bracket\n- _plural_: curly brackets\n- `{`: _opening_ curly bracket\n- `}`: _closing_ curly bracket\n\n```js\n'use strict';\n\n{\n\t// a block\n}\n\nif (false) {\n\t// a block\n} else if (false) {\n\t// a block\n} else {\n\t// a block\n}\n\nwhile (false) {\n\t// a block\n}\n\nfor (let nothing of '') {\n\t// a block\n}\n```\n\n</details>\n"},{"name":"03.md","type":"file","ext":".md","base":"03","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/03.md","lang":".md","content":"# Character Names\n\nThis **pair of characters** is used for checks in control flow and for calling\nfunctions.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `( )`\n\n- _singular_: parenthesis\n- _plural_: parentheses\n- `(`: _opening_ parenthesis\n- `)`: _closing_ parenthesis\n\n```js\n'use strict';\n\n/* --- control flow checks --- */\n\nif (false) {\n} else if (false) {\n}\n\nwhile (false) {}\n\nfor (let nothing of '') {\n}\n```\n\n```js\n'use strict';\n\n/* --- function calls --- */\n\nalert('an alert');\nprompt('a prompt');\nconfirm('a confirm');\n\nconsole.log('a console log');\n\nlet name = 'Timlin';\nlet bigName = name.toUpperCase();\nconsole.log(bigName);\n```\n\n</details>\n"},{"name":"04.md","type":"file","ext":".md","base":"04","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/04.md","lang":".md","content":"# Character Names\n\nThis **pair of characters** is used for accessing individual characters in a\nstring.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `[ ]`\n\n- _singular_: square bracket\n- _plural_: square brackets\n- `[`: _opening_ square bracket\n- `]`: _closing_ closing square bracket\n\n```js\n'use strict';\n\nlet threeLetters = 'abc';\n\nlet first = threeLetters[0];\nlet second = threeLetters[1];\nlet third = threeLetters[2];\n\nconsole.log(first, second, third);\n```\n\n</details>\n"},{"name":"05.md","type":"file","ext":".md","base":"05","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/05.md","lang":".md","content":"# Character Names\n\nThese _two_ **pairs of characters** are used for creating a string.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `' '` or `\" \"`\n\nYou can use either character, it does not matter.\n\n## `' '`\n\n- _singular_: single quote\n- _plural_: single quotes\n\n## `\" \"`\n\n- _singular_: double quote\n- _plural_: double quotes\n\n```js\n'use strict';\n\nlet simpleString = 'abc';\n\nlet dogNoise = 'the dog says \"woof\"';\nlet catNoise = \"the cat says 'meow'\";\n```\n\n> PS. _back-ticks_ (<code>\\` \\`</code>) can also be used to create a _template\n> literal_, you'll learn about this in Debugging.\n\n</details>\n"},{"name":"06.md","type":"file","ext":".md","base":"06","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/06.md","lang":".md","content":"# Character Names\n\nThis **character** is to access a property or method, and for decimal numbers.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `.`\n\n- _singular_: period, or dot\n- _plural_: periods, or dots\n\n```js\n'use strict';\n\nlet name = 'Timlin';\n\n// access a method\nconsole.log(bigName.toUpperCase());\n// access a property\nconsole.log(bigName.length);\n\n// a decimal number\nconsole.log(1.5);\n```\n\n</details>\n"},{"name":"07.md","type":"file","ext":".md","base":"07","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/07.md","lang":".md","content":"# Character Names\n\nThis **character** is used for comments and division.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `/`\n\n- _singular_: forward slash\n- _plural_: forward slashes\n\n```js\n'use strict';\n\n// inline comment\n\n/*\n  block comment\n*/\n\nlet oneHalf = 1 / 2;\nconsole.log(oneHalf);\n```\n\n</details>\n"},{"name":"08.md","type":"file","ext":".md","base":"08","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/08.md","lang":".md","content":"# Character Names\n\nThis **character** is used for block comments and multiplication.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `*`\n\n- _singular_: asterisk, or star\n- _plural_: asterisks, or stars\n\n```js\n'use strict';\n\n/*\n  block comment\n*/\n\nlet four = 2 * 2;\nconsole.log(four);\n```\n\n</details>\n"},{"name":"09.md","type":"file","ext":".md","base":"09","dir":"flashcards/5-character-names","path":"/flashcards/5-character-names/09.md","lang":".md","content":"# Character Names\n\nThis **character** is to access _escape_ special characters in a string.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## `\\`\n\n- _singular_: back slash\n- _plural_: back slashes\n\n```js\n'use strict';\n\nlet escapedCharacters = '\\n \\\\ \\n \\\\ \\n \\\\';\n\nconsole.log(escapedCharacters);\n```\n\n- [Escape characters in JavaScript](https://www.tutorialspoint.com/escape-characters-in-javascript)\n\n</details>\n"}]},{"name":"6-control-flow","type":"directory","path":"/flashcards/6-control-flow","children":[{"name":"01.md","type":"file","ext":".md","base":"01","dir":"flashcards/6-control-flow","path":"/flashcards/6-control-flow/01.md","lang":".md","content":"# Control Flow\n\nThis type of **control flow** is used when there is _one_ block of code that you\nwant to execute if a check evaluates to truthy.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## An `if` Conditional Statement\n\n```js\n'use strict';\n\nlet didConfirm = confirm('yes? no?');\n\nif (didConfirm === true) {\n\talert('hello!');\n}\n\nalert('all done.');\n```\n\n</details>\n"},{"name":"02.md","type":"file","ext":".md","base":"02","dir":"flashcards/6-control-flow","path":"/flashcards/6-control-flow/02.md","lang":".md","content":"# Control Flow\n\nThis type of **control flow** is used when there is _one_ block of code that you\nwant to execute if a check evaluates to truthy, and an _alternate_ block of code\nif the condition if falsy.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## An `if`/`else` Conditional Statement\n\n```js\n'use strict';\n\nlet didConfirm = confirm('yes? no?');\n\nif (didConfirm === true) {\n\talert('hello!');\n} else {\n\talert('good bye.');\n}\n\nalert('all done.');\n```\n\n</details>\n"},{"name":"03.md","type":"file","ext":".md","base":"03","dir":"flashcards/6-control-flow","path":"/flashcards/6-control-flow/03.md","lang":".md","content":"# Control Flow\n\nThis type of **control flow** is used when there are _multiple_ blocks of code\nto choose between. There must be more than 1 checks and the first block with a\ntruthy check will be executed.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## An `if`/`else if` Conditional Statement\n\n```js\n'use strict';\n\nlet userInput = prompt('enter something');\n\nif (userInput === null) {\n\talert('canceler!');\n} else if (userInput === '') {\n\talert('that is nothing');\n}\n\nalert('your input: ' + userInput);\n```\n\n</details>\n"},{"name":"04.md","type":"file","ext":".md","base":"04","dir":"flashcards/6-control-flow","path":"/flashcards/6-control-flow/04.md","lang":".md","content":"# Control Flow\n\nThis type of **control flow** is used when there are _multiple_ blocks of code\nto choose between. There are more than 1 checks and the first block with a\ntruthy check will be executed.\n\nThere is also an _alternate_ block of code if all of the conditions are falsy.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## An `if`/`else if`/`else` Conditional Statement\n\n```js\n'use strict';\n\nlet userInput = prompt('enter something');\n\nif (userInput === null) {\n\talert('canceler!');\n} else if (userInput === '') {\n\talert('that is nothing');\n} else {\n\talert('perfect!');\n}\n\nalert('your input: ' + userInput);\n```\n\n</details>\n"},{"name":"05.md","type":"file","ext":".md","base":"05","dir":"flashcards/6-control-flow","path":"/flashcards/6-control-flow/05.md","lang":".md","content":"# Control Flow\n\nThis type of **control flow** is used when you want to execute a block of code\n_as long as_ a condition is truthy. The condition is checked once before each\niteration.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## A While Loop\n\n```js\n'use strict';\n\nlet userInput = null;\n\nwhile (userInput === null) {\n\t// execute the body until the user clicks \"ok\"\n\tuserInput = prompt('do not cancel');\n}\n\nalert('all done: ' + userInput);\n```\n\n</details>\n"},{"name":"06.md","type":"file","ext":".md","base":"06","dir":"flashcards/6-control-flow","path":"/flashcards/6-control-flow/06.md","lang":".md","content":"# Control Flow\n\nThis type of **control flow** is useful for iterating through each character of\na string.\n\n<details>\n<summary>flip the card</summary>\n<br>\n\n## A For-Of Loop\n\n```js\n'use strict';\n\nlet userInput = null;\n\nwhile (userInput === null) {\n\tuserInput = prompt('enter something');\n}\n\nfor (let character of userInput) {\n\talert(character);\n}\n\nalert(userInput + '!');\n```\n\n</details>\n"}]}]},{"name":"gen-ai-in-the-mix.md","type":"file","ext":".md","base":"gen-ai-in-the-mix","dir":"","path":"/gen-ai-in-the-mix.md","lang":".md","content":"# Generative AI in the Mix\n\nThroughout this chapter you learned to think of software development as writing\none text (your source code) for three different audiences. You learned a little\nabout each audience and how your source code can be used to communicate with\neach:\n\n- **Users**\n- **Developers**\n- **Computers**\n\nTake a minute review how your code and the 3 audiences interact in this diagram\nwithout generative AI\n\n<details>\n<summary>Click to expand diagram without AI</summary>\n<br>\n\n![the big picture](../assets/the-big-picture.png)\n\n</details>\n\nThen study this diagram with Generative AI in the mix before moving on to the\ndiscussion exercises:\n\n<details>\n<summary>Click to expand diagram with AI</summary>\n<br>\n\nSome questions to guide your study:\n\n- How do you think generative AI changes each person's role in this diagram?\n    - Has the relationship between developers and users changed?\n    - Has the relationship between users and the user interface changed?\n    - Who else is impacted, but not directly included in this diagram?\n    - Who in this diagram is most impacted by the presence of generative AI?\n- Do you think AI fundamentally changes what it means to develop software,\n  taking the whole diagram into account?\n- What does gen AI's placement outside of the main circle make you think of?\n\n![the big picture + AI](../assets/the-big-picture-plus-ai.png)\n\n</details>\n\n---\n\n## Thought Experiments\n\nBased on the differences between the two diagrams above, how would you change\nthe following diagrams to include generative AI? And how do you think generative\nAI changes the role of each\n\n1. <details>\n   <summary>Programming + Generative AI</summary>\n\n    ![computers and developers](../assets/computers-and-developers.png)\n\n  </details>\n\n2. <details>\n   <summary>A Program + Generative AI</summary>\n\n    ![a program](../assets/a-program.png)\n\n  </details>\n"},{"name":"javascript-history.md","type":"file","ext":".md","base":"javascript-history","dir":"","path":"/javascript-history.md","lang":".md","content":"# Some History\n\nJavaScript has an interesting history, it was originally created in 1 week\nduring 1995 by Brendan Eich and since then has gone through many many changes.\n\nAt first it was just a small language used for small interactions in web pages.\nOver the years as the internet has grown and browsers have become more powerful,\nJavaScript has evolved from a small language for small interactions to a huge\nprogramming language capable of building complex applications.\n\nAs JavaScript grew, so did the number of developers who use it. All these\ndevelopers pushed the limits of JavaScript, created new tooling, different\nconventions, and generally made the JS ecosystem a fascinating (and\nfrustrating!) place to work. This human history of JavaScript is what makes it\nso interesting.\n\n- [simplilearn](https://www.youtube.com/watch?v=6ENWOVc-64c)\n- [wierd history of js](https://dev.to/codediodeio/the-weird-history-of-javascript-2bnb)\n- [from Brendan Eich himself](https://www.youtube.com/watch?v=3-9fnjzmXWA)\n- [springboard](https://www.springboard.com/blog/data-science/history-of-javascript/)\n\n## Backwards Compatibility\n\n> or \"don’t break the internet!”\n\nAn important concept for understanding the JavaScript language is \"**Backwards\nCompatibility**\". Backwards Compatibility means that any program ever written in\nJavaScript must _always_ work!\n\nAny time something is added to JavaScript or the language is changed in any way,\nolder programs must still be valid JavaScript. This is important because people\nhave been websites for decades now. It would be bad if one day every website\nwritten before 2003 no longer worked because of a recent change in JavaScript.\n\nImagine if every word, sentence, and grammar in your native language's history\nneeded to be understood by every native speaker for the rest of eternity! You\nwould need to be just as comfortable reading a story written 4000 years ago as\none written yesterday. This would make it very hard for languages to change and\ngrow, but this is the case for JavaScript.\n\n- [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md#backwards--forwards)\n- [Why is JavaScript backwards compatible to a fault?](https://stackoverflow.com/questions/4937245/why-is-javascript-backwards-compatible-to-a-fault)\n- [tonsky.me](https://tonsky.me/blog/compatibility/)\n- [rohitdhatrak](https://www.rohitdhatrak.com/backwards-forwards-compatibility/)\n- [Chrome Breaks the Web](https://www.theregister.com/2021/10/04/chrome_breaks_web/)\n\n## ES6rohitdhatrak\n\nES6 was a new version of JavaScript released in 2015, it contained major changes\nto the language that improved the developer experience. ES6 marked such a large\nchange in JavaScript that it's fair to talk about the JS world before ES6 and\nafter ES6 as different eras.\n\nYou can learn more about ES6 another time, for now you just need to know it was\nsuch a big improvement that it belongs in every history of JS.\n\n## The Future of JavaScript\n\nAll new features for the JavaScript language are presented and discussed in the\n[tc39 github organization](https://github.com/tc39). If you're curious looking\nthrough the [proposals repository](https://github.com/tc39/proposals) can be\ninteresting to see how people plan and discuss additions to the JS language.\n"},{"name":"predictive-stepping","type":"directory","path":"/predictive-stepping","children":[{"name":"1-browser-debugger.js","type":"file","ext":".js","base":"1-browser-debugger","dir":"predictive-stepping","path":"/predictive-stepping/1-browser-debugger.js","lang":".js","content":"'use strict';\n\n/* A suggested workflow for studying code in your DevTools' debugger\n\n  Getting Ready\n  1 - open your code with study-lenses\n    open this repo in your terminal and enter `$ study`\n    a new tab should open in your browser\n    select the file you want to study and get going!\n  2 - open and configure your DevTools (this will take some searching and practice)\n    - move it to the right or left of your browser\n    - open the \"sources\" tab\n    - hide the navigator (the menu on the left with this page's scripts)\n    - in the right panel, collapse the section called \"threads\" (if it's there)\n    - open the console in the drawer (that part down at the bottom)\n\n  Studying\n  1 - click the \"debug\" button\n  2 - find the highlighted line of code in the debugger (this is the first line that will be executed)\n  3 - for each step in your script's execution:\n    A - before pressing the \"Step\" button (->) button ask yourself (out loud if possible)\n        - \"which line will be executed next?\"\n        - \"will this next line ...\n            ... read from memory?\"\n            ... write to memory?\"  (careful, it's possible to do both!)\n            ... log to the console?\"\n            ... create a new block scope?\"\n            ... decide the flow of my program?\" (ie. if, while, for)\n        - \"what will the memory panel on the right look like after this step is finished?\"\n        - Pro Tip: write and draw your predictions on a piece of paper! (really, do this.  it helps)\n    B - press \"Step\" button (->*) and check if you were right or wrong\n    C - repeat\n  4 - go back to VSCode and make any changes to your .js file\n  5 - repeat\n\n  Note: all the different stepping buttons in the debugger? try them all!\n\n*/\n\nlet input = prompt('enter \"hello\"');\n\nlet didOrNot;\nif (input === 'hello') {\n  didOrNot = 'did';\n} else {\n  didOrNot = 'did not';\n}\n\nlet message = `you ${didOrNot} enter \"hello\"`;\nalert(message);\n"},{"name":"2-breakpoints.js","type":"file","ext":".js","base":"2-breakpoints","dir":"predictive-stepping","path":"/predictive-stepping/2-breakpoints.js","lang":".js","content":"'use strict';\n\n/* Devtool Breakpoints\n\n  breakpoints will also pause your code on a specific line\n  but they are part of your devtools, not the source code\n\n  what does this mean?\n  - if you change the code and run it again, the breakpoint may be gone\n  - a debugger statement is part of your code, it will always be there\n\n  use a breakpoint to pause on the same line as the `debugger;` in the last example\n\n  here's a nice intro: https://www.youtube.com/watch?v=H0XScE08hy8\ns\n  Hint: try using the `run` and `debug` buttons, what's the difference?\n    what happens to your breakpoints when you close your tab and open it again?\n\n*/\n\nlet firstName = 'Brobes';\n\nlet lastName = 'Pierre';\n\n// use a breakpoint on line this line to pause before fullName's value is assigned\nlet fullName = firstName + ' ' + lastName;\n\nconsole.log('fullName:', fullName);\n"},{"name":"3-debugger-statement.js","type":"file","ext":".js","base":"3-debugger-statement","dir":"predictive-stepping","path":"/predictive-stepping/3-debugger-statement.js","lang":".js","content":"'use strict';\n\n/* the debugger statement\n\n  placing the word `debugger;` in your code will pause the code right there\n\n  this is helpful when stepping through code in the devtools\n  using `debugger;` you can skip ahead and pause on a specific line\n\n  here's a nice intro: https://www.youtube.com/watch?v=fs8PwQAx_Tw\n\n  there are no exercises, just practice in the coming chapters!\n\n  Hint: try using the `run` and `debug` buttons, what's the difference?\n\n*/\n\nlet firstName = 'Brobes';\n\nlet lastName = 'Pierre';\n\n// the debugger statement will pause your code like a breakpoint, but ...\n//  they are saved in your source code so it's always there for later\n//  you can't turn them on an off while the program is running\ndebugger;\n\nlet fullName = firstName + ' ' + lastName;\n\nconsole.log('fullName:', fullName);\n"},{"name":"README.md","type":"file","ext":".md","base":"README","dir":"predictive-stepping","path":"/predictive-stepping/README.md","lang":".md","content":"# Predictive Stepping\n\n> These games teach you to read code and prepare you for predictive stepping:\n>\n> - 🥚 [compute-it](http://compute-it.toxicode.fr/)\n> - 🐣 [little-dot](http://little-dot.toxicode.fr/)\n\n> These videos cover predictive stepping:\n>\n> - [How to use this version of Study Lenses]()\n> - [A guide to the files in this folder](https://denepo.js.org/welcome-to-js/3-understanding-programs/1-predicting-execution/guide.mp4).\n> - [A class recording](https://www.youtube.com/watch?v=GAjQbsqTt4A) covering [these examples](https://github.com/denepo/predictive-stepping).\n\n_Predictive Stepping_ is a study method where you quiz yourself on each step of a\nprogram's execution, checking your predictions with using a debugger. After you have a\nbasic familiarity with your debugger, this study method is simple and effective - it's\nlike having a teacher by your side every day of the week!\n\nBefore learning more about predictive stepping, you first need to understand ...\n\n## Program Memory\n\n_Program Memory_ is a term that refers to the values stored in memory at EACH SPECIFIC\nmoment of execution. These values can change often, sometimes at every step of your\nprogram! Learning to program requires you to understand:\n\n- how does the JS engine represent memory?\n- how does the JS engine interpret your code line-by-line?\n- how does each instruction interact with program memory?\n\nYour first goal is learning to see what is happening inside your program at each step:\n\n- **DevTools Debugger**: The best way to peek inside program memory. It will take some\n  practice to use effectively and is worth every second. You can see every value in\n  memory, at every step of your program's execution. Debuggers are designed to help you\n  understand how memory is structured in JS\n\n## The Study Technique\n\nTo check if you _really_ understand a program, practice stepping through it in the\ndebugger like so:\n\n0. Don't step forward yet!\n1. Predict which line will execute next and how it will change program state\n2. Step forward in the program.\n3. Check your prediction.\n4. Investigate if you were wrong: Is this a bug in the program, or is it something you did\n   not understand?\n\nThat's it, happy studies!\n"}]},{"name":"suggested-study.md","type":"file","ext":".md","base":"suggested-study","dir":"","path":"/suggested-study.md","lang":".md","content":"# Suggested Study\n\nHelpful resources for this module\n\n> Are we missing a great set of exercises? Send a PR!\n\n## Be the Computer\n\nThese two games are deceptively simple. You will be given pseudo-code and will\nneed to follow the instructions the same way a computer would. Practicing this\ngame will help you learn how to trace code, and prepare you for learning about\nprogram memory in the next module - Debugging.\n\n- 🥚 [compute-it](http://compute-it.toxicode.fr/)\n- 🐣 [little-dot](http://little-dot.toxicode.fr/)\n\n## What is Programming?\n\n- [CodeAcademy](https://www.codecademy.com/articles/what-is-programming)\n- [The Coding Train](https://www.youtube.com/watch?v=AImF__7FyzM)\n- [Practical Introduction to JS](https://shawnr.gitbooks.io/practical-introduction-to-javascript/content/what-is-programming/)\n\n## What is JavaScript?\n\n- [Andrew Mosh](https://www.youtube.com/watch?v=W6NZfCO5SIk) \\(first 5 minutes\\)\n- [Code School](https://www.youtube.com/watch?v=nItSSTwBvSU)\n- [MDN: First Steps](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript)\n- [javascript.info](https://javascript.info/intro)\n- [Danielle Thé](https://www.youtube.com/watch?v=gT0Lh1eYk78)\n\n## Asking and Searching\n\n- your class repo: issues & discussions\n- [ask a duck](https://rubberduckdebugging.com/)\n- [what happens when ...](https://github.com/alex/what-happens-when)\n- [getting answers](https://www.mikeash.com/getting_answers.html)\n- [how to ask programming questions](https://www.propublica.org/nerds/how-to-ask-programming-questions)\n- [asking technical questions](https://www.youtube.com/watch?v=Gc9ilHp01vY)\n\n## Tutorials\n\nA selection of tutorial sites with interactive exercises, these tutorial will\nhelp you learn the JS Syntax you need to study the exercises in this repository.\nAs you're setting your study plans and priorities, remember: **Just Enough\nJavaScript**!\n\nThese tutorials will each cover different topics in different orders and in\ndifferent ways. Find the one that works for you:\n\n- [sololearn](https://www.sololearn.com/learning/1024): through Conditionals and\n  Loops\n- [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/index.html):\n  chapters 1 -> 5\n- [javascript.express](https://www.javascript.express/): the chapters that cover\n  Just Enough JavaScript\n- [programiz](https://www.programiz.com/javascript/get-started): through while\n  loops\n- [the net ninja](https://www.youtube.com/playlist?list=PL4cUxeGkcC9haFPT7J25Q9GRB_ZkFrQAc)\n  (video series)\n- [speaking js](http://speakingjs.com/) (online book)\n- [Headfirst JavaScript](https://www.oreilly.com/library/view/head-first-javascript/9781449340124/ch01.html):\n  an outstanding (paid) book for understanding JS and the web. comes with code\n  samples you can run locally\n\nIs there another tutorial you like better than these? not a problem! Just us a\nPR so other students can find it ;\\)\n\n## References\n\nResources you can use to look up specific concepts when you are stuck or\ncurious.\n\n- [Mozilla Developer Network \\(MDN\\)](https://developer.mozilla.org/en-US/docs/Web/javascript):\n  _the_ reference for JavaScript. It will take time to learn how to read and\n  understand MDN, but it's worth the wait.\n- [javascript.info](https://javascript.info): for short and clear explanations\n  of everything you will need in JS\n- [hackyourfuture.github.io/study](https://hackyourfuture.github.io/study): a\n  collection of explanations and resources put together by the HYF community.\n  PR's are welcome!\n- [codeacademy cheat-sheets](https://www.codecademy.com/learn/introduction-to-javascript/modules/learn-javascript-introduction/cheatsheet)\n\n## Reading Code\n\n- \\([how do computers read code?](https://www.youtube.com/watch?v=QXjU9qTsYCc)\\)\n- [Reading code is harder than writing it](https://trishagee.github.io/presentation/reading_code/)\n- [Learn to read the Source, Luke](https://blog.codinghorror.com/learn-to-read-the-source-luke/)\n- [Close-Reading Code](https://kylefdoherty.github.io/blog/2014/06/26/close-reading-code/)\n- [Read Code Good](https://www.youtube.com/watch?v=mW_xKGUKLpk)\n- [How to read code?](https://itnext.io/how-to-read-code-bf478c262932)\n- [5 tips](https://medium.com/@smilin.robin/5-tips-on-how-to-read-someone-elses-code-b931b6a059ec)\n- [How to read other people's code](https://selftaughtcoders.com/how-to-quickly-and-effectively-read-other-peoples-code/)\n- [ASCII Pronunciation Rules for Programmers](https://blog.codinghorror.com/ascii-pronunciation-rules-for-programmers/)\n- [JavaScript Glossary](https://www.codecademy.com/articles/glossary-javascript)\n- [How to teach programming \\(and other things\\)?](https://www.youtube.com/watch?v=g1ib43q3uXQ&feature=youtu.be&t=1209)\n- Code Reading Clubs - [code-reading.org](https://code-reading.org/)\n    - [Resources](https://github.com/CodeReadingClubs/Resources)\n    - [pdf-maker](https://github.com/CodeReadingClubs/pdf-maker) - convert code\n      from GitHub into a PDF for reading\n\n## Debugging Tools\n\n- [Errors & Debugging](https://education.launchcode.org/intro-to-professional-web-dev/chapters/errors-and-debugging/index.html)\n- [Developer Console](https://javascript.info/devtools)\n- [Debugging in Chrome](https://javascript.info/debugging-chrome)\n    - [definitive: 2021](https://dev.to/atapas/the-definitive-guide-to-javascript-debugging-2021-edition-116n)\n    - [breakpoints](https://developers.google.com/web/tools/chrome-devtools/javascript/reference)\n- [Debugging in FireFox](https://developer.mozilla.org/en-US/docs/Tools/Debugger)\n- [Replay Browser](https://replay.io/): A browser specially designed for\n  collaborative debugging.\n- [pythontutor.com](http://pythontutor.com/) ->\n  [JS Tutor](http://pythontutor.com/javascript.html)\n\n## Linting\n\n- [Code Style](https://javascript.info/coding-style)\n- what is linting? [Envato tuts+](https://www.youtube.com/watch?v=rrzC1RbMLiQ),\n  [ictshore](https://www.ictshore.com/javascript/what-is-javascript-linting/),\n  [(static analysis?)](https://deepsource.io/blog/static-analysis-javascript/)\n- Why is linting important?\n  [freecodecamp](https://www.freecodecamp.org/news/what-is-linting-and-how-can-it-save-you-time/),\n  [ibuildmvps](https://ibuildmvps.com/blog/the-importance-of-linting/),\n  [quora](https://www.quora.com/What-is-the-purpose-of-a-code-style-linting-tool?share=1)\n- [ESLint sandbox](https://eslint.org/demo/)\n- [ESLint rules](https://eslint.org/docs/rules/)\n- [Linting rules for JSDocs](https://github.com/Extersky/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules)\n\n---\n\n## Class Recordings\n\n> - HYF modules are often updated, recordings from past classes may not match\n>   this gitbook\n> - When sending a PR's with recording links please ...\n>     - Indicate which class you were teaching\n>     - Which week it was (if the module is more than 1 week)\n>     - a helpful title or description\n\n### [class-13-14](https://github.com/hackyourfuturebelgium/class-13-14)\n\n> Thibault, Evan\n\n1. Week 1:\n    - [Tracing Variables pt. 1](https://vimeo.com/524232825/)\n    - [Tracing Variables pt. 2](https://vimeo.com/524233174/)\n    - [Reading Code](https://vimeo.com/524232999/)\n2. Week 2:\n    - [Studying MadLibs pt. 1](https://vimeo.com/528300558)\n    - [Studying MadLibs pt. 2](https://vimeo.com/528300446)\n\n### [class-15](https://github.com/hackyourfuturebelgium/class-15)\n\n> Evan, Unmesh\n\n1. Week 1:\n    - [learning JS & tracing variables](https://vimeo.com/551365120)\n    - [tracing conditionals](https://vimeo.com/551365422)\n2. Week 2:\n    - [Reading Code](https://vimeo.com/554219000)\n\n### [Lab Antwerp 1](https://github.com/lab-antwerp-1/home)\n\n> Axxes-team, Evan\n\n- [Chapter 1](https://youtu.be/puKsxllt1P0)\n- Chapter 2: [part-1](https://youtu.be/VN3fXfRfZIE),\n  [part-2](https://youtu.be/_sDs8dKaDyM)\n\n### [class-19](https://github.com/HYF-Class19/home)\n\n> Evan, Eva, Louis, Jonathan\n\n1. Week 1:\n    - [learning JS & Study Lense & tracing variables](https://vimeo.com/748703159)\n"},{"name":"trace-tables.md","type":"file","ext":".md","base":"trace-tables","dir":"","path":"/trace-tables.md","lang":".md","content":"# Trace Tables\n\nTrace tables have been around as long as computer programming (probably). The challenge\nwith a trace table is to run the code in your head, keeping track of all the variables in\nyour program by hand. This is also called a _dry run_ or a _desk check_.\n\nYou can write trace tables on paper with a pencil (always a good way to go), or you can\nuse the trace tables built into Study Lenses. There are three different types of trace\ntable available in Study Lenses:\n\n1. **steps**: The _steps_ table asks you to be the computer and to go step by step through\n   the program, recording each time a variable is declared, read, or assigned. When you\n   use the steps table you can check your work by pressing `trace` button and comparing\n   your table to the console output.\n2. **values**: The _values_ table is the traditional type of trace table. With the\n   _values_ table you only keep track of each time a variable is assigned a new value. You\n   can also check your _values_ table by using the `trace` button and only checking\n   against the _assign_ logs\n3. **Operators**: This table is for studying operator precedence, you'll learn more about\n   this in Debugging.\n\nYou may find that the **steps** table is more helpful in the beginning when you are first\nlearning. It forces you to pay close attention to each step of program execution.\n\nLater on you may prefer the **values** table because it allows you to look at the bigger\npicture and see more clearly the _strategy_ (or _algorithm_) of a program.\n"}]}